
MultipleFrequency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008244  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080084e0  080084e0  000184e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d8  080086d8  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086e0  080086e0  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086e0  080086e0  000186e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086e4  080086e4  000186e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080086e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080086f8  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08008758  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000558  240000d0  080087b8  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000628  080087b8  00020628  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c90d  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002bc4  00000000  00000000  0003ca0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000ee8  00000000  00000000  0003f5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000de0  00000000  00000000  000404b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003680f  00000000  00000000  00041298  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0000d941  00000000  00000000  00077aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0015b5ab  00000000  00000000  000853e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001e0993  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000040d4  00000000  00000000  001e0a10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080084c4 	.word	0x080084c4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080084c4 	.word	0x080084c4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	ed2d 8b04 	vpush	{d8-d9}
 80005de:	b090      	sub	sp, #64	; 0x40
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fe8f 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f9b5 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fb3d 	bl	8000c68 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ee:	f000 fa6b 	bl	8000ac8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 fabb 	bl	8000b6c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f6:	f000 fb05 	bl	8000c04 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  int mode_1=0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	623b      	str	r3, [r7, #32]
  int mode_2=0;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  int mode_3=0;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
  int mode_4=0;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  int mode_5=0;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  float x = 0;
 800060e:	f04f 0300 	mov.w	r3, #0
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == 0){
 8000614:	2108      	movs	r1, #8
 8000616:	48cb      	ldr	r0, [pc, #812]	; (8000944 <main+0x36c>)
 8000618:	f001 fdf2 	bl	8002200 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d169      	bne.n	80006f6 <main+0x11e>
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, 1);
 8000622:	2201      	movs	r2, #1
 8000624:	2101      	movs	r1, #1
 8000626:	48c8      	ldr	r0, [pc, #800]	; (8000948 <main+0x370>)
 8000628:	f001 fe02 	bl	8002230 <HAL_GPIO_WritePin>
		  for(int i=0;i<10000;i++){
 800062c:	2300      	movs	r3, #0
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000630:	e056      	b.n	80006e0 <main+0x108>
			  //1KHz loop
			  uint32_t tickstart = HAL_GetTick();
 8000632:	f000 feed 	bl	8001410 <HAL_GetTick>
 8000636:	6078      	str	r0, [r7, #4]
			  uint32_t wait = 1;
 8000638:	2301      	movs	r3, #1
 800063a:	637b      	str	r3, [r7, #52]	; 0x34
			  /* Add a freq to guarantee minimum wait */
			  if (wait < HAL_MAX_DELAY){
 800063c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800063e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000642:	d005      	beq.n	8000650 <main+0x78>
				  wait += (uint32_t)(uwTickFreq);
 8000644:	4bc1      	ldr	r3, [pc, #772]	; (800094c <main+0x374>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800064c:	4413      	add	r3, r2
 800064e:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  x = x*x+sin(x)*sin(x)+cos(x)*sin(x);
 8000650:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000654:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800065c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000660:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000664:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000668:	eeb0 0b47 	vmov.f64	d0, d7
 800066c:	f007 f940 	bl	80078f0 <sin>
 8000670:	eeb0 9b40 	vmov.f64	d9, d0
 8000674:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000678:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800067c:	eeb0 0b47 	vmov.f64	d0, d7
 8000680:	f007 f936 	bl	80078f0 <sin>
 8000684:	eeb0 7b40 	vmov.f64	d7, d0
 8000688:	ee29 7b07 	vmul.f64	d7, d9, d7
 800068c:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000690:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000694:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000698:	eeb0 0b47 	vmov.f64	d0, d7
 800069c:	f007 f8ec 	bl	8007878 <cos>
 80006a0:	eeb0 9b40 	vmov.f64	d9, d0
 80006a4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80006a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ac:	eeb0 0b47 	vmov.f64	d0, d7
 80006b0:	f007 f91e 	bl	80078f0 <sin>
 80006b4:	eeb0 7b40 	vmov.f64	d7, d0
 80006b8:	ee29 7b07 	vmul.f64	d7, d9, d7
 80006bc:	ee38 7b07 	vadd.f64	d7, d8, d7
 80006c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006c4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			  while ((HAL_GetTick() - tickstart) < wait){}
 80006c8:	bf00      	nop
 80006ca:	f000 fea1 	bl	8001410 <HAL_GetTick>
 80006ce:	4602      	mov	r2, r0
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d8f7      	bhi.n	80006ca <main+0xf2>
		  for(int i=0;i<10000;i++){
 80006da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006dc:	3301      	adds	r3, #1
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
 80006e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80006e6:	4293      	cmp	r3, r2
 80006e8:	dda3      	ble.n	8000632 <main+0x5a>
		  }
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	4896      	ldr	r0, [pc, #600]	; (8000948 <main+0x370>)
 80006f0:	f001 fd9e 	bl	8002230 <HAL_GPIO_WritePin>
 80006f4:	e78e      	b.n	8000614 <main+0x3c>
	  }else if(HAL_GPIO_ReadPin(B2_GPIO_Port,B2_Pin) == 0){
 80006f6:	2101      	movs	r1, #1
 80006f8:	4895      	ldr	r0, [pc, #596]	; (8000950 <main+0x378>)
 80006fa:	f001 fd81 	bl	8002200 <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d169      	bne.n	80007d8 <main+0x200>
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	2101      	movs	r1, #1
 8000708:	488f      	ldr	r0, [pc, #572]	; (8000948 <main+0x370>)
 800070a:	f001 fd91 	bl	8002230 <HAL_GPIO_WritePin>
		  for(int i=0;i<3333;i++){
 800070e:	2300      	movs	r3, #0
 8000710:	633b      	str	r3, [r7, #48]	; 0x30
 8000712:	e056      	b.n	80007c2 <main+0x1ea>
			  //333Hz loop
			  uint32_t tickstart = HAL_GetTick();
 8000714:	f000 fe7c 	bl	8001410 <HAL_GetTick>
 8000718:	60b8      	str	r0, [r7, #8]
			  uint32_t wait = 3;
 800071a:	2303      	movs	r3, #3
 800071c:	62fb      	str	r3, [r7, #44]	; 0x2c
			  /* Add a freq to guarantee minimum wait */
			  if (wait < HAL_MAX_DELAY){
 800071e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000724:	d005      	beq.n	8000732 <main+0x15a>
				  wait += (uint32_t)(uwTickFreq);
 8000726:	4b89      	ldr	r3, [pc, #548]	; (800094c <main+0x374>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072e:	4413      	add	r3, r2
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
			  }
			  x = x*x+sin(x)*sin(x)+cos(x)*sin(x);
 8000732:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000736:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800073a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000742:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000746:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800074a:	eeb0 0b47 	vmov.f64	d0, d7
 800074e:	f007 f8cf 	bl	80078f0 <sin>
 8000752:	eeb0 9b40 	vmov.f64	d9, d0
 8000756:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800075a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800075e:	eeb0 0b47 	vmov.f64	d0, d7
 8000762:	f007 f8c5 	bl	80078f0 <sin>
 8000766:	eeb0 7b40 	vmov.f64	d7, d0
 800076a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800076e:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000772:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000776:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800077a:	eeb0 0b47 	vmov.f64	d0, d7
 800077e:	f007 f87b 	bl	8007878 <cos>
 8000782:	eeb0 9b40 	vmov.f64	d9, d0
 8000786:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800078a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800078e:	eeb0 0b47 	vmov.f64	d0, d7
 8000792:	f007 f8ad 	bl	80078f0 <sin>
 8000796:	eeb0 7b40 	vmov.f64	d7, d0
 800079a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800079e:	ee38 7b07 	vadd.f64	d7, d8, d7
 80007a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007a6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			  while ((HAL_GetTick() - tickstart) < wait){}
 80007aa:	bf00      	nop
 80007ac:	f000 fe30 	bl	8001410 <HAL_GetTick>
 80007b0:	4602      	mov	r2, r0
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d8f7      	bhi.n	80007ac <main+0x1d4>
		  for(int i=0;i<3333;i++){
 80007bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007be:	3301      	adds	r3, #1
 80007c0:	633b      	str	r3, [r7, #48]	; 0x30
 80007c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c4:	f640 5204 	movw	r2, #3332	; 0xd04
 80007c8:	4293      	cmp	r3, r2
 80007ca:	dda3      	ble.n	8000714 <main+0x13c>
		  }
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2101      	movs	r1, #1
 80007d0:	485d      	ldr	r0, [pc, #372]	; (8000948 <main+0x370>)
 80007d2:	f001 fd2d 	bl	8002230 <HAL_GPIO_WritePin>
 80007d6:	e71d      	b.n	8000614 <main+0x3c>
	  }else if(HAL_GPIO_ReadPin(B3_GPIO_Port,B3_Pin) == 0){
 80007d8:	2108      	movs	r1, #8
 80007da:	485d      	ldr	r0, [pc, #372]	; (8000950 <main+0x378>)
 80007dc:	f001 fd10 	bl	8002200 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d169      	bne.n	80008ba <main+0x2e2>
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, 1);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2101      	movs	r1, #1
 80007ea:	4857      	ldr	r0, [pc, #348]	; (8000948 <main+0x370>)
 80007ec:	f001 fd20 	bl	8002230 <HAL_GPIO_WritePin>
		  for(int i=0;i<666;i++){
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80007f4:	e056      	b.n	80008a4 <main+0x2cc>
			  //333Hz loop
			  uint32_t tickstart = HAL_GetTick();
 80007f6:	f000 fe0b 	bl	8001410 <HAL_GetTick>
 80007fa:	60f8      	str	r0, [r7, #12]
			  uint32_t wait = 15;
 80007fc:	230f      	movs	r3, #15
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
			  /* Add a freq to guarantee minimum wait */
			  if (wait < HAL_MAX_DELAY){
 8000800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000806:	d005      	beq.n	8000814 <main+0x23c>
				  wait += (uint32_t)(uwTickFreq);
 8000808:	4b50      	ldr	r3, [pc, #320]	; (800094c <main+0x374>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000810:	4413      	add	r3, r2
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  x = x*x+sin(x)*sin(x)+cos(x)*sin(x);
 8000814:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000818:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800081c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000820:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000824:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800082c:	eeb0 0b47 	vmov.f64	d0, d7
 8000830:	f007 f85e 	bl	80078f0 <sin>
 8000834:	eeb0 9b40 	vmov.f64	d9, d0
 8000838:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800083c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000840:	eeb0 0b47 	vmov.f64	d0, d7
 8000844:	f007 f854 	bl	80078f0 <sin>
 8000848:	eeb0 7b40 	vmov.f64	d7, d0
 800084c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000850:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000854:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000858:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800085c:	eeb0 0b47 	vmov.f64	d0, d7
 8000860:	f007 f80a 	bl	8007878 <cos>
 8000864:	eeb0 9b40 	vmov.f64	d9, d0
 8000868:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800086c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000870:	eeb0 0b47 	vmov.f64	d0, d7
 8000874:	f007 f83c 	bl	80078f0 <sin>
 8000878:	eeb0 7b40 	vmov.f64	d7, d0
 800087c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000880:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000884:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000888:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			  while ((HAL_GetTick() - tickstart) < wait){}
 800088c:	bf00      	nop
 800088e:	f000 fdbf 	bl	8001410 <HAL_GetTick>
 8000892:	4602      	mov	r2, r0
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800089a:	429a      	cmp	r2, r3
 800089c:	d8f7      	bhi.n	800088e <main+0x2b6>
		  for(int i=0;i<666;i++){
 800089e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a0:	3301      	adds	r3, #1
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80008a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a6:	f240 2299 	movw	r2, #665	; 0x299
 80008aa:	4293      	cmp	r3, r2
 80008ac:	dda3      	ble.n	80007f6 <main+0x21e>
		  }
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2101      	movs	r1, #1
 80008b2:	4825      	ldr	r0, [pc, #148]	; (8000948 <main+0x370>)
 80008b4:	f001 fcbc 	bl	8002230 <HAL_GPIO_WritePin>
 80008b8:	e6ac      	b.n	8000614 <main+0x3c>
	  }else if(HAL_GPIO_ReadPin(B4_GPIO_Port,B4_Pin) == 0){
 80008ba:	2102      	movs	r1, #2
 80008bc:	4822      	ldr	r0, [pc, #136]	; (8000948 <main+0x370>)
 80008be:	f001 fc9f 	bl	8002200 <HAL_GPIO_ReadPin>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	f47f aea5 	bne.w	8000614 <main+0x3c>
		  x = x*x+sin(x)*sin(x)+cos(x)*sin(x);
 80008ca:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80008ce:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80008d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008d6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80008da:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80008de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008e2:	eeb0 0b47 	vmov.f64	d0, d7
 80008e6:	f007 f803 	bl	80078f0 <sin>
 80008ea:	eeb0 9b40 	vmov.f64	d9, d0
 80008ee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80008f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008f6:	eeb0 0b47 	vmov.f64	d0, d7
 80008fa:	f006 fff9 	bl	80078f0 <sin>
 80008fe:	eeb0 7b40 	vmov.f64	d7, d0
 8000902:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000906:	ee38 8b07 	vadd.f64	d8, d8, d7
 800090a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800090e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000912:	eeb0 0b47 	vmov.f64	d0, d7
 8000916:	f006 ffaf 	bl	8007878 <cos>
 800091a:	eeb0 9b40 	vmov.f64	d9, d0
 800091e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000922:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000926:	eeb0 0b47 	vmov.f64	d0, d7
 800092a:	f006 ffe1 	bl	80078f0 <sin>
 800092e:	eeb0 7b40 	vmov.f64	d7, d0
 8000932:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000936:	ee38 7b07 	vadd.f64	d7, d8, d7
 800093a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800093e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == 0){
 8000942:	e667      	b.n	8000614 <main+0x3c>
 8000944:	58020000 	.word	0x58020000
 8000948:	58020400 	.word	0x58020400
 800094c:	2400000c 	.word	0x2400000c
 8000950:	58020800 	.word	0x58020800

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b0cc      	sub	sp, #304	; 0x130
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800095e:	224c      	movs	r2, #76	; 0x4c
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f006 ff80 	bl	8007868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800096c:	2220      	movs	r2, #32
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f006 ff79 	bl	8007868 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	4618      	mov	r0, r3
 800097c:	23bc      	movs	r3, #188	; 0xbc
 800097e:	461a      	mov	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f006 ff71 	bl	8007868 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000986:	2002      	movs	r0, #2
 8000988:	f001 fdb4 	bl	80024f4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	4b4a      	ldr	r3, [pc, #296]	; (8000abc <SystemClock_Config+0x168>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	4a49      	ldr	r2, [pc, #292]	; (8000abc <SystemClock_Config+0x168>)
 8000998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800099c:	6193      	str	r3, [r2, #24]
 800099e:	4b47      	ldr	r3, [pc, #284]	; (8000abc <SystemClock_Config+0x168>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <SystemClock_Config+0x16c>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	4a44      	ldr	r2, [pc, #272]	; (8000ac0 <SystemClock_Config+0x16c>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009b6:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <SystemClock_Config+0x16c>)
 80009b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ba:	f003 0201 	and.w	r2, r3, #1
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c6:	bf00      	nop
 80009c8:	4b3c      	ldr	r3, [pc, #240]	; (8000abc <SystemClock_Config+0x168>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009d4:	d1f8      	bne.n	80009c8 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d6:	2301      	movs	r3, #1
 80009d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e4:	2302      	movs	r3, #2
 80009e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ea:	2302      	movs	r3, #2
 80009ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009f6:	2378      	movs	r3, #120	; 0x78
 80009f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000a02:	2314      	movs	r3, #20
 8000a04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a0e:	230c      	movs	r3, #12
 8000a10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a20:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fdaf 	bl	8002588 <HAL_RCC_OscConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000a30:	f000 fa1c 	bl	8000e6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a34:	233f      	movs	r3, #63	; 0x3f
 8000a36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a46:	2308      	movs	r3, #8
 8000a48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a4c:	2340      	movs	r3, #64	; 0x40
 8000a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a52:	2340      	movs	r3, #64	; 0x40
 8000a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a60:	2340      	movs	r3, #64	; 0x40
 8000a62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a66:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 f963 	bl	8002d38 <HAL_RCC_ClockConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000a78:	f000 f9f8 	bl	8000e6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <SystemClock_Config+0x170>)
 8000a82:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	2200      	movs	r2, #0
 8000a8a:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fccf 	bl	8003440 <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000aa8:	f000 f9e0 	bl	8000e6c <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000aac:	f001 fd5c 	bl	8002568 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000ab0:	bf00      	nop
 8000ab2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	58024800 	.word	0x58024800
 8000ac0:	58000400 	.word	0x58000400
 8000ac4:	00040002 	.word	0x00040002

08000ac8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <MX_ETH_Init+0x90>)
 8000ace:	4a23      	ldr	r2, [pc, #140]	; (8000b5c <MX_ETH_Init+0x94>)
 8000ad0:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <MX_ETH_Init+0x90>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_ETH_Init+0x90>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_ETH_Init+0x90>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	3302      	adds	r3, #2
 8000aea:	22e1      	movs	r2, #225	; 0xe1
 8000aec:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_ETH_Init+0x90>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	3303      	adds	r3, #3
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_ETH_Init+0x90>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	3304      	adds	r3, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_ETH_Init+0x90>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	3305      	adds	r3, #5
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_ETH_Init+0x90>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_ETH_Init+0x90>)
 8000b14:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MX_ETH_Init+0x98>)
 8000b16:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_ETH_Init+0x90>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <MX_ETH_Init+0x9c>)
 8000b1c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_ETH_Init+0x90>)
 8000b20:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b24:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <MX_ETH_Init+0x90>)
 8000b28:	f000 fda4 	bl	8001674 <HAL_ETH_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000b32:	f000 f99b 	bl	8000e6c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b36:	2234      	movs	r2, #52	; 0x34
 8000b38:	2100      	movs	r1, #0
 8000b3a:	480b      	ldr	r0, [pc, #44]	; (8000b68 <MX_ETH_Init+0xa0>)
 8000b3c:	f006 fe94 	bl	8007868 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_ETH_Init+0xa0>)
 8000b42:	2221      	movs	r2, #33	; 0x21
 8000b44:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_ETH_Init+0xa0>)
 8000b48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b4c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_ETH_Init+0xa0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	24000580 	.word	0x24000580
 8000b5c:	40028000 	.word	0x40028000
 8000b60:	24000070 	.word	0x24000070
 8000b64:	24000010 	.word	0x24000010
 8000b68:	240005f0 	.word	0x240005f0

08000b6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b72:	4a23      	ldr	r2, [pc, #140]	; (8000c00 <MX_USART3_UART_Init+0x94>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_USART3_UART_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_USART3_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_USART3_UART_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_USART3_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb4:	4811      	ldr	r0, [pc, #68]	; (8000bfc <MX_USART3_UART_Init+0x90>)
 8000bb6:	f003 ff33 	bl	8004a20 <HAL_UART_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bc0:	f000 f954 	bl	8000e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_USART3_UART_Init+0x90>)
 8000bc8:	f006 fa9b 	bl	8007102 <HAL_UARTEx_SetTxFifoThreshold>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bd2:	f000 f94b 	bl	8000e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4808      	ldr	r0, [pc, #32]	; (8000bfc <MX_USART3_UART_Init+0x90>)
 8000bda:	f006 fad0 	bl	800717e <HAL_UARTEx_SetRxFifoThreshold>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000be4:	f000 f942 	bl	8000e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_USART3_UART_Init+0x90>)
 8000bea:	f006 fa51 	bl	8007090 <HAL_UARTEx_DisableFifoMode>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf4:	f000 f93a 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	240000ec 	.word	0x240000ec
 8000c00:	40004800 	.word	0x40004800

08000c04 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c0a:	4a16      	ldr	r2, [pc, #88]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c10:	2209      	movs	r2, #9
 8000c12:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c16:	2202      	movs	r2, #2
 8000c18:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c4c:	f001 fb09 	bl	8002262 <HAL_PCD_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c56:	f000 f909 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	24000178 	.word	0x24000178
 8000c64:	40080000 	.word	0x40080000

08000c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	; 0x30
 8000c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	4b73      	ldr	r3, [pc, #460]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	4a71      	ldr	r2, [pc, #452]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000c86:	f043 0304 	orr.w	r3, r3, #4
 8000c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8e:	4b6f      	ldr	r3, [pc, #444]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9c:	4b6b      	ldr	r3, [pc, #428]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca2:	4a6a      	ldr	r2, [pc, #424]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cac:	4b67      	ldr	r3, [pc, #412]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b64      	ldr	r3, [pc, #400]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc0:	4a62      	ldr	r2, [pc, #392]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cca:	4b60      	ldr	r3, [pc, #384]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd8:	4b5c      	ldr	r3, [pc, #368]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cde:	4a5b      	ldr	r2, [pc, #364]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce8:	4b58      	ldr	r3, [pc, #352]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf6:	4b55      	ldr	r3, [pc, #340]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfc:	4a53      	ldr	r2, [pc, #332]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d06:	4b51      	ldr	r3, [pc, #324]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	4b4d      	ldr	r3, [pc, #308]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1a:	4a4c      	ldr	r2, [pc, #304]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d24:	4b49      	ldr	r3, [pc, #292]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d32:	4b46      	ldr	r3, [pc, #280]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d38:	4a44      	ldr	r2, [pc, #272]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d42:	4b42      	ldr	r3, [pc, #264]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d48:	f003 0310 	and.w	r3, r3, #16
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d56:	483e      	ldr	r0, [pc, #248]	; (8000e50 <MX_GPIO_Init+0x1e8>)
 8000d58:	f001 fa6a 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d62:	483c      	ldr	r0, [pc, #240]	; (8000e54 <MX_GPIO_Init+0x1ec>)
 8000d64:	f001 fa64 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	483a      	ldr	r0, [pc, #232]	; (8000e58 <MX_GPIO_Init+0x1f0>)
 8000d6e:	f001 fa5f 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4835      	ldr	r0, [pc, #212]	; (8000e5c <MX_GPIO_Init+0x1f4>)
 8000d88:	f001 f88a 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000d8c:	2309      	movs	r3, #9
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	482f      	ldr	r0, [pc, #188]	; (8000e5c <MX_GPIO_Init+0x1f4>)
 8000da0:	f001 f87e 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000da4:	2308      	movs	r3, #8
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	482a      	ldr	r0, [pc, #168]	; (8000e60 <MX_GPIO_Init+0x1f8>)
 8000db8:	f001 f872 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000dbc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	481e      	ldr	r0, [pc, #120]	; (8000e50 <MX_GPIO_Init+0x1e8>)
 8000dd6:	f001 f863 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B4_Pin */
  GPIO_InitStruct.Pin = B4_Pin;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B4_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	4818      	ldr	r0, [pc, #96]	; (8000e50 <MX_GPIO_Init+0x1e8>)
 8000dee:	f001 f857 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4812      	ldr	r0, [pc, #72]	; (8000e54 <MX_GPIO_Init+0x1ec>)
 8000e0c:	f001 f848 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_GPIO_Init+0x1fc>)
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_GPIO_Init+0x200>)
 8000e24:	f001 f83c 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	; (8000e58 <MX_GPIO_Init+0x1f0>)
 8000e40:	f001 f82e 	bl	8001ea0 <HAL_GPIO_Init>

}
 8000e44:	bf00      	nop
 8000e46:	3730      	adds	r7, #48	; 0x30
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	58024400 	.word	0x58024400
 8000e50:	58020400 	.word	0x58020400
 8000e54:	58020c00 	.word	0x58020c00
 8000e58:	58021000 	.word	0x58021000
 8000e5c:	58020800 	.word	0x58020800
 8000e60:	58020000 	.word	0x58020000
 8000e64:	11110000 	.word	0x11110000
 8000e68:	58021800 	.word	0x58021800

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_MspInit+0x30>)
 8000e84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e88:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_MspInit+0x30>)
 8000e8a:	f043 0302 	orr.w	r3, r3, #2
 8000e8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_MspInit+0x30>)
 8000e94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	58024400 	.word	0x58024400

08000eb0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a59      	ldr	r2, [pc, #356]	; (8001034 <HAL_ETH_MspInit+0x184>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	f040 80ab 	bne.w	800102a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ed4:	4b58      	ldr	r3, [pc, #352]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000ed6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eda:	4a57      	ldr	r2, [pc, #348]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ee0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ee4:	4b54      	ldr	r3, [pc, #336]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000ee6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eee:	623b      	str	r3, [r7, #32]
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ef2:	4b51      	ldr	r3, [pc, #324]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000ef4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ef8:	4a4f      	ldr	r2, [pc, #316]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f02:	4b4d      	ldr	r3, [pc, #308]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f10:	4b49      	ldr	r3, [pc, #292]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f16:	4a48      	ldr	r2, [pc, #288]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f20:	4b45      	ldr	r3, [pc, #276]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	61bb      	str	r3, [r7, #24]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	4b42      	ldr	r3, [pc, #264]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f34:	4a40      	ldr	r2, [pc, #256]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f36:	f043 0304 	orr.w	r3, r3, #4
 8000f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3e:	4b3e      	ldr	r3, [pc, #248]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f52:	4a39      	ldr	r2, [pc, #228]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5c:	4b36      	ldr	r3, [pc, #216]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b33      	ldr	r3, [pc, #204]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f70:	4a31      	ldr	r2, [pc, #196]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8e:	4a2a      	ldr	r2, [pc, #168]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f98:	4b27      	ldr	r3, [pc, #156]	; (8001038 <HAL_ETH_MspInit+0x188>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000fa6:	2332      	movs	r3, #50	; 0x32
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb6:	230b      	movs	r3, #11
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	481e      	ldr	r0, [pc, #120]	; (800103c <HAL_ETH_MspInit+0x18c>)
 8000fc2:	f000 ff6d 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000fc6:	2386      	movs	r3, #134	; 0x86
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd6:	230b      	movs	r3, #11
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4817      	ldr	r0, [pc, #92]	; (8001040 <HAL_ETH_MspInit+0x190>)
 8000fe2:	f000 ff5d 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff8:	230b      	movs	r3, #11
 8000ffa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001000:	4619      	mov	r1, r3
 8001002:	4810      	ldr	r0, [pc, #64]	; (8001044 <HAL_ETH_MspInit+0x194>)
 8001004:	f000 ff4c 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001008:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800101a:	230b      	movs	r3, #11
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <HAL_ETH_MspInit+0x198>)
 8001026:	f000 ff3b 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800102a:	bf00      	nop
 800102c:	3738      	adds	r7, #56	; 0x38
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40028000 	.word	0x40028000
 8001038:	58024400 	.word	0x58024400
 800103c:	58020800 	.word	0x58020800
 8001040:	58020000 	.word	0x58020000
 8001044:	58020400 	.word	0x58020400
 8001048:	58021800 	.word	0x58021800

0800104c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <HAL_UART_MspInit+0x88>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12e      	bne.n	80010cc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_UART_MspInit+0x8c>)
 8001070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001074:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <HAL_UART_MspInit+0x8c>)
 8001076:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800107a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_UART_MspInit+0x8c>)
 8001080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_UART_MspInit+0x8c>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001092:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <HAL_UART_MspInit+0x8c>)
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_UART_MspInit+0x8c>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010bc:	2307      	movs	r3, #7
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <HAL_UART_MspInit+0x90>)
 80010c8:	f000 feea 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	; 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40004800 	.word	0x40004800
 80010d8:	58024400 	.word	0x58024400
 80010dc:	58020c00 	.word	0x58020c00

080010e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a21      	ldr	r2, [pc, #132]	; (8001184 <HAL_PCD_MspInit+0xa4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d13b      	bne.n	800117a <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_PCD_MspInit+0xa8>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	4a1f      	ldr	r2, [pc, #124]	; (8001188 <HAL_PCD_MspInit+0xa8>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_PCD_MspInit+0xa8>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001120:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001132:	230a      	movs	r3, #10
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4813      	ldr	r0, [pc, #76]	; (800118c <HAL_PCD_MspInit+0xac>)
 800113e:	f000 feaf 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	480d      	ldr	r0, [pc, #52]	; (800118c <HAL_PCD_MspInit+0xac>)
 8001158:	f000 fea2 	bl	8001ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_PCD_MspInit+0xa8>)
 800115e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001162:	4a09      	ldr	r2, [pc, #36]	; (8001188 <HAL_PCD_MspInit+0xa8>)
 8001164:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001168:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_PCD_MspInit+0xa8>)
 800116e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800117a:	bf00      	nop
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40080000 	.word	0x40080000
 8001188:	58024400 	.word	0x58024400
 800118c:	58020000 	.word	0x58020000

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e4:	f000 f900 	bl	80013e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <SystemInit+0xac>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f6:	4a28      	ldr	r2, [pc, #160]	; (8001298 <SystemInit+0xac>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001200:	4b26      	ldr	r3, [pc, #152]	; (800129c <SystemInit+0xb0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a25      	ldr	r2, [pc, #148]	; (800129c <SystemInit+0xb0>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <SystemInit+0xb0>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001212:	4b22      	ldr	r3, [pc, #136]	; (800129c <SystemInit+0xb0>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4921      	ldr	r1, [pc, #132]	; (800129c <SystemInit+0xb0>)
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <SystemInit+0xb4>)
 800121a:	4013      	ands	r3, r2
 800121c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <SystemInit+0xb0>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <SystemInit+0xb0>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <SystemInit+0xb0>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <SystemInit+0xb0>)
 8001232:	2200      	movs	r2, #0
 8001234:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <SystemInit+0xb0>)
 8001238:	2200      	movs	r2, #0
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <SystemInit+0xb0>)
 800123e:	2200      	movs	r2, #0
 8001240:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <SystemInit+0xb0>)
 8001244:	2200      	movs	r2, #0
 8001246:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <SystemInit+0xb0>)
 800124a:	2200      	movs	r2, #0
 800124c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <SystemInit+0xb0>)
 8001250:	2200      	movs	r2, #0
 8001252:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <SystemInit+0xb0>)
 8001256:	2200      	movs	r2, #0
 8001258:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <SystemInit+0xb0>)
 800125c:	2200      	movs	r2, #0
 800125e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <SystemInit+0xb0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0d      	ldr	r2, [pc, #52]	; (800129c <SystemInit+0xb0>)
 8001266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <SystemInit+0xb0>)
 800126e:	2200      	movs	r2, #0
 8001270:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <SystemInit+0xb8>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <SystemInit+0xbc>)
 8001278:	4013      	ands	r3, r2
 800127a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800127e:	d202      	bcs.n	8001286 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <SystemInit+0xc0>)
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <SystemInit+0xac>)
 8001288:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800128c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00
 800129c:	58024400 	.word	0x58024400
 80012a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80012a4:	5c001000 	.word	0x5c001000
 80012a8:	ffff0000 	.word	0xffff0000
 80012ac:	51008108 	.word	0x51008108

080012b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012b6:	e003      	b.n	80012c0 <LoopCopyDataInit>

080012b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012be:	3104      	adds	r1, #4

080012c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012c0:	480b      	ldr	r0, [pc, #44]	; (80012f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012c8:	d3f6      	bcc.n	80012b8 <CopyDataInit>
  ldr  r2, =_sbss
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012cc:	e002      	b.n	80012d4 <LoopFillZerobss>

080012ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012d0:	f842 3b04 	str.w	r3, [r2], #4

080012d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012d8:	d3f9      	bcc.n	80012ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012da:	f7ff ff87 	bl	80011ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012de:	f006 fa9f 	bl	8007820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e2:	f7ff f979 	bl	80005d8 <main>
  bx  lr    
 80012e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012e8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80012ec:	080086e8 	.word	0x080086e8
  ldr  r0, =_sdata
 80012f0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80012f4:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 80012f8:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 80012fc:	24000628 	.word	0x24000628

08001300 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC3_IRQHandler>
	...

08001304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130a:	2003      	movs	r0, #3
 800130c:	f000 f980 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001310:	f001 fec8 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8001314:	4601      	mov	r1, r0
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_Init+0x68>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	4a13      	ldr	r2, [pc, #76]	; (8001370 <HAL_Init+0x6c>)
 8001322:	5cd3      	ldrb	r3, [r2, r3]
 8001324:	f003 031f 	and.w	r3, r3, #31
 8001328:	fa21 f303 	lsr.w	r3, r1, r3
 800132c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_Init+0x68>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <HAL_Init+0x6c>)
 8001338:	5cd3      	ldrb	r3, [r2, r3]
 800133a:	f003 031f 	and.w	r3, r3, #31
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
 8001344:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <HAL_Init+0x70>)
 8001346:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001348:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <HAL_Init+0x74>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800134e:	2000      	movs	r0, #0
 8001350:	f000 f814 	bl	800137c <HAL_InitTick>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e002      	b.n	8001364 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800135e:	f7ff fd8d 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	58024400 	.word	0x58024400
 8001370:	080084f0 	.word	0x080084f0
 8001374:	24000004 	.word	0x24000004
 8001378:	24000000 	.word	0x24000000

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_InitTick+0x60>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e021      	b.n	80013d4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_InitTick+0x64>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_InitTick+0x60>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f957 	bl	800165a <HAL_SYSTICK_Config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00e      	b.n	80013d4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d80a      	bhi.n	80013d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f000 f92f 	bl	8001626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_InitTick+0x68>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2400000c 	.word	0x2400000c
 80013e0:	24000000 	.word	0x24000000
 80013e4:	24000008 	.word	0x24000008

080013e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x20>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_IncTick+0x24>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	2400000c 	.word	0x2400000c
 800140c:	24000624 	.word	0x24000624

08001410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	24000624 	.word	0x24000624

08001428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff ffee 	bl	8001410 <HAL_GetTick>
 8001434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001440:	d005      	beq.n	800144e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_Delay+0x40>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800144e:	bf00      	nop
 8001450:	f7ff ffde 	bl	8001410 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8f7      	bhi.n	8001450 <HAL_Delay+0x28>
  {
  }
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2400000c 	.word	0x2400000c

0800146c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <HAL_GetREVID+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	0c1b      	lsrs	r3, r3, #16
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	5c001000 	.word	0x5c001000

08001484 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001494:	4904      	ldr	r1, [pc, #16]	; (80014a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	58000400 	.word	0x58000400

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <__NVIC_SetPriorityGrouping+0x40>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x40>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	05fa0000 	.word	0x05fa0000

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f7ff ff8e 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff47 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001634:	f7ff ff5e 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff ff90 	bl	8001564 <NVIC_EncodePriority>
 8001644:	4602      	mov	r2, r0
 8001646:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff5f 	bl	8001510 <__NVIC_SetPriority>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffb2 	bl	80015cc <SysTick_Config>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0c6      	b.n	8001814 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168a:	2b00      	cmp	r3, #0
 800168c:	d102      	bne.n	8001694 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fc0e 	bl	8000eb0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2223      	movs	r2, #35	; 0x23
 8001698:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b60      	ldr	r3, [pc, #384]	; (800181c <HAL_ETH_Init+0x1a8>)
 800169c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016a0:	4a5e      	ldr	r2, [pc, #376]	; (800181c <HAL_ETH_Init+0x1a8>)
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016aa:	4b5c      	ldr	r3, [pc, #368]	; (800181c <HAL_ETH_Init+0x1a8>)
 80016ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7a1b      	ldrb	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d103      	bne.n	80016c8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80016c0:	2000      	movs	r0, #0
 80016c2:	f7ff fedf 	bl	8001484 <HAL_SYSCFG_ETHInterfaceSelect>
 80016c6:	e003      	b.n	80016d0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80016c8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80016cc:	f7ff feda 	bl	8001484 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016e8:	f7ff fe92 	bl	8001410 <HAL_GetTick>
 80016ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016ee:	e00f      	b.n	8001710 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80016f0:	f7ff fe8e 	bl	8001410 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016fe:	d907      	bls.n	8001710 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2204      	movs	r2, #4
 8001704:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	22e0      	movs	r2, #224	; 0xe0
 800170a:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e081      	b.n	8001814 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1e6      	bne.n	80016f0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fac0 	bl	8001ca8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001728:	f001 fe2e 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 800172c:	4602      	mov	r2, r0
 800172e:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <HAL_ETH_Init+0x1ac>)
 8001730:	fba3 2302 	umull	r2, r3, r3, r2
 8001734:	0c9a      	lsrs	r2, r3, #18
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	3a01      	subs	r2, #1
 800173c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 fa13 	bl	8001b6c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800175c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001760:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	22e0      	movs	r2, #224	; 0xe0
 8001778:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e04a      	b.n	8001814 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	f241 1308 	movw	r3, #4360	; 0x1108
 8001786:	4413      	add	r3, r2
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <HAL_ETH_Init+0x1b0>)
 800178c:	4013      	ands	r3, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6952      	ldr	r2, [r2, #20]
 8001792:	0052      	lsls	r2, r2, #1
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	6809      	ldr	r1, [r1, #0]
 8001798:	431a      	orrs	r2, r3
 800179a:	f241 1308 	movw	r3, #4360	; 0x1108
 800179e:	440b      	add	r3, r1
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fad8 	bl	8001d58 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fb1c 	bl	8001de6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	3305      	adds	r3, #5
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	021a      	lsls	r2, r3, #8
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	3304      	adds	r3, #4
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	3303      	adds	r3, #3
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	061a      	lsls	r2, r3, #24
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	3302      	adds	r3, #2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	041b      	lsls	r3, r3, #16
 80017e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	3301      	adds	r3, #1
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017fa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2210      	movs	r2, #16
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2210      	movs	r2, #16
 8001810:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	58024400 	.word	0x58024400
 8001820:	431bde83 	.word	0x431bde83
 8001824:	ffff8001 	.word	0xffff8001

08001828 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800183a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	791b      	ldrb	r3, [r3, #4]
 8001840:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001842:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	7b1b      	ldrb	r3, [r3, #12]
 8001848:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800184a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	7b5b      	ldrb	r3, [r3, #13]
 8001850:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001852:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	7b9b      	ldrb	r3, [r3, #14]
 8001858:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800185a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	7bdb      	ldrb	r3, [r3, #15]
 8001860:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001862:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	7c12      	ldrb	r2, [r2, #16]
 8001868:	2a00      	cmp	r2, #0
 800186a:	d102      	bne.n	8001872 <ETH_SetMACConfig+0x4a>
 800186c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001870:	e000      	b.n	8001874 <ETH_SetMACConfig+0x4c>
 8001872:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001874:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	7c52      	ldrb	r2, [r2, #17]
 800187a:	2a00      	cmp	r2, #0
 800187c:	d102      	bne.n	8001884 <ETH_SetMACConfig+0x5c>
 800187e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001882:	e000      	b.n	8001886 <ETH_SetMACConfig+0x5e>
 8001884:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001886:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	7c9b      	ldrb	r3, [r3, #18]
 800188c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800188e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001894:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800189a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	7f1b      	ldrb	r3, [r3, #28]
 80018a0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80018a2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	7f5b      	ldrb	r3, [r3, #29]
 80018a8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80018aa:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	7f92      	ldrb	r2, [r2, #30]
 80018b0:	2a00      	cmp	r2, #0
 80018b2:	d102      	bne.n	80018ba <ETH_SetMACConfig+0x92>
 80018b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b8:	e000      	b.n	80018bc <ETH_SetMACConfig+0x94>
 80018ba:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80018bc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	7fdb      	ldrb	r3, [r3, #31]
 80018c2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80018c4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018cc:	2a00      	cmp	r2, #0
 80018ce:	d102      	bne.n	80018d6 <ETH_SetMACConfig+0xae>
 80018d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d4:	e000      	b.n	80018d8 <ETH_SetMACConfig+0xb0>
 80018d6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80018d8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80018de:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018e6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80018e8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <ETH_SetMACConfig+0x22c>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	68f9      	ldr	r1, [r7, #12]
 8001902:	430b      	orrs	r3, r1
 8001904:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001912:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001914:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800191c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800191e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001926:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001928:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001930:	2a00      	cmp	r2, #0
 8001932:	d102      	bne.n	800193a <ETH_SetMACConfig+0x112>
 8001934:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001938:	e000      	b.n	800193c <ETH_SetMACConfig+0x114>
 800193a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800193c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001942:	4313      	orrs	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4b42      	ldr	r3, [pc, #264]	; (8001a58 <ETH_SetMACConfig+0x230>)
 800194e:	4013      	ands	r3, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	68f9      	ldr	r1, [r7, #12]
 8001956:	430b      	orrs	r3, r1
 8001958:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001960:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <ETH_SetMACConfig+0x234>)
 8001972:	4013      	ands	r3, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	68f9      	ldr	r1, [r7, #12]
 800197a:	430b      	orrs	r3, r1
 800197c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001984:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800198a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001992:	2a00      	cmp	r2, #0
 8001994:	d101      	bne.n	800199a <ETH_SetMACConfig+0x172>
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	e000      	b.n	800199c <ETH_SetMACConfig+0x174>
 800199a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800199c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019a4:	4313      	orrs	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019ae:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80019b2:	4013      	ands	r3, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	68f9      	ldr	r1, [r7, #12]
 80019ba:	430b      	orrs	r3, r1
 80019bc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80019c4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80019cc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019da:	f023 0103 	bic.w	r1, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80019f2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	d101      	bne.n	8001a16 <ETH_SetMACConfig+0x1ee>
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	e000      	b.n	8001a18 <ETH_SetMACConfig+0x1f0>
 8001a16:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a18:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001a20:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a22:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001a2a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a38:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	00048083 	.word	0x00048083
 8001a58:	c0f88000 	.word	0xc0f88000
 8001a5c:	fffffef0 	.word	0xfffffef0

08001a60 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <ETH_SetDMAConfig+0xf8>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	6809      	ldr	r1, [r1, #0]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001a86:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	791b      	ldrb	r3, [r3, #4]
 8001a8c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a92:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	7b1b      	ldrb	r3, [r3, #12]
 8001a98:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	f241 0304 	movw	r3, #4100	; 0x1004
 8001aa6:	4413      	add	r3, r2
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <ETH_SetDMAConfig+0xfc>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6811      	ldr	r1, [r2, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	f241 0304 	movw	r3, #4100	; 0x1004
 8001aba:	440b      	add	r3, r1
 8001abc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	7b5b      	ldrb	r3, [r3, #13]
 8001ac2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <ETH_SetDMAConfig+0x100>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6811      	ldr	r1, [r2, #0]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001ae6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	7d1b      	ldrb	r3, [r3, #20]
 8001af0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001af2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	7f5b      	ldrb	r3, [r3, #29]
 8001af8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b06:	4413      	add	r3, r2
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <ETH_SetDMAConfig+0x104>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6811      	ldr	r1, [r2, #0]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	431a      	orrs	r2, r3
 8001b16:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b1a:	440b      	add	r3, r1
 8001b1c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	7f1b      	ldrb	r3, [r3, #28]
 8001b22:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b34:	4413      	add	r3, r2
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <ETH_SetDMAConfig+0x108>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6811      	ldr	r1, [r2, #0]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b48:	440b      	add	r3, r1
 8001b4a:	601a      	str	r2, [r3, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	ffff87fd 	.word	0xffff87fd
 8001b5c:	ffff2ffe 	.word	0xffff2ffe
 8001b60:	fffec000 	.word	0xfffec000
 8001b64:	ffc0efef 	.word	0xffc0efef
 8001b68:	7fc0ffff 	.word	0x7fc0ffff

08001b6c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0a4      	sub	sp, #144	; 0x90
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bac:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001bc4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001bc8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001be6:	2300      	movs	r3, #0
 8001be8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c04:	2320      	movs	r3, #32
 8001c06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c16:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c20:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c46:	2300      	movs	r3, #0
 8001c48:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c54:	4619      	mov	r1, r3
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fde6 	bl	8001828 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c60:	2301      	movs	r3, #1
 8001c62:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c7a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c84:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001c8c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c92:	f107 0308 	add.w	r3, r7, #8
 8001c96:	4619      	mov	r1, r3
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fee1 	bl	8001a60 <ETH_SetDMAConfig>
}
 8001c9e:	bf00      	nop
 8001ca0:	3790      	adds	r7, #144	; 0x90
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001cc2:	f001 fb61 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 8001cc6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4a1e      	ldr	r2, [pc, #120]	; (8001d44 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d908      	bls.n	8001ce2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d804      	bhi.n	8001ce2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	e027      	b.n	8001d32 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d908      	bls.n	8001cfc <ETH_MAC_MDIO_ClkConfig+0x54>
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d804      	bhi.n	8001cfc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	e01a      	b.n	8001d32 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d903      	bls.n	8001d0c <ETH_MAC_MDIO_ClkConfig+0x64>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d911      	bls.n	8001d30 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4a10      	ldr	r2, [pc, #64]	; (8001d50 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d908      	bls.n	8001d26 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d804      	bhi.n	8001d26 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	e005      	b.n	8001d32 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e000      	b.n	8001d32 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001d30:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	01312cff 	.word	0x01312cff
 8001d48:	02160ebf 	.word	0x02160ebf
 8001d4c:	039386ff 	.word	0x039386ff
 8001d50:	05f5e0ff 	.word	0x05f5e0ff
 8001d54:	08f0d17f 	.word	0x08f0d17f

08001d58 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	e01d      	b.n	8001da2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68d9      	ldr	r1, [r3, #12]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	3206      	adds	r2, #6
 8001d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d9de      	bls.n	8001d66 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	f241 132c 	movw	r3, #4396	; 0x112c
 8001db6:	4413      	add	r3, r2
 8001db8:	2203      	movs	r2, #3
 8001dba:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68d9      	ldr	r1, [r3, #12]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	f241 1314 	movw	r3, #4372	; 0x1114
 8001dc8:	4413      	add	r3, r2
 8001dca:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001dd8:	601a      	str	r2, [r3, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	e024      	b.n	8001e3e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6919      	ldr	r1, [r3, #16]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	330a      	adds	r3, #10
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d9d7      	bls.n	8001df4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	f241 1330 	movw	r3, #4400	; 0x1130
 8001e6a:	4413      	add	r3, r2
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6919      	ldr	r1, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	f241 131c 	movw	r3, #4380	; 0x111c
 8001e7c:	4413      	add	r3, r2
 8001e7e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	f241 1328 	movw	r3, #4392	; 0x1128
 8001e90:	4413      	add	r3, r2
 8001e92:	6019      	str	r1, [r3, #0]
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001eae:	4b89      	ldr	r3, [pc, #548]	; (80020d4 <HAL_GPIO_Init+0x234>)
 8001eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eb2:	e194      	b.n	80021de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 8186 	beq.w	80021d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d00b      	beq.n	8001eec <HAL_GPIO_Init+0x4c>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d007      	beq.n	8001eec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ee0:	2b11      	cmp	r3, #17
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b12      	cmp	r3, #18
 8001eea:	d130      	bne.n	8001f4e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f22:	2201      	movs	r2, #1
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	f003 0201 	and.w	r2, r3, #1
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0xee>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b12      	cmp	r3, #18
 8001f8c:	d123      	bne.n	8001fd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	69b9      	ldr	r1, [r7, #24]
 8001fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0203 	and.w	r2, r3, #3
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80e0 	beq.w	80021d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002018:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <HAL_GPIO_Init+0x238>)
 800201a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800201e:	4a2e      	ldr	r2, [pc, #184]	; (80020d8 <HAL_GPIO_Init+0x238>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002028:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_GPIO_Init+0x238>)
 800202a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002036:	4a29      	ldr	r2, [pc, #164]	; (80020dc <HAL_GPIO_Init+0x23c>)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a20      	ldr	r2, [pc, #128]	; (80020e0 <HAL_GPIO_Init+0x240>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d052      	beq.n	8002108 <HAL_GPIO_Init+0x268>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a1f      	ldr	r2, [pc, #124]	; (80020e4 <HAL_GPIO_Init+0x244>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d031      	beq.n	80020ce <HAL_GPIO_Init+0x22e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <HAL_GPIO_Init+0x248>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d02b      	beq.n	80020ca <HAL_GPIO_Init+0x22a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <HAL_GPIO_Init+0x24c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d025      	beq.n	80020c6 <HAL_GPIO_Init+0x226>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1c      	ldr	r2, [pc, #112]	; (80020f0 <HAL_GPIO_Init+0x250>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d01f      	beq.n	80020c2 <HAL_GPIO_Init+0x222>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <HAL_GPIO_Init+0x254>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d019      	beq.n	80020be <HAL_GPIO_Init+0x21e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1a      	ldr	r2, [pc, #104]	; (80020f8 <HAL_GPIO_Init+0x258>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_GPIO_Init+0x21a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a19      	ldr	r2, [pc, #100]	; (80020fc <HAL_GPIO_Init+0x25c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00d      	beq.n	80020b6 <HAL_GPIO_Init+0x216>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a18      	ldr	r2, [pc, #96]	; (8002100 <HAL_GPIO_Init+0x260>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <HAL_GPIO_Init+0x212>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_GPIO_Init+0x264>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d101      	bne.n	80020ae <HAL_GPIO_Init+0x20e>
 80020aa:	2309      	movs	r3, #9
 80020ac:	e02d      	b.n	800210a <HAL_GPIO_Init+0x26a>
 80020ae:	230a      	movs	r3, #10
 80020b0:	e02b      	b.n	800210a <HAL_GPIO_Init+0x26a>
 80020b2:	2308      	movs	r3, #8
 80020b4:	e029      	b.n	800210a <HAL_GPIO_Init+0x26a>
 80020b6:	2307      	movs	r3, #7
 80020b8:	e027      	b.n	800210a <HAL_GPIO_Init+0x26a>
 80020ba:	2306      	movs	r3, #6
 80020bc:	e025      	b.n	800210a <HAL_GPIO_Init+0x26a>
 80020be:	2305      	movs	r3, #5
 80020c0:	e023      	b.n	800210a <HAL_GPIO_Init+0x26a>
 80020c2:	2304      	movs	r3, #4
 80020c4:	e021      	b.n	800210a <HAL_GPIO_Init+0x26a>
 80020c6:	2303      	movs	r3, #3
 80020c8:	e01f      	b.n	800210a <HAL_GPIO_Init+0x26a>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e01d      	b.n	800210a <HAL_GPIO_Init+0x26a>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e01b      	b.n	800210a <HAL_GPIO_Init+0x26a>
 80020d2:	bf00      	nop
 80020d4:	58000080 	.word	0x58000080
 80020d8:	58024400 	.word	0x58024400
 80020dc:	58000400 	.word	0x58000400
 80020e0:	58020000 	.word	0x58020000
 80020e4:	58020400 	.word	0x58020400
 80020e8:	58020800 	.word	0x58020800
 80020ec:	58020c00 	.word	0x58020c00
 80020f0:	58021000 	.word	0x58021000
 80020f4:	58021400 	.word	0x58021400
 80020f8:	58021800 	.word	0x58021800
 80020fc:	58021c00 	.word	0x58021c00
 8002100:	58022000 	.word	0x58022000
 8002104:	58022400 	.word	0x58022400
 8002108:	2300      	movs	r3, #0
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	f002 0203 	and.w	r2, r2, #3
 8002110:	0092      	lsls	r2, r2, #2
 8002112:	4093      	lsls	r3, r2
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800211a:	4938      	ldr	r1, [pc, #224]	; (80021fc <HAL_GPIO_Init+0x35c>)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	3302      	adds	r3, #2
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800217c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	3301      	adds	r3, #1
 80021dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f47f ae63 	bne.w	8001eb4 <HAL_GPIO_Init+0x14>
  }
}
 80021ee:	bf00      	nop
 80021f0:	3724      	adds	r7, #36	; 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	58000400 	.word	0x58000400

08002200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	887b      	ldrh	r3, [r7, #2]
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	e001      	b.n	8002222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800224c:	e003      	b.n	8002256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	041a      	lsls	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	619a      	str	r2, [r3, #24]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002264:	b08f      	sub	sp, #60	; 0x3c
 8002266:	af0a      	add	r7, sp, #40	; 0x28
 8002268:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e116      	b.n	80024a2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe ff26 	bl	80010e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2203      	movs	r2, #3
 8002298:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f005 f86c 	bl	8007390 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	687e      	ldr	r6, [r7, #4]
 80022c0:	466d      	mov	r5, sp
 80022c2:	f106 0410 	add.w	r4, r6, #16
 80022c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022d6:	1d33      	adds	r3, r6, #4
 80022d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022da:	6838      	ldr	r0, [r7, #0]
 80022dc:	f004 fff6 	bl	80072cc <USB_CoreInit>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2202      	movs	r2, #2
 80022ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0d7      	b.n	80024a2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f005 f85a 	bl	80073b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	e04a      	b.n	800239a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	333d      	adds	r3, #61	; 0x3d
 8002314:	2201      	movs	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	333c      	adds	r3, #60	; 0x3c
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	b298      	uxth	r0, r3
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	3342      	adds	r3, #66	; 0x42
 8002340:	4602      	mov	r2, r0
 8002342:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	333f      	adds	r3, #63	; 0x3f
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	3344      	adds	r3, #68	; 0x44
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	3348      	adds	r3, #72	; 0x48
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	3350      	adds	r3, #80	; 0x50
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	3301      	adds	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d3af      	bcc.n	8002304 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a4:	2300      	movs	r3, #0
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e044      	b.n	8002434 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	3301      	adds	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	d3b5      	bcc.n	80023aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	687e      	ldr	r6, [r7, #4]
 8002446:	466d      	mov	r5, sp
 8002448:	f106 0410 	add.w	r4, r6, #16
 800244c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800244e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002454:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002458:	e885 0003 	stmia.w	r5, {r0, r1}
 800245c:	1d33      	adds	r3, r6, #4
 800245e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002460:	6838      	ldr	r0, [r7, #0]
 8002462:	f004 ffd1 	bl	8007408 <USB_DevInit>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e014      	b.n	80024a2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	2b01      	cmp	r3, #1
 800248e:	d102      	bne.n	8002496 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f80b 	bl	80024ac <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f005 f973 	bl	8007786 <USB_DevDisconnect>

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080024ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	10000003 	.word	0x10000003

080024f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <HAL_PWREx_ConfigSupply+0x70>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b04      	cmp	r3, #4
 8002506:	d00a      	beq.n	800251e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_PWREx_ConfigSupply+0x70>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	429a      	cmp	r2, r3
 8002514:	d001      	beq.n	800251a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e01f      	b.n	800255a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e01d      	b.n	800255a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_PWREx_ConfigSupply+0x70>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f023 0207 	bic.w	r2, r3, #7
 8002526:	490f      	ldr	r1, [pc, #60]	; (8002564 <HAL_PWREx_ConfigSupply+0x70>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4313      	orrs	r3, r2
 800252c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800252e:	f7fe ff6f 	bl	8001410 <HAL_GetTick>
 8002532:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002534:	e009      	b.n	800254a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002536:	f7fe ff6b 	bl	8001410 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002544:	d901      	bls.n	800254a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e007      	b.n	800255a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_PWREx_ConfigSupply+0x70>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002556:	d1ee      	bne.n	8002536 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	58024800 	.word	0x58024800

08002568 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a04      	ldr	r2, [pc, #16]	; (8002584 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002576:	60d3      	str	r3, [r2, #12]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	58024800 	.word	0x58024800

08002588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08c      	sub	sp, #48	; 0x30
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e3c4      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 8087 	beq.w	80026b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a8:	4ba2      	ldr	r3, [pc, #648]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025b2:	4ba0      	ldr	r3, [pc, #640]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d007      	beq.n	80025ce <HAL_RCC_OscConfig+0x46>
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	2b18      	cmp	r3, #24
 80025c2:	d110      	bne.n	80025e6 <HAL_RCC_OscConfig+0x5e>
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d10b      	bne.n	80025e6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ce:	4b99      	ldr	r3, [pc, #612]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d06c      	beq.n	80026b4 <HAL_RCC_OscConfig+0x12c>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d168      	bne.n	80026b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e39e      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ee:	d106      	bne.n	80025fe <HAL_RCC_OscConfig+0x76>
 80025f0:	4b90      	ldr	r3, [pc, #576]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a8f      	ldr	r2, [pc, #572]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 80025f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	e02e      	b.n	800265c <HAL_RCC_OscConfig+0xd4>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0x98>
 8002606:	4b8b      	ldr	r3, [pc, #556]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a8a      	ldr	r2, [pc, #552]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 800260c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	4b88      	ldr	r3, [pc, #544]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a87      	ldr	r2, [pc, #540]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e01d      	b.n	800265c <HAL_RCC_OscConfig+0xd4>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0xbc>
 800262a:	4b82      	ldr	r3, [pc, #520]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a81      	ldr	r2, [pc, #516]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4b7f      	ldr	r3, [pc, #508]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a7e      	ldr	r2, [pc, #504]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e00b      	b.n	800265c <HAL_RCC_OscConfig+0xd4>
 8002644:	4b7b      	ldr	r3, [pc, #492]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a7a      	ldr	r2, [pc, #488]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 800264a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b78      	ldr	r3, [pc, #480]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a77      	ldr	r2, [pc, #476]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe fed4 	bl	8001410 <HAL_GetTick>
 8002668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800266c:	f7fe fed0 	bl	8001410 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e352      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800267e:	4b6d      	ldr	r3, [pc, #436]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0xe4>
 800268a:	e014      	b.n	80026b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe fec0 	bl	8001410 <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002694:	f7fe febc 	bl	8001410 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	; 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e33e      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026a6:	4b63      	ldr	r3, [pc, #396]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x10c>
 80026b2:	e000      	b.n	80026b6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8092 	beq.w	80027e8 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c4:	4b5b      	ldr	r3, [pc, #364]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026ce:	4b59      	ldr	r3, [pc, #356]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d007      	beq.n	80026ea <HAL_RCC_OscConfig+0x162>
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	2b18      	cmp	r3, #24
 80026de:	d12d      	bne.n	800273c <HAL_RCC_OscConfig+0x1b4>
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d128      	bne.n	800273c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ea:	4b52      	ldr	r3, [pc, #328]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <HAL_RCC_OscConfig+0x17a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e310      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002702:	f7fe feb3 	bl	800146c <HAL_GetREVID>
 8002706:	4602      	mov	r2, r0
 8002708:	f241 0303 	movw	r3, #4099	; 0x1003
 800270c:	429a      	cmp	r2, r3
 800270e:	d80a      	bhi.n	8002726 <HAL_RCC_OscConfig+0x19e>
 8002710:	4b48      	ldr	r3, [pc, #288]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	031b      	lsls	r3, r3, #12
 800271e:	4945      	ldr	r1, [pc, #276]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002724:	e060      	b.n	80027e8 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002726:	4b43      	ldr	r3, [pc, #268]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	061b      	lsls	r3, r3, #24
 8002734:	493f      	ldr	r1, [pc, #252]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273a:	e055      	b.n	80027e8 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d038      	beq.n	80027b6 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002744:	4b3b      	ldr	r3, [pc, #236]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f023 0219 	bic.w	r2, r3, #25
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4938      	ldr	r1, [pc, #224]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7fe fe5b 	bl	8001410 <HAL_GetTick>
 800275a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275e:	f7fe fe57 	bl	8001410 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e2d9      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002770:	4b30      	ldr	r3, [pc, #192]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277c:	f7fe fe76 	bl	800146c <HAL_GetREVID>
 8002780:	4602      	mov	r2, r0
 8002782:	f241 0303 	movw	r3, #4099	; 0x1003
 8002786:	429a      	cmp	r2, r3
 8002788:	d80a      	bhi.n	80027a0 <HAL_RCC_OscConfig+0x218>
 800278a:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	031b      	lsls	r3, r3, #12
 8002798:	4926      	ldr	r1, [pc, #152]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
 800279e:	e023      	b.n	80027e8 <HAL_RCC_OscConfig+0x260>
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	061b      	lsls	r3, r3, #24
 80027ae:	4921      	ldr	r1, [pc, #132]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	e018      	b.n	80027e8 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b6:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fe fe25 	bl	8001410 <HAL_GetTick>
 80027c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ca:	f7fe fe21 	bl	8001410 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e2a3      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027dc:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8091 	beq.w	8002918 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f6:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d007      	beq.n	800281c <HAL_RCC_OscConfig+0x294>
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b18      	cmp	r3, #24
 8002810:	d12f      	bne.n	8002872 <HAL_RCC_OscConfig+0x2ea>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d12a      	bne.n	8002872 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_OscConfig+0x2ac>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d007      	beq.n	8002838 <HAL_RCC_OscConfig+0x2b0>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	2b80      	cmp	r3, #128	; 0x80
 800282e:	d003      	beq.n	8002838 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e277      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
 8002834:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002838:	f7fe fe18 	bl	800146c <HAL_GetREVID>
 800283c:	4602      	mov	r2, r0
 800283e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002842:	429a      	cmp	r2, r3
 8002844:	d80a      	bhi.n	800285c <HAL_RCC_OscConfig+0x2d4>
 8002846:	4ba2      	ldr	r3, [pc, #648]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	069b      	lsls	r3, r3, #26
 8002854:	499e      	ldr	r1, [pc, #632]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800285a:	e05d      	b.n	8002918 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800285c:	4b9c      	ldr	r3, [pc, #624]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	4999      	ldr	r1, [pc, #612]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 800286c:	4313      	orrs	r3, r2
 800286e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002870:	e052      	b.n	8002918 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d035      	beq.n	80028e6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800287a:	4b95      	ldr	r3, [pc, #596]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a94      	ldr	r2, [pc, #592]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7fe fdc3 	bl	8001410 <HAL_GetTick>
 800288a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800288e:	f7fe fdbf 	bl	8001410 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e241      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028a0:	4b8b      	ldr	r3, [pc, #556]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ac:	f7fe fdde 	bl	800146c <HAL_GetREVID>
 80028b0:	4602      	mov	r2, r0
 80028b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d80a      	bhi.n	80028d0 <HAL_RCC_OscConfig+0x348>
 80028ba:	4b85      	ldr	r3, [pc, #532]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	069b      	lsls	r3, r3, #26
 80028c8:	4981      	ldr	r1, [pc, #516]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
 80028ce:	e023      	b.n	8002918 <HAL_RCC_OscConfig+0x390>
 80028d0:	4b7f      	ldr	r3, [pc, #508]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	497c      	ldr	r1, [pc, #496]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60cb      	str	r3, [r1, #12]
 80028e4:	e018      	b.n	8002918 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028e6:	4b7a      	ldr	r3, [pc, #488]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a79      	ldr	r2, [pc, #484]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 80028ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f2:	f7fe fd8d 	bl	8001410 <HAL_GetTick>
 80028f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028fa:	f7fe fd89 	bl	8001410 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e20b      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800290c:	4b70      	ldr	r3, [pc, #448]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d036      	beq.n	8002992 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d019      	beq.n	8002960 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292c:	4b68      	ldr	r3, [pc, #416]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 800292e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002930:	4a67      	ldr	r2, [pc, #412]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe fd6a 	bl	8001410 <HAL_GetTick>
 800293c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe fd66 	bl	8001410 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e1e8      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002952:	4b5f      	ldr	r3, [pc, #380]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x3b8>
 800295e:	e018      	b.n	8002992 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002960:	4b5b      	ldr	r3, [pc, #364]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002964:	4a5a      	ldr	r2, [pc, #360]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002966:	f023 0301 	bic.w	r3, r3, #1
 800296a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7fe fd50 	bl	8001410 <HAL_GetTick>
 8002970:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002974:	f7fe fd4c 	bl	8001410 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1ce      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002986:	4b52      	ldr	r3, [pc, #328]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0320 	and.w	r3, r3, #32
 800299a:	2b00      	cmp	r3, #0
 800299c:	d036      	beq.n	8002a0c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d019      	beq.n	80029da <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029a6:	4b4a      	ldr	r3, [pc, #296]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a49      	ldr	r2, [pc, #292]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 80029ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029b2:	f7fe fd2d 	bl	8001410 <HAL_GetTick>
 80029b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029ba:	f7fe fd29 	bl	8001410 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1ab      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029cc:	4b40      	ldr	r3, [pc, #256]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x432>
 80029d8:	e018      	b.n	8002a0c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029da:	4b3d      	ldr	r3, [pc, #244]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a3c      	ldr	r2, [pc, #240]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 80029e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029e6:	f7fe fd13 	bl	8001410 <HAL_GetTick>
 80029ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029ee:	f7fe fd0f 	bl	8001410 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e191      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a00:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f0      	bne.n	80029ee <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8086 	beq.w	8002b26 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <HAL_RCC_OscConfig+0x54c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a2d      	ldr	r2, [pc, #180]	; (8002ad4 <HAL_RCC_OscConfig+0x54c>)
 8002a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a26:	f7fe fcf3 	bl	8001410 <HAL_GetTick>
 8002a2a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a2e:	f7fe fcef 	bl	8001410 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b64      	cmp	r3, #100	; 0x64
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e171      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a40:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <HAL_RCC_OscConfig+0x54c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d106      	bne.n	8002a62 <HAL_RCC_OscConfig+0x4da>
 8002a54:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a58:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a60:	e02d      	b.n	8002abe <HAL_RCC_OscConfig+0x536>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x4fc>
 8002a6a:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	6713      	str	r3, [r2, #112]	; 0x70
 8002a76:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	4a15      	ldr	r2, [pc, #84]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002a7c:	f023 0304 	bic.w	r3, r3, #4
 8002a80:	6713      	str	r3, [r2, #112]	; 0x70
 8002a82:	e01c      	b.n	8002abe <HAL_RCC_OscConfig+0x536>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x51e>
 8002a8c:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	4a0f      	ldr	r2, [pc, #60]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002a92:	f043 0304 	orr.w	r3, r3, #4
 8002a96:	6713      	str	r3, [r2, #112]	; 0x70
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa4:	e00b      	b.n	8002abe <HAL_RCC_OscConfig+0x536>
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	4a06      	ldr	r2, [pc, #24]	; (8002ad0 <HAL_RCC_OscConfig+0x548>)
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d01a      	beq.n	8002afc <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac6:	f7fe fca3 	bl	8001410 <HAL_GetTick>
 8002aca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002acc:	e00f      	b.n	8002aee <HAL_RCC_OscConfig+0x566>
 8002ace:	bf00      	nop
 8002ad0:	58024400 	.word	0x58024400
 8002ad4:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7fe fc9a 	bl	8001410 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e11a      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aee:	4b8f      	ldr	r3, [pc, #572]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0ee      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x550>
 8002afa:	e014      	b.n	8002b26 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe fc88 	bl	8001410 <HAL_GetTick>
 8002b00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe fc84 	bl	8001410 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e104      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b1a:	4b84      	ldr	r3, [pc, #528]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ee      	bne.n	8002b04 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 80f9 	beq.w	8002d22 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b30:	4b7e      	ldr	r3, [pc, #504]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b38:	2b18      	cmp	r3, #24
 8002b3a:	f000 80b4 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	f040 8095 	bne.w	8002c72 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b48:	4b78      	ldr	r3, [pc, #480]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a77      	ldr	r2, [pc, #476]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fc5c 	bl	8001410 <HAL_GetTick>
 8002b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7fe fc58 	bl	8001410 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e0da      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b6e:	4b6f      	ldr	r3, [pc, #444]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b7a:	4b6c      	ldr	r3, [pc, #432]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b7e:	4b6c      	ldr	r3, [pc, #432]	; (8002d30 <HAL_RCC_OscConfig+0x7a8>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b8a:	0112      	lsls	r2, r2, #4
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	4967      	ldr	r1, [pc, #412]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	628b      	str	r3, [r1, #40]	; 0x28
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	025b      	lsls	r3, r3, #9
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	041b      	lsls	r3, r3, #16
 8002bb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	061b      	lsls	r3, r3, #24
 8002bc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002bc4:	4959      	ldr	r1, [pc, #356]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002bca:	4b58      	ldr	r3, [pc, #352]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	4a57      	ldr	r2, [pc, #348]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bd6:	4b55      	ldr	r3, [pc, #340]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bda:	4b56      	ldr	r3, [pc, #344]	; (8002d34 <HAL_RCC_OscConfig+0x7ac>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002be2:	00d2      	lsls	r2, r2, #3
 8002be4:	4951      	ldr	r1, [pc, #324]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bea:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	f023 020c 	bic.w	r2, r3, #12
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	494d      	ldr	r1, [pc, #308]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bfc:	4b4b      	ldr	r3, [pc, #300]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	f023 0202 	bic.w	r2, r3, #2
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c08:	4948      	ldr	r1, [pc, #288]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c0e:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	4a46      	ldr	r2, [pc, #280]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c1a:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	4a43      	ldr	r2, [pc, #268]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c26:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	4a40      	ldr	r2, [pc, #256]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c32:	4b3e      	ldr	r3, [pc, #248]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	4a3d      	ldr	r2, [pc, #244]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a3a      	ldr	r2, [pc, #232]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7fe fbe1 	bl	8001410 <HAL_GetTick>
 8002c4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c52:	f7fe fbdd 	bl	8001410 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e05f      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c64:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x6ca>
 8002c70:	e057      	b.n	8002d22 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c72:	4b2e      	ldr	r3, [pc, #184]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2d      	ldr	r2, [pc, #180]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002c78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7e:	f7fe fbc7 	bl	8001410 <HAL_GetTick>
 8002c82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c86:	f7fe fbc3 	bl	8001410 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e045      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c98:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f0      	bne.n	8002c86 <HAL_RCC_OscConfig+0x6fe>
 8002ca4:	e03d      	b.n	8002d22 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cac:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <HAL_RCC_OscConfig+0x7a4>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d031      	beq.n	8002d1e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f003 0203 	and.w	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d12a      	bne.n	8002d1e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d122      	bne.n	8002d1e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d11a      	bne.n	8002d1e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	0a5b      	lsrs	r3, r3, #9
 8002cec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d111      	bne.n	8002d1e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	0c1b      	lsrs	r3, r3, #16
 8002cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d108      	bne.n	8002d1e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	0e1b      	lsrs	r3, r3, #24
 8002d10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d18:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3730      	adds	r7, #48	; 0x30
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	58024400 	.word	0x58024400
 8002d30:	fffffc0c 	.word	0xfffffc0c
 8002d34:	ffff0007 	.word	0xffff0007

08002d38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e19c      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b8a      	ldr	r3, [pc, #552]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d910      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b87      	ldr	r3, [pc, #540]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 020f 	bic.w	r2, r3, #15
 8002d62:	4985      	ldr	r1, [pc, #532]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b83      	ldr	r3, [pc, #524]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e184      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d010      	beq.n	8002daa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	4b7b      	ldr	r3, [pc, #492]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d908      	bls.n	8002daa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d98:	4b78      	ldr	r3, [pc, #480]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	4975      	ldr	r1, [pc, #468]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d010      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	4b70      	ldr	r3, [pc, #448]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d908      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dc6:	4b6d      	ldr	r3, [pc, #436]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	496a      	ldr	r1, [pc, #424]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d010      	beq.n	8002e06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	4b64      	ldr	r3, [pc, #400]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d908      	bls.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002df4:	4b61      	ldr	r3, [pc, #388]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	495e      	ldr	r1, [pc, #376]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d010      	beq.n	8002e34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	4b59      	ldr	r3, [pc, #356]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d908      	bls.n	8002e34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e22:	4b56      	ldr	r3, [pc, #344]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4953      	ldr	r1, [pc, #332]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d010      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	4b4d      	ldr	r3, [pc, #308]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d908      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e50:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f023 020f 	bic.w	r2, r3, #15
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4947      	ldr	r1, [pc, #284]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d055      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e6e:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4940      	ldr	r1, [pc, #256]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e88:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d121      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0f6      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d107      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ea0:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d115      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0ea      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eb8:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0de      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ec8:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0d6      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ed8:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	f023 0207 	bic.w	r2, r3, #7
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4925      	ldr	r1, [pc, #148]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eea:	f7fe fa91 	bl	8001410 <HAL_GetTick>
 8002eee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef2:	f7fe fa8d 	bl	8001410 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0be      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f08:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d1eb      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d010      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d208      	bcs.n	8002f48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f023 020f 	bic.w	r2, r3, #15
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	490e      	ldr	r1, [pc, #56]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d214      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 020f 	bic.w	r2, r3, #15
 8002f5e:	4906      	ldr	r1, [pc, #24]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e086      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
 8002f78:	52002000 	.word	0x52002000
 8002f7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d010      	beq.n	8002fae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	4b3f      	ldr	r3, [pc, #252]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d208      	bcs.n	8002fae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f9c:	4b3c      	ldr	r3, [pc, #240]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	4939      	ldr	r1, [pc, #228]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d010      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	4b34      	ldr	r3, [pc, #208]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d208      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fca:	4b31      	ldr	r3, [pc, #196]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	492e      	ldr	r1, [pc, #184]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d010      	beq.n	800300a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	4b28      	ldr	r3, [pc, #160]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d208      	bcs.n	800300a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ff8:	4b25      	ldr	r3, [pc, #148]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	4922      	ldr	r1, [pc, #136]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8003006:	4313      	orrs	r3, r2
 8003008:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d010      	beq.n	8003038 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69da      	ldr	r2, [r3, #28]
 800301a:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003022:	429a      	cmp	r2, r3
 8003024:	d208      	bcs.n	8003038 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	4917      	ldr	r1, [pc, #92]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8003034:	4313      	orrs	r3, r2
 8003036:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003038:	f000 f834 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 800303c:	4601      	mov	r1, r0
 800303e:	4b14      	ldr	r3, [pc, #80]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	4a12      	ldr	r2, [pc, #72]	; (8003094 <HAL_RCC_ClockConfig+0x35c>)
 800304a:	5cd3      	ldrb	r3, [r2, r3]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	fa21 f303 	lsr.w	r3, r1, r3
 8003054:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	4a0d      	ldr	r2, [pc, #52]	; (8003094 <HAL_RCC_ClockConfig+0x35c>)
 8003060:	5cd3      	ldrb	r3, [r2, r3]
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <HAL_RCC_ClockConfig+0x360>)
 800306e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003070:	4a0a      	ldr	r2, [pc, #40]	; (800309c <HAL_RCC_ClockConfig+0x364>)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <HAL_RCC_ClockConfig+0x368>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe f97e 	bl	800137c <HAL_InitTick>
 8003080:	4603      	mov	r3, r0
 8003082:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	58024400 	.word	0x58024400
 8003094:	080084f0 	.word	0x080084f0
 8003098:	24000004 	.word	0x24000004
 800309c:	24000000 	.word	0x24000000
 80030a0:	24000008 	.word	0x24000008

080030a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	; 0x24
 80030a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030aa:	4baf      	ldr	r3, [pc, #700]	; (8003368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030b2:	2b18      	cmp	r3, #24
 80030b4:	f200 814e 	bhi.w	8003354 <HAL_RCC_GetSysClockFreq+0x2b0>
 80030b8:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	08003125 	.word	0x08003125
 80030c4:	08003355 	.word	0x08003355
 80030c8:	08003355 	.word	0x08003355
 80030cc:	08003355 	.word	0x08003355
 80030d0:	08003355 	.word	0x08003355
 80030d4:	08003355 	.word	0x08003355
 80030d8:	08003355 	.word	0x08003355
 80030dc:	08003355 	.word	0x08003355
 80030e0:	0800314b 	.word	0x0800314b
 80030e4:	08003355 	.word	0x08003355
 80030e8:	08003355 	.word	0x08003355
 80030ec:	08003355 	.word	0x08003355
 80030f0:	08003355 	.word	0x08003355
 80030f4:	08003355 	.word	0x08003355
 80030f8:	08003355 	.word	0x08003355
 80030fc:	08003355 	.word	0x08003355
 8003100:	08003151 	.word	0x08003151
 8003104:	08003355 	.word	0x08003355
 8003108:	08003355 	.word	0x08003355
 800310c:	08003355 	.word	0x08003355
 8003110:	08003355 	.word	0x08003355
 8003114:	08003355 	.word	0x08003355
 8003118:	08003355 	.word	0x08003355
 800311c:	08003355 	.word	0x08003355
 8003120:	08003157 	.word	0x08003157
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003124:	4b90      	ldr	r3, [pc, #576]	; (8003368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d009      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003130:	4b8d      	ldr	r3, [pc, #564]	; (8003368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	08db      	lsrs	r3, r3, #3
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	4a8c      	ldr	r2, [pc, #560]	; (800336c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
 8003140:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003142:	e10a      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003144:	4b89      	ldr	r3, [pc, #548]	; (800336c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003146:	61bb      	str	r3, [r7, #24]
    break;
 8003148:	e107      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800314a:	4b89      	ldr	r3, [pc, #548]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800314c:	61bb      	str	r3, [r7, #24]
    break;
 800314e:	e104      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003150:	4b88      	ldr	r3, [pc, #544]	; (8003374 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003152:	61bb      	str	r3, [r7, #24]
    break;
 8003154:	e101      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003156:	4b84      	ldr	r3, [pc, #528]	; (8003368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003160:	4b81      	ldr	r3, [pc, #516]	; (8003368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800316a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800316c:	4b7e      	ldr	r3, [pc, #504]	; (8003368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003176:	4b7c      	ldr	r3, [pc, #496]	; (8003368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	08db      	lsrs	r3, r3, #3
 800317c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80da 	beq.w	800334e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d05a      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0x1b2>
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d302      	bcc.n	80031aa <HAL_RCC_GetSysClockFreq+0x106>
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d078      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0x1f6>
 80031a8:	e099      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031aa:	4b6f      	ldr	r3, [pc, #444]	; (8003368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d02d      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031b6:	4b6c      	ldr	r3, [pc, #432]	; (8003368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	08db      	lsrs	r3, r3, #3
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	4a6a      	ldr	r2, [pc, #424]	; (800336c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80031c2:	fa22 f303 	lsr.w	r3, r2, r3
 80031c6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	ee07 3a90 	vmov	s15, r3
 80031ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	ee07 3a90 	vmov	s15, r3
 80031d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e0:	4b61      	ldr	r3, [pc, #388]	; (8003368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80031f4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003378 <HAL_RCC_GetSysClockFreq+0x2d4>
 80031f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003210:	e087      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800337c <HAL_RCC_GetSysClockFreq+0x2d8>
 8003220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003224:	4b50      	ldr	r3, [pc, #320]	; (8003368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322c:	ee07 3a90 	vmov	s15, r3
 8003230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003234:	ed97 6a02 	vldr	s12, [r7, #8]
 8003238:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003378 <HAL_RCC_GetSysClockFreq+0x2d4>
 800323c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003248:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800324c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003250:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003254:	e065      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	ee07 3a90 	vmov	s15, r3
 800325c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003260:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003380 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003268:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003278:	ed97 6a02 	vldr	s12, [r7, #8]
 800327c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003378 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800328c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003294:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003298:	e043      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	ee07 3a90 	vmov	s15, r3
 80032a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003384 <HAL_RCC_GetSysClockFreq+0x2e0>
 80032a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ac:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b4:	ee07 3a90 	vmov	s15, r3
 80032b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80032c0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003378 <HAL_RCC_GetSysClockFreq+0x2d4>
 80032c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032dc:	e021      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	ee07 3a90 	vmov	s15, r3
 80032e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003380 <HAL_RCC_GetSysClockFreq+0x2dc>
 80032ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032f0:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003300:	ed97 6a02 	vldr	s12, [r7, #8]
 8003304:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003378 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003308:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800330c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003310:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003314:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800331c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003320:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003322:	4b11      	ldr	r3, [pc, #68]	; (8003368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	0a5b      	lsrs	r3, r3, #9
 8003328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332c:	3301      	adds	r3, #1
 800332e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800333a:	edd7 6a07 	vldr	s13, [r7, #28]
 800333e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003346:	ee17 3a90 	vmov	r3, s15
 800334a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800334c:	e005      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	61bb      	str	r3, [r7, #24]
    break;
 8003352:	e002      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003356:	61bb      	str	r3, [r7, #24]
    break;
 8003358:	bf00      	nop
  }

  return sysclockfreq;
 800335a:	69bb      	ldr	r3, [r7, #24]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3724      	adds	r7, #36	; 0x24
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	58024400 	.word	0x58024400
 800336c:	03d09000 	.word	0x03d09000
 8003370:	003d0900 	.word	0x003d0900
 8003374:	007a1200 	.word	0x007a1200
 8003378:	46000000 	.word	0x46000000
 800337c:	4c742400 	.word	0x4c742400
 8003380:	4a742400 	.word	0x4a742400
 8003384:	4af42400 	.word	0x4af42400

08003388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800338e:	f7ff fe89 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8003392:	4601      	mov	r1, r0
 8003394:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	4a0f      	ldr	r2, [pc, #60]	; (80033dc <HAL_RCC_GetHCLKFreq+0x54>)
 80033a0:	5cd3      	ldrb	r3, [r2, r3]
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	fa21 f303 	lsr.w	r3, r1, r3
 80033aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	4a09      	ldr	r2, [pc, #36]	; (80033dc <HAL_RCC_GetHCLKFreq+0x54>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	fa22 f303 	lsr.w	r3, r2, r3
 80033c2:	4a07      	ldr	r2, [pc, #28]	; (80033e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80033c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033c6:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033cc:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	58024400 	.word	0x58024400
 80033dc:	080084f0 	.word	0x080084f0
 80033e0:	24000004 	.word	0x24000004
 80033e4:	24000000 	.word	0x24000000

080033e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80033ec:	f7ff ffcc 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033f0:	4601      	mov	r1, r0
 80033f2:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	091b      	lsrs	r3, r3, #4
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4a04      	ldr	r2, [pc, #16]	; (8003410 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033fe:	5cd3      	ldrb	r3, [r2, r3]
 8003400:	f003 031f 	and.w	r3, r3, #31
 8003404:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003408:	4618      	mov	r0, r3
 800340a:	bd80      	pop	{r7, pc}
 800340c:	58024400 	.word	0x58024400
 8003410:	080084f0 	.word	0x080084f0

08003414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003418:	f7ff ffb6 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 800341c:	4601      	mov	r1, r0
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4a04      	ldr	r2, [pc, #16]	; (800343c <HAL_RCC_GetPCLK2Freq+0x28>)
 800342a:	5cd3      	ldrb	r3, [r2, r3]
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003434:	4618      	mov	r0, r3
 8003436:	bd80      	pop	{r7, pc}
 8003438:	58024400 	.word	0x58024400
 800343c:	080084f0 	.word	0x080084f0

08003440 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003448:	2300      	movs	r3, #0
 800344a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800344c:	2300      	movs	r3, #0
 800344e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d03d      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003464:	d013      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800346a:	d802      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003470:	e01f      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003472:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003476:	d013      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003478:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800347c:	d01c      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800347e:	e018      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003480:	4baf      	ldr	r3, [pc, #700]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	4aae      	ldr	r2, [pc, #696]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800348c:	e015      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	2102      	movs	r1, #2
 8003494:	4618      	mov	r0, r3
 8003496:	f001 f95f 	bl	8004758 <RCCEx_PLL2_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800349e:	e00c      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3324      	adds	r3, #36	; 0x24
 80034a4:	2102      	movs	r1, #2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 fa08 	bl	80048bc <RCCEx_PLL3_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034b0:	e003      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	75fb      	strb	r3, [r7, #23]
      break;
 80034b6:	e000      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80034b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d109      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034c0:	4b9f      	ldr	r3, [pc, #636]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034cc:	499c      	ldr	r1, [pc, #624]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	650b      	str	r3, [r1, #80]	; 0x50
 80034d2:	e001      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d03d      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d826      	bhi.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80034ec:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003509 	.word	0x08003509
 80034f8:	08003517 	.word	0x08003517
 80034fc:	08003529 	.word	0x08003529
 8003500:	08003541 	.word	0x08003541
 8003504:	08003541 	.word	0x08003541
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003508:	4b8d      	ldr	r3, [pc, #564]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	4a8c      	ldr	r2, [pc, #560]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800350e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003514:	e015      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f001 f91b 	bl	8004758 <RCCEx_PLL2_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003526:	e00c      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3324      	adds	r3, #36	; 0x24
 800352c:	2100      	movs	r1, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f001 f9c4 	bl	80048bc <RCCEx_PLL3_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003538:	e003      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	75fb      	strb	r3, [r7, #23]
      break;
 800353e:	e000      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d109      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003548:	4b7d      	ldr	r3, [pc, #500]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800354a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354c:	f023 0207 	bic.w	r2, r3, #7
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	497a      	ldr	r1, [pc, #488]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003556:	4313      	orrs	r3, r2
 8003558:	650b      	str	r3, [r1, #80]	; 0x50
 800355a:	e001      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003568:	2b00      	cmp	r3, #0
 800356a:	d03e      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	2b80      	cmp	r3, #128	; 0x80
 8003572:	d01c      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003574:	2b80      	cmp	r3, #128	; 0x80
 8003576:	d804      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d00d      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003580:	e01e      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003582:	2bc0      	cmp	r3, #192	; 0xc0
 8003584:	d01f      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358a:	d01e      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800358c:	e018      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800358e:	4b6c      	ldr	r3, [pc, #432]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	4a6b      	ldr	r2, [pc, #428]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003598:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800359a:	e017      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3304      	adds	r3, #4
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 f8d8 	bl	8004758 <RCCEx_PLL2_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035ac:	e00e      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3324      	adds	r3, #36	; 0x24
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 f981 	bl	80048bc <RCCEx_PLL3_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035be:	e005      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	75fb      	strb	r3, [r7, #23]
      break;
 80035c4:	e002      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80035c6:	bf00      	nop
 80035c8:	e000      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80035ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80035d2:	4b5b      	ldr	r3, [pc, #364]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	4958      	ldr	r1, [pc, #352]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	650b      	str	r3, [r1, #80]	; 0x50
 80035e4:	e001      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
 80035e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d044      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003600:	d01f      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003606:	d805      	bhi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800360c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003610:	d00e      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003612:	e01f      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003614:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003618:	d01f      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800361a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800361e:	d01e      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003620:	e018      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003622:	4b47      	ldr	r3, [pc, #284]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	4a46      	ldr	r2, [pc, #280]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800362c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800362e:	e017      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f001 f88e 	bl	8004758 <RCCEx_PLL2_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003640:	e00e      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3324      	adds	r3, #36	; 0x24
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f001 f937 	bl	80048bc <RCCEx_PLL3_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003652:	e005      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	75fb      	strb	r3, [r7, #23]
      break;
 8003658:	e002      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800365a:	bf00      	nop
 800365c:	e000      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800365e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003660:	7dfb      	ldrb	r3, [r7, #23]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003666:	4b36      	ldr	r3, [pc, #216]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003674:	4932      	ldr	r1, [pc, #200]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003676:	4313      	orrs	r3, r2
 8003678:	658b      	str	r3, [r1, #88]	; 0x58
 800367a:	e001      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003688:	2b00      	cmp	r3, #0
 800368a:	d044      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003692:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003696:	d01f      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800369c:	d805      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80036a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036a6:	d00e      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80036a8:	e01f      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80036aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036ae:	d01f      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80036b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036b4:	d01e      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80036b6:	e018      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b8:	4b21      	ldr	r3, [pc, #132]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	4a20      	ldr	r2, [pc, #128]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036c4:	e017      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 f843 	bl	8004758 <RCCEx_PLL2_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036d6:	e00e      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3324      	adds	r3, #36	; 0x24
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 f8ec 	bl	80048bc <RCCEx_PLL3_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036e8:	e005      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	75fb      	strb	r3, [r7, #23]
      break;
 80036ee:	e002      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80036f0:	bf00      	nop
 80036f2:	e000      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80036f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036fc:	4b10      	ldr	r3, [pc, #64]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800370a:	490d      	ldr	r1, [pc, #52]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800370c:	4313      	orrs	r3, r2
 800370e:	658b      	str	r3, [r1, #88]	; 0x58
 8003710:	e001      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d035      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003726:	2b10      	cmp	r3, #16
 8003728:	d00c      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800372a:	2b10      	cmp	r3, #16
 800372c:	d802      	bhi.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01b      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003732:	e017      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003734:	2b20      	cmp	r3, #32
 8003736:	d00c      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003738:	2b30      	cmp	r3, #48	; 0x30
 800373a:	d018      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800373c:	e012      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800373e:	bf00      	nop
 8003740:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003744:	4baf      	ldr	r3, [pc, #700]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	4aae      	ldr	r2, [pc, #696]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800374a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800374e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003750:	e00e      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
 8003756:	2102      	movs	r1, #2
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fffd 	bl	8004758 <RCCEx_PLL2_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003762:	e005      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	75fb      	strb	r3, [r7, #23]
      break;
 8003768:	e002      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800376a:	bf00      	nop
 800376c:	e000      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800376e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003776:	4ba3      	ldr	r3, [pc, #652]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003782:	49a0      	ldr	r1, [pc, #640]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003784:	4313      	orrs	r3, r2
 8003786:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003788:	e001      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d042      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a2:	d01f      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80037a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a8:	d805      	bhi.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b2:	d00e      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80037b4:	e01f      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80037b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037ba:	d01f      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80037bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037c0:	d01e      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80037c2:	e018      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c4:	4b8f      	ldr	r3, [pc, #572]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	4a8e      	ldr	r2, [pc, #568]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037d0:	e017      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 ffbd 	bl	8004758 <RCCEx_PLL2_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037e2:	e00e      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3324      	adds	r3, #36	; 0x24
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 f866 	bl	80048bc <RCCEx_PLL3_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037f4:	e005      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	75fb      	strb	r3, [r7, #23]
      break;
 80037fa:	e002      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80037fc:	bf00      	nop
 80037fe:	e000      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003802:	7dfb      	ldrb	r3, [r7, #23]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003808:	4b7e      	ldr	r3, [pc, #504]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800380a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003814:	497b      	ldr	r1, [pc, #492]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	650b      	str	r3, [r1, #80]	; 0x50
 800381a:	e001      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d042      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003834:	d01b      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003836:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800383a:	d805      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d022      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003846:	e01b      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003848:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800384c:	d01d      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800384e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003852:	d01c      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003854:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003858:	d01b      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800385a:	e011      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	2101      	movs	r1, #1
 8003862:	4618      	mov	r0, r3
 8003864:	f000 ff78 	bl	8004758 <RCCEx_PLL2_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800386c:	e012      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3324      	adds	r3, #36	; 0x24
 8003872:	2101      	movs	r1, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f001 f821 	bl	80048bc <RCCEx_PLL3_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800387e:	e009      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	75fb      	strb	r3, [r7, #23]
      break;
 8003884:	e006      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003886:	bf00      	nop
 8003888:	e004      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800388a:	bf00      	nop
 800388c:	e002      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003892:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003894:	7dfb      	ldrb	r3, [r7, #23]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800389a:	4b5a      	ldr	r3, [pc, #360]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800389c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a6:	4957      	ldr	r1, [pc, #348]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	650b      	str	r3, [r1, #80]	; 0x50
 80038ac:	e001      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d044      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038c8:	d01b      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80038ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ce:	d805      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d022      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80038d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80038da:	e01b      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e0:	d01d      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80038e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038e6:	d01c      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80038e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038ec:	d01b      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80038ee:	e011      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3304      	adds	r3, #4
 80038f4:	2101      	movs	r1, #1
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 ff2e 	bl	8004758 <RCCEx_PLL2_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003900:	e012      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3324      	adds	r3, #36	; 0x24
 8003906:	2101      	movs	r1, #1
 8003908:	4618      	mov	r0, r3
 800390a:	f000 ffd7 	bl	80048bc <RCCEx_PLL3_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003912:	e009      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	75fb      	strb	r3, [r7, #23]
      break;
 8003918:	e006      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800391a:	bf00      	nop
 800391c:	e004      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800391e:	bf00      	nop
 8003920:	e002      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003922:	bf00      	nop
 8003924:	e000      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003928:	7dfb      	ldrb	r3, [r7, #23]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800392e:	4b35      	ldr	r3, [pc, #212]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800393c:	4931      	ldr	r1, [pc, #196]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	658b      	str	r3, [r1, #88]	; 0x58
 8003942:	e001      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003944:	7dfb      	ldrb	r3, [r7, #23]
 8003946:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d02d      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800395c:	d005      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800395e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003962:	d009      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d013      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003968:	e00f      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800396a:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	4a25      	ldr	r2, [pc, #148]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003974:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003976:	e00c      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	2101      	movs	r1, #1
 800397e:	4618      	mov	r0, r3
 8003980:	f000 feea 	bl	8004758 <RCCEx_PLL2_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003988:	e003      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	75fb      	strb	r3, [r7, #23]
      break;
 800398e:	e000      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d109      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003998:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800399a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a4:	4917      	ldr	r1, [pc, #92]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	650b      	str	r3, [r1, #80]	; 0x50
 80039aa:	e001      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d035      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d81b      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039c4:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80039c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ca:	bf00      	nop
 80039cc:	08003a09 	.word	0x08003a09
 80039d0:	080039dd 	.word	0x080039dd
 80039d4:	080039eb 	.word	0x080039eb
 80039d8:	08003a09 	.word	0x08003a09
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039dc:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039e8:	e00f      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3304      	adds	r3, #4
 80039ee:	2102      	movs	r1, #2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 feb1 	bl	8004758 <RCCEx_PLL2_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039fa:	e006      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003a00:	e003      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003a02:	bf00      	nop
 8003a04:	58024400 	.word	0x58024400
      break;
 8003a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0a:	7dfb      	ldrb	r3, [r7, #23]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a10:	4bba      	ldr	r3, [pc, #744]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a14:	f023 0203 	bic.w	r2, r3, #3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1c:	49b7      	ldr	r1, [pc, #732]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a22:	e001      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
 8003a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8086 	beq.w	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a36:	4bb2      	ldr	r3, [pc, #712]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4ab1      	ldr	r2, [pc, #708]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a42:	f7fd fce5 	bl	8001410 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a48:	e009      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4a:	f7fd fce1 	bl	8001410 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b64      	cmp	r3, #100	; 0x64
 8003a56:	d902      	bls.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	75fb      	strb	r3, [r7, #23]
        break;
 8003a5c:	e005      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a5e:	4ba8      	ldr	r3, [pc, #672]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0ef      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d166      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a70:	4ba2      	ldr	r3, [pc, #648]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a7a:	4053      	eors	r3, r2
 8003a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d013      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a84:	4b9d      	ldr	r3, [pc, #628]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a8e:	4b9b      	ldr	r3, [pc, #620]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	4a9a      	ldr	r2, [pc, #616]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a98:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a9a:	4b98      	ldr	r3, [pc, #608]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	4a97      	ldr	r2, [pc, #604]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003aa6:	4a95      	ldr	r2, [pc, #596]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab6:	d115      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd fcaa 	bl	8001410 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003abe:	e00b      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7fd fca6 	bl	8001410 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d902      	bls.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	75fb      	strb	r3, [r7, #23]
            break;
 8003ad6:	e005      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ad8:	4b88      	ldr	r3, [pc, #544]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0ed      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d126      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af8:	d10d      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003afa:	4b80      	ldr	r3, [pc, #512]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b08:	0919      	lsrs	r1, r3, #4
 8003b0a:	4b7e      	ldr	r3, [pc, #504]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003b0c:	400b      	ands	r3, r1
 8003b0e:	497b      	ldr	r1, [pc, #492]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	610b      	str	r3, [r1, #16]
 8003b14:	e005      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003b16:	4b79      	ldr	r3, [pc, #484]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	4a78      	ldr	r2, [pc, #480]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b20:	6113      	str	r3, [r2, #16]
 8003b22:	4b76      	ldr	r3, [pc, #472]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b30:	4972      	ldr	r1, [pc, #456]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	670b      	str	r3, [r1, #112]	; 0x70
 8003b36:	e004      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	75bb      	strb	r3, [r7, #22]
 8003b3c:	e001      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d07d      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b52:	2b28      	cmp	r3, #40	; 0x28
 8003b54:	d866      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003c2b 	.word	0x08003c2b
 8003b60:	08003c25 	.word	0x08003c25
 8003b64:	08003c25 	.word	0x08003c25
 8003b68:	08003c25 	.word	0x08003c25
 8003b6c:	08003c25 	.word	0x08003c25
 8003b70:	08003c25 	.word	0x08003c25
 8003b74:	08003c25 	.word	0x08003c25
 8003b78:	08003c25 	.word	0x08003c25
 8003b7c:	08003c01 	.word	0x08003c01
 8003b80:	08003c25 	.word	0x08003c25
 8003b84:	08003c25 	.word	0x08003c25
 8003b88:	08003c25 	.word	0x08003c25
 8003b8c:	08003c25 	.word	0x08003c25
 8003b90:	08003c25 	.word	0x08003c25
 8003b94:	08003c25 	.word	0x08003c25
 8003b98:	08003c25 	.word	0x08003c25
 8003b9c:	08003c13 	.word	0x08003c13
 8003ba0:	08003c25 	.word	0x08003c25
 8003ba4:	08003c25 	.word	0x08003c25
 8003ba8:	08003c25 	.word	0x08003c25
 8003bac:	08003c25 	.word	0x08003c25
 8003bb0:	08003c25 	.word	0x08003c25
 8003bb4:	08003c25 	.word	0x08003c25
 8003bb8:	08003c25 	.word	0x08003c25
 8003bbc:	08003c2b 	.word	0x08003c2b
 8003bc0:	08003c25 	.word	0x08003c25
 8003bc4:	08003c25 	.word	0x08003c25
 8003bc8:	08003c25 	.word	0x08003c25
 8003bcc:	08003c25 	.word	0x08003c25
 8003bd0:	08003c25 	.word	0x08003c25
 8003bd4:	08003c25 	.word	0x08003c25
 8003bd8:	08003c25 	.word	0x08003c25
 8003bdc:	08003c2b 	.word	0x08003c2b
 8003be0:	08003c25 	.word	0x08003c25
 8003be4:	08003c25 	.word	0x08003c25
 8003be8:	08003c25 	.word	0x08003c25
 8003bec:	08003c25 	.word	0x08003c25
 8003bf0:	08003c25 	.word	0x08003c25
 8003bf4:	08003c25 	.word	0x08003c25
 8003bf8:	08003c25 	.word	0x08003c25
 8003bfc:	08003c2b 	.word	0x08003c2b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	2101      	movs	r1, #1
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fda6 	bl	8004758 <RCCEx_PLL2_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c10:	e00c      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3324      	adds	r3, #36	; 0x24
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fe4f 	bl	80048bc <RCCEx_PLL3_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c22:	e003      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	75fb      	strb	r3, [r7, #23]
      break;
 8003c28:	e000      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c32:	4b32      	ldr	r3, [pc, #200]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c3e:	492f      	ldr	r1, [pc, #188]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	654b      	str	r3, [r1, #84]	; 0x54
 8003c44:	e001      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d037      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d820      	bhi.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003c5e:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003ca7 	.word	0x08003ca7
 8003c68:	08003c7d 	.word	0x08003c7d
 8003c6c:	08003c8f 	.word	0x08003c8f
 8003c70:	08003ca7 	.word	0x08003ca7
 8003c74:	08003ca7 	.word	0x08003ca7
 8003c78:	08003ca7 	.word	0x08003ca7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fd68 	bl	8004758 <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c8c:	e00c      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3324      	adds	r3, #36	; 0x24
 8003c92:	2101      	movs	r1, #1
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fe11 	bl	80048bc <RCCEx_PLL3_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c9e:	e003      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cae:	4b13      	ldr	r3, [pc, #76]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	f023 0207 	bic.w	r2, r3, #7
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cba:	4910      	ldr	r1, [pc, #64]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	654b      	str	r3, [r1, #84]	; 0x54
 8003cc0:	e001      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d040      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd8:	2b05      	cmp	r3, #5
 8003cda:	d827      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d33 	.word	0x08003d33
 8003ce8:	08003d09 	.word	0x08003d09
 8003cec:	08003d1b 	.word	0x08003d1b
 8003cf0:	08003d33 	.word	0x08003d33
 8003cf4:	08003d33 	.word	0x08003d33
 8003cf8:	08003d33 	.word	0x08003d33
 8003cfc:	58024400 	.word	0x58024400
 8003d00:	58024800 	.word	0x58024800
 8003d04:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fd22 	bl	8004758 <RCCEx_PLL2_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d18:	e00c      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3324      	adds	r3, #36	; 0x24
 8003d1e:	2101      	movs	r1, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fdcb 	bl	80048bc <RCCEx_PLL3_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d30:	e000      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003d32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d3a:	4bb2      	ldr	r3, [pc, #712]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	f023 0207 	bic.w	r2, r3, #7
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d48:	49ae      	ldr	r1, [pc, #696]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	658b      	str	r3, [r1, #88]	; 0x58
 8003d4e:	e001      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
 8003d52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d044      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d6a:	d01b      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d70:	d805      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d022      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d7a:	d00a      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003d7c:	e01b      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d82:	d01d      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d88:	d01c      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003d8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d8e:	d01b      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003d90:	e011      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fcdd 	bl	8004758 <RCCEx_PLL2_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003da2:	e012      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3324      	adds	r3, #36	; 0x24
 8003da8:	2102      	movs	r1, #2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fd86 	bl	80048bc <RCCEx_PLL3_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003db4:	e009      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dba:	e006      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003dbc:	bf00      	nop
 8003dbe:	e004      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003dc0:	bf00      	nop
 8003dc2:	e002      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003dc4:	bf00      	nop
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dd0:	4b8c      	ldr	r3, [pc, #560]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dde:	4989      	ldr	r1, [pc, #548]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	654b      	str	r3, [r1, #84]	; 0x54
 8003de4:	e001      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d044      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e00:	d01b      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e06:	d805      	bhi.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d022      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e10:	d00a      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003e12:	e01b      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e18:	d01d      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003e1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e1e:	d01c      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003e20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e24:	d01b      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8003e26:	e011      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fc92 	bl	8004758 <RCCEx_PLL2_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e38:	e012      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3324      	adds	r3, #36	; 0x24
 8003e3e:	2102      	movs	r1, #2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fd3b 	bl	80048bc <RCCEx_PLL3_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e4a:	e009      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e50:	e006      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e52:	bf00      	nop
 8003e54:	e004      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e56:	bf00      	nop
 8003e58:	e002      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e000      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e66:	4b67      	ldr	r3, [pc, #412]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e74:	4963      	ldr	r1, [pc, #396]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	658b      	str	r3, [r1, #88]	; 0x58
 8003e7a:	e001      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d044      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e96:	d01b      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e9c:	d805      	bhi.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d022      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003ea8:	e01b      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eae:	d01d      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003eb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003eb4:	d01c      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003eb6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003eba:	d01b      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003ebc:	e011      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fc47 	bl	8004758 <RCCEx_PLL2_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ece:	e012      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3324      	adds	r3, #36	; 0x24
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fcf0 	bl	80048bc <RCCEx_PLL3_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ee0:	e009      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee6:	e006      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003ee8:	bf00      	nop
 8003eea:	e004      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003eec:	bf00      	nop
 8003eee:	e002      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003ef0:	bf00      	nop
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10a      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003efc:	4b41      	ldr	r3, [pc, #260]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f0a:	493e      	ldr	r1, [pc, #248]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	658b      	str	r3, [r1, #88]	; 0x58
 8003f10:	e001      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d01a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2c:	d10a      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3324      	adds	r3, #36	; 0x24
 8003f32:	2102      	movs	r1, #2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fcc1 	bl	80048bc <RCCEx_PLL3_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f44:	4b2f      	ldr	r3, [pc, #188]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f52:	492c      	ldr	r1, [pc, #176]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6e:	d10a      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3324      	adds	r3, #36	; 0x24
 8003f74:	2102      	movs	r1, #2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fca0 	bl	80048bc <RCCEx_PLL3_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f86:	4b1f      	ldr	r3, [pc, #124]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f94:	491b      	ldr	r1, [pc, #108]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d032      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb0:	d00d      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8003fb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fb6:	d016      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d111      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fbc8 	bl	8004758 <RCCEx_PLL2_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003fcc:	e00c      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3324      	adds	r3, #36	; 0x24
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fc71 	bl	80048bc <RCCEx_PLL3_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003fde:	e003      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8003fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10c      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fee:	4b05      	ldr	r3, [pc, #20]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ffc:	4901      	ldr	r1, [pc, #4]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	658b      	str	r3, [r1, #88]	; 0x58
 8004002:	e003      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004004:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d02f      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004022:	d00c      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004024:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004028:	d015      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800402a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800402e:	d10f      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004030:	4b71      	ldr	r3, [pc, #452]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	4a70      	ldr	r2, [pc, #448]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800403c:	e00c      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3324      	adds	r3, #36	; 0x24
 8004042:	2101      	movs	r1, #1
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fc39 	bl	80048bc <RCCEx_PLL3_Config>
 800404a:	4603      	mov	r3, r0
 800404c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800404e:	e003      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	75fb      	strb	r3, [r7, #23]
      break;
 8004054:	e000      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800405e:	4b66      	ldr	r3, [pc, #408]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800406c:	4962      	ldr	r1, [pc, #392]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800406e:	4313      	orrs	r3, r2
 8004070:	654b      	str	r3, [r1, #84]	; 0x54
 8004072:	e001      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004074:	7dfb      	ldrb	r3, [r7, #23]
 8004076:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d029      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004090:	d007      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004092:	e00f      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004094:	4b58      	ldr	r3, [pc, #352]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	4a57      	ldr	r2, [pc, #348]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800409a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800409e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040a0:	e00b      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3304      	adds	r3, #4
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fb55 	bl	8004758 <RCCEx_PLL2_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040b2:	e002      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	75fb      	strb	r3, [r7, #23]
      break;
 80040b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d109      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040c0:	4b4d      	ldr	r3, [pc, #308]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80040c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040cc:	494a      	ldr	r1, [pc, #296]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80040d2:	e001      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	7dfb      	ldrb	r3, [r7, #23]
 80040d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3324      	adds	r3, #36	; 0x24
 80040e8:	2102      	movs	r1, #2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fbe6 	bl	80048bc <RCCEx_PLL3_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d02f      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800410a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410e:	d00c      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004114:	d802      	bhi.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d011      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800411a:	e00d      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800411c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004120:	d00f      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004126:	d00e      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004128:	e006      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800412a:	4b33      	ldr	r3, [pc, #204]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	4a32      	ldr	r2, [pc, #200]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004134:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004136:	e007      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	75fb      	strb	r3, [r7, #23]
      break;
 800413c:	e004      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800413e:	bf00      	nop
 8004140:	e002      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004142:	bf00      	nop
 8004144:	e000      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004148:	7dfb      	ldrb	r3, [r7, #23]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800414e:	4b2a      	ldr	r3, [pc, #168]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800415a:	4927      	ldr	r1, [pc, #156]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800415c:	4313      	orrs	r3, r2
 800415e:	654b      	str	r3, [r1, #84]	; 0x54
 8004160:	e001      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004162:	7dfb      	ldrb	r3, [r7, #23]
 8004164:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004172:	4b21      	ldr	r3, [pc, #132]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004176:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	491e      	ldr	r1, [pc, #120]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004180:	4313      	orrs	r3, r2
 8004182:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004190:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004194:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800419c:	4916      	ldr	r1, [pc, #88]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00d      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	4a11      	ldr	r2, [pc, #68]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80041b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041b8:	6113      	str	r3, [r2, #16]
 80041ba:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80041c4:	490c      	ldr	r1, [pc, #48]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	da08      	bge.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80041d2:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041de:	4906      	ldr	r1, [pc, #24]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80041e4:	7dbb      	ldrb	r3, [r7, #22]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e000      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	58024400 	.word	0x58024400

080041fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004200:	f7ff f8c2 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 8004204:	4601      	mov	r1, r0
 8004206:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4a04      	ldr	r2, [pc, #16]	; (8004224 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004212:	5cd3      	ldrb	r3, [r2, r3]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800421c:	4618      	mov	r0, r3
 800421e:	bd80      	pop	{r7, pc}
 8004220:	58024400 	.word	0x58024400
 8004224:	080084f0 	.word	0x080084f0

08004228 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	; 0x24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004230:	4b9d      	ldr	r3, [pc, #628]	; (80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800423a:	4b9b      	ldr	r3, [pc, #620]	; (80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	0b1b      	lsrs	r3, r3, #12
 8004240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004244:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004246:	4b98      	ldr	r3, [pc, #608]	; (80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004252:	4b95      	ldr	r3, [pc, #596]	; (80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004256:	08db      	lsrs	r3, r3, #3
 8004258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 810a 	beq.w	800448a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d05a      	beq.n	8004332 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800427c:	2b01      	cmp	r3, #1
 800427e:	d302      	bcc.n	8004286 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004280:	2b02      	cmp	r3, #2
 8004282:	d078      	beq.n	8004376 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004284:	e099      	b.n	80043ba <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004286:	4b88      	ldr	r3, [pc, #544]	; (80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d02d      	beq.n	80042ee <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004292:	4b85      	ldr	r3, [pc, #532]	; (80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	08db      	lsrs	r3, r3, #3
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	4a83      	ldr	r2, [pc, #524]	; (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800429e:	fa22 f303 	lsr.w	r3, r2, r3
 80042a2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	ee07 3a90 	vmov	s15, r3
 80042aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	ee07 3a90 	vmov	s15, r3
 80042b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042bc:	4b7a      	ldr	r3, [pc, #488]	; (80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80042d0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80044b0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80042d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80042ec:	e087      	b.n	80043fe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	ee07 3a90 	vmov	s15, r3
 80042f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80042fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004300:	4b69      	ldr	r3, [pc, #420]	; (80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004310:	ed97 6a03 	vldr	s12, [r7, #12]
 8004314:	eddf 5a66 	vldr	s11, [pc, #408]	; 80044b0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004318:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004330:	e065      	b.n	80043fe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	ee07 3a90 	vmov	s15, r3
 8004338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004344:	4b58      	ldr	r3, [pc, #352]	; (80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434c:	ee07 3a90 	vmov	s15, r3
 8004350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004354:	ed97 6a03 	vldr	s12, [r7, #12]
 8004358:	eddf 5a55 	vldr	s11, [pc, #340]	; 80044b0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800435c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004364:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004370:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004374:	e043      	b.n	80043fe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	ee07 3a90 	vmov	s15, r3
 800437c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004380:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004388:	4b47      	ldr	r3, [pc, #284]	; (80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004390:	ee07 3a90 	vmov	s15, r3
 8004394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004398:	ed97 6a03 	vldr	s12, [r7, #12]
 800439c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80044b0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80043a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043b8:	e021      	b.n	80043fe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	ee07 3a90 	vmov	s15, r3
 80043c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80043c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043cc:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d4:	ee07 3a90 	vmov	s15, r3
 80043d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80043e0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80044b0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80043e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043fc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80043fe:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	0a5b      	lsrs	r3, r3, #9
 8004404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004414:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004418:	edd7 6a07 	vldr	s13, [r7, #28]
 800441c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004424:	ee17 2a90 	vmov	r2, s15
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800442c:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	0c1b      	lsrs	r3, r3, #16
 8004432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004446:	edd7 6a07 	vldr	s13, [r7, #28]
 800444a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800444e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004452:	ee17 2a90 	vmov	r2, s15
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800445a:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	0e1b      	lsrs	r3, r3, #24
 8004460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004464:	ee07 3a90 	vmov	s15, r3
 8004468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004470:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004474:	edd7 6a07 	vldr	s13, [r7, #28]
 8004478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800447c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004480:	ee17 2a90 	vmov	r2, s15
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004488:	e008      	b.n	800449c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	609a      	str	r2, [r3, #8]
}
 800449c:	bf00      	nop
 800449e:	3724      	adds	r7, #36	; 0x24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	58024400 	.word	0x58024400
 80044ac:	03d09000 	.word	0x03d09000
 80044b0:	46000000 	.word	0x46000000
 80044b4:	4c742400 	.word	0x4c742400
 80044b8:	4a742400 	.word	0x4a742400
 80044bc:	4af42400 	.word	0x4af42400

080044c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b089      	sub	sp, #36	; 0x24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044c8:	4b9d      	ldr	r3, [pc, #628]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80044d2:	4b9b      	ldr	r3, [pc, #620]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	0d1b      	lsrs	r3, r3, #20
 80044d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80044de:	4b98      	ldr	r3, [pc, #608]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	0a1b      	lsrs	r3, r3, #8
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80044ea:	4b95      	ldr	r3, [pc, #596]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	08db      	lsrs	r3, r3, #3
 80044f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004502:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 810a 	beq.w	8004722 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d05a      	beq.n	80045ca <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004514:	2b01      	cmp	r3, #1
 8004516:	d302      	bcc.n	800451e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004518:	2b02      	cmp	r3, #2
 800451a:	d078      	beq.n	800460e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800451c:	e099      	b.n	8004652 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800451e:	4b88      	ldr	r3, [pc, #544]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d02d      	beq.n	8004586 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800452a:	4b85      	ldr	r3, [pc, #532]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	08db      	lsrs	r3, r3, #3
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	4a83      	ldr	r2, [pc, #524]	; (8004744 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004536:	fa22 f303 	lsr.w	r3, r2, r3
 800453a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	ee07 3a90 	vmov	s15, r3
 800454c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004554:	4b7a      	ldr	r3, [pc, #488]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455c:	ee07 3a90 	vmov	s15, r3
 8004560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004564:	ed97 6a03 	vldr	s12, [r7, #12]
 8004568:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800456c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004570:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004578:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800457c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004580:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004584:	e087      	b.n	8004696 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004590:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800474c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004598:	4b69      	ldr	r3, [pc, #420]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a0:	ee07 3a90 	vmov	s15, r3
 80045a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80045b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045c8:	e065      	b.n	8004696 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80045d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045dc:	4b58      	ldr	r3, [pc, #352]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e4:	ee07 3a90 	vmov	s15, r3
 80045e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80045f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80045f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004608:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800460c:	e043      	b.n	8004696 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	ee07 3a90 	vmov	s15, r3
 8004614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004618:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800461c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004620:	4b47      	ldr	r3, [pc, #284]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004630:	ed97 6a03 	vldr	s12, [r7, #12]
 8004634:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004638:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004650:	e021      	b.n	8004696 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	ee07 3a90 	vmov	s15, r3
 8004658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004664:	4b36      	ldr	r3, [pc, #216]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466c:	ee07 3a90 	vmov	s15, r3
 8004670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004674:	ed97 6a03 	vldr	s12, [r7, #12]
 8004678:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800467c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004690:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004694:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004696:	4b2a      	ldr	r3, [pc, #168]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	0a5b      	lsrs	r3, r3, #9
 800469c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046a0:	ee07 3a90 	vmov	s15, r3
 80046a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80046b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046bc:	ee17 2a90 	vmov	r2, s15
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80046c4:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	0c1b      	lsrs	r3, r3, #16
 80046ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046de:	edd7 6a07 	vldr	s13, [r7, #28]
 80046e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ea:	ee17 2a90 	vmov	r2, s15
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80046f2:	4b13      	ldr	r3, [pc, #76]	; (8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	0e1b      	lsrs	r3, r3, #24
 80046f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046fc:	ee07 3a90 	vmov	s15, r3
 8004700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004704:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004708:	ee37 7a87 	vadd.f32	s14, s15, s14
 800470c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004718:	ee17 2a90 	vmov	r2, s15
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004720:	e008      	b.n	8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	609a      	str	r2, [r3, #8]
}
 8004734:	bf00      	nop
 8004736:	3724      	adds	r7, #36	; 0x24
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	58024400 	.word	0x58024400
 8004744:	03d09000 	.word	0x03d09000
 8004748:	46000000 	.word	0x46000000
 800474c:	4c742400 	.word	0x4c742400
 8004750:	4a742400 	.word	0x4a742400
 8004754:	4af42400 	.word	0x4af42400

08004758 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004766:	4b53      	ldr	r3, [pc, #332]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	2b03      	cmp	r3, #3
 8004770:	d101      	bne.n	8004776 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e099      	b.n	80048aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004776:	4b4f      	ldr	r3, [pc, #316]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a4e      	ldr	r2, [pc, #312]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800477c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004782:	f7fc fe45 	bl	8001410 <HAL_GetTick>
 8004786:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004788:	e008      	b.n	800479c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800478a:	f7fc fe41 	bl	8001410 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e086      	b.n	80048aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800479c:	4b45      	ldr	r3, [pc, #276]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f0      	bne.n	800478a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80047a8:	4b42      	ldr	r3, [pc, #264]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	031b      	lsls	r3, r3, #12
 80047b6:	493f      	ldr	r1, [pc, #252]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	628b      	str	r3, [r1, #40]	; 0x28
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	025b      	lsls	r3, r3, #9
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	061b      	lsls	r3, r3, #24
 80047e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047ec:	4931      	ldr	r1, [pc, #196]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80047f2:	4b30      	ldr	r3, [pc, #192]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	492d      	ldr	r1, [pc, #180]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004800:	4313      	orrs	r3, r2
 8004802:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004804:	4b2b      	ldr	r3, [pc, #172]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	f023 0220 	bic.w	r2, r3, #32
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	4928      	ldr	r1, [pc, #160]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004812:	4313      	orrs	r3, r2
 8004814:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004816:	4b27      	ldr	r3, [pc, #156]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	4a26      	ldr	r2, [pc, #152]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800481c:	f023 0310 	bic.w	r3, r3, #16
 8004820:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004826:	4b24      	ldr	r3, [pc, #144]	; (80048b8 <RCCEx_PLL2_Config+0x160>)
 8004828:	4013      	ands	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	69d2      	ldr	r2, [r2, #28]
 800482e:	00d2      	lsls	r2, r2, #3
 8004830:	4920      	ldr	r1, [pc, #128]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004836:	4b1f      	ldr	r3, [pc, #124]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800483c:	f043 0310 	orr.w	r3, r3, #16
 8004840:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004848:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800484e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004854:	e00f      	b.n	8004876 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d106      	bne.n	800486a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800485c:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004866:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004868:	e005      	b.n	8004876 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	4a11      	ldr	r2, [pc, #68]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004874:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004876:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a0e      	ldr	r2, [pc, #56]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800487c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004882:	f7fc fdc5 	bl	8001410 <HAL_GetTick>
 8004886:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004888:	e008      	b.n	800489c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800488a:	f7fc fdc1 	bl	8001410 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e006      	b.n	80048aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	58024400 	.word	0x58024400
 80048b8:	ffff0007 	.word	0xffff0007

080048bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048ca:	4b53      	ldr	r3, [pc, #332]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d101      	bne.n	80048da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e099      	b.n	8004a0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048da:	4b4f      	ldr	r3, [pc, #316]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a4e      	ldr	r2, [pc, #312]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80048e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e6:	f7fc fd93 	bl	8001410 <HAL_GetTick>
 80048ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048ec:	e008      	b.n	8004900 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80048ee:	f7fc fd8f 	bl	8001410 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e086      	b.n	8004a0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004900:	4b45      	ldr	r3, [pc, #276]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1f0      	bne.n	80048ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800490c:	4b42      	ldr	r3, [pc, #264]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	051b      	lsls	r3, r3, #20
 800491a:	493f      	ldr	r1, [pc, #252]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 800491c:	4313      	orrs	r3, r2
 800491e:	628b      	str	r3, [r1, #40]	; 0x28
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	3b01      	subs	r3, #1
 8004926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	3b01      	subs	r3, #1
 8004930:	025b      	lsls	r3, r3, #9
 8004932:	b29b      	uxth	r3, r3
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	3b01      	subs	r3, #1
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	3b01      	subs	r3, #1
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004950:	4931      	ldr	r1, [pc, #196]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004952:	4313      	orrs	r3, r2
 8004954:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004956:	4b30      	ldr	r3, [pc, #192]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	492d      	ldr	r1, [pc, #180]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004964:	4313      	orrs	r3, r2
 8004966:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004968:	4b2b      	ldr	r3, [pc, #172]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	4928      	ldr	r1, [pc, #160]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004976:	4313      	orrs	r3, r2
 8004978:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800497a:	4b27      	ldr	r3, [pc, #156]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004984:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004986:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800498a:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <RCCEx_PLL3_Config+0x160>)
 800498c:	4013      	ands	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	69d2      	ldr	r2, [r2, #28]
 8004992:	00d2      	lsls	r2, r2, #3
 8004994:	4920      	ldr	r1, [pc, #128]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800499a:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80049ac:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049b8:	e00f      	b.n	80049da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d106      	bne.n	80049ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80049c0:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	4a14      	ldr	r2, [pc, #80]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049cc:	e005      	b.n	80049da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	4a11      	ldr	r2, [pc, #68]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80049da:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a0e      	ldr	r2, [pc, #56]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e6:	f7fc fd13 	bl	8001410 <HAL_GetTick>
 80049ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049ec:	e008      	b.n	8004a00 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80049ee:	f7fc fd0f 	bl	8001410 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e006      	b.n	8004a0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f0      	beq.n	80049ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	ffff0007 	.word	0xffff0007

08004a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e042      	b.n	8004ab8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d106      	bne.n	8004a4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7fc fb01 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2224      	movs	r2, #36	; 0x24
 8004a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f82c 	bl	8004ac0 <UART_SetConfig>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e022      	b.n	8004ab8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f002 f99e 	bl	8006dbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f002 fa25 	bl	8006f00 <UART_CheckIdleState>
 8004ab6:	4603      	mov	r3, r0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004ac4:	b090      	sub	sp, #64	; 0x40
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004af4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004af6:	4313      	orrs	r3, r2
 8004af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4bc1      	ldr	r3, [pc, #772]	; (8004e08 <UART_SetConfig+0x348>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b0a:	430b      	orrs	r3, r1
 8004b0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4ab7      	ldr	r2, [pc, #732]	; (8004e0c <UART_SetConfig+0x34c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d004      	beq.n	8004b3e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	4bb2      	ldr	r3, [pc, #712]	; (8004e10 <UART_SetConfig+0x350>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	f023 010f 	bic.w	r1, r3, #15
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4aa9      	ldr	r2, [pc, #676]	; (8004e14 <UART_SetConfig+0x354>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d177      	bne.n	8004c62 <UART_SetConfig+0x1a2>
 8004b72:	4ba9      	ldr	r3, [pc, #676]	; (8004e18 <UART_SetConfig+0x358>)
 8004b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b7a:	2b28      	cmp	r3, #40	; 0x28
 8004b7c:	d86c      	bhi.n	8004c58 <UART_SetConfig+0x198>
 8004b7e:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <UART_SetConfig+0xc4>)
 8004b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b84:	08004c29 	.word	0x08004c29
 8004b88:	08004c59 	.word	0x08004c59
 8004b8c:	08004c59 	.word	0x08004c59
 8004b90:	08004c59 	.word	0x08004c59
 8004b94:	08004c59 	.word	0x08004c59
 8004b98:	08004c59 	.word	0x08004c59
 8004b9c:	08004c59 	.word	0x08004c59
 8004ba0:	08004c59 	.word	0x08004c59
 8004ba4:	08004c31 	.word	0x08004c31
 8004ba8:	08004c59 	.word	0x08004c59
 8004bac:	08004c59 	.word	0x08004c59
 8004bb0:	08004c59 	.word	0x08004c59
 8004bb4:	08004c59 	.word	0x08004c59
 8004bb8:	08004c59 	.word	0x08004c59
 8004bbc:	08004c59 	.word	0x08004c59
 8004bc0:	08004c59 	.word	0x08004c59
 8004bc4:	08004c39 	.word	0x08004c39
 8004bc8:	08004c59 	.word	0x08004c59
 8004bcc:	08004c59 	.word	0x08004c59
 8004bd0:	08004c59 	.word	0x08004c59
 8004bd4:	08004c59 	.word	0x08004c59
 8004bd8:	08004c59 	.word	0x08004c59
 8004bdc:	08004c59 	.word	0x08004c59
 8004be0:	08004c59 	.word	0x08004c59
 8004be4:	08004c41 	.word	0x08004c41
 8004be8:	08004c59 	.word	0x08004c59
 8004bec:	08004c59 	.word	0x08004c59
 8004bf0:	08004c59 	.word	0x08004c59
 8004bf4:	08004c59 	.word	0x08004c59
 8004bf8:	08004c59 	.word	0x08004c59
 8004bfc:	08004c59 	.word	0x08004c59
 8004c00:	08004c59 	.word	0x08004c59
 8004c04:	08004c49 	.word	0x08004c49
 8004c08:	08004c59 	.word	0x08004c59
 8004c0c:	08004c59 	.word	0x08004c59
 8004c10:	08004c59 	.word	0x08004c59
 8004c14:	08004c59 	.word	0x08004c59
 8004c18:	08004c59 	.word	0x08004c59
 8004c1c:	08004c59 	.word	0x08004c59
 8004c20:	08004c59 	.word	0x08004c59
 8004c24:	08004c51 	.word	0x08004c51
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c2e:	e233      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004c30:	2304      	movs	r3, #4
 8004c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c36:	e22f      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004c38:	2308      	movs	r3, #8
 8004c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c3e:	e22b      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004c40:	2310      	movs	r3, #16
 8004c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c46:	e227      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004c48:	2320      	movs	r3, #32
 8004c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c4e:	e223      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004c50:	2340      	movs	r3, #64	; 0x40
 8004c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c56:	e21f      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004c58:	2380      	movs	r3, #128	; 0x80
 8004c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c5e:	bf00      	nop
 8004c60:	e21a      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a6d      	ldr	r2, [pc, #436]	; (8004e1c <UART_SetConfig+0x35c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d132      	bne.n	8004cd2 <UART_SetConfig+0x212>
 8004c6c:	4b6a      	ldr	r3, [pc, #424]	; (8004e18 <UART_SetConfig+0x358>)
 8004c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	2b05      	cmp	r3, #5
 8004c76:	d827      	bhi.n	8004cc8 <UART_SetConfig+0x208>
 8004c78:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <UART_SetConfig+0x1c0>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004c99 	.word	0x08004c99
 8004c84:	08004ca1 	.word	0x08004ca1
 8004c88:	08004ca9 	.word	0x08004ca9
 8004c8c:	08004cb1 	.word	0x08004cb1
 8004c90:	08004cb9 	.word	0x08004cb9
 8004c94:	08004cc1 	.word	0x08004cc1
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c9e:	e1fb      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004ca0:	2304      	movs	r3, #4
 8004ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ca6:	e1f7      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004ca8:	2308      	movs	r3, #8
 8004caa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004cae:	e1f3      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004cb6:	e1ef      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004cb8:	2320      	movs	r3, #32
 8004cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004cbe:	e1eb      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004cc0:	2340      	movs	r3, #64	; 0x40
 8004cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004cc6:	e1e7      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004cc8:	2380      	movs	r3, #128	; 0x80
 8004cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004cce:	bf00      	nop
 8004cd0:	e1e2      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a52      	ldr	r2, [pc, #328]	; (8004e20 <UART_SetConfig+0x360>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d132      	bne.n	8004d42 <UART_SetConfig+0x282>
 8004cdc:	4b4e      	ldr	r3, [pc, #312]	; (8004e18 <UART_SetConfig+0x358>)
 8004cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	2b05      	cmp	r3, #5
 8004ce6:	d827      	bhi.n	8004d38 <UART_SetConfig+0x278>
 8004ce8:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <UART_SetConfig+0x230>)
 8004cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cee:	bf00      	nop
 8004cf0:	08004d09 	.word	0x08004d09
 8004cf4:	08004d11 	.word	0x08004d11
 8004cf8:	08004d19 	.word	0x08004d19
 8004cfc:	08004d21 	.word	0x08004d21
 8004d00:	08004d29 	.word	0x08004d29
 8004d04:	08004d31 	.word	0x08004d31
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d0e:	e1c3      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004d10:	2304      	movs	r3, #4
 8004d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d16:	e1bf      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004d18:	2308      	movs	r3, #8
 8004d1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d1e:	e1bb      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004d20:	2310      	movs	r3, #16
 8004d22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d26:	e1b7      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004d28:	2320      	movs	r3, #32
 8004d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d2e:	e1b3      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004d30:	2340      	movs	r3, #64	; 0x40
 8004d32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d36:	e1af      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004d38:	2380      	movs	r3, #128	; 0x80
 8004d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d3e:	bf00      	nop
 8004d40:	e1aa      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a37      	ldr	r2, [pc, #220]	; (8004e24 <UART_SetConfig+0x364>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d132      	bne.n	8004db2 <UART_SetConfig+0x2f2>
 8004d4c:	4b32      	ldr	r3, [pc, #200]	; (8004e18 <UART_SetConfig+0x358>)
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	2b05      	cmp	r3, #5
 8004d56:	d827      	bhi.n	8004da8 <UART_SetConfig+0x2e8>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0x2a0>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d79 	.word	0x08004d79
 8004d64:	08004d81 	.word	0x08004d81
 8004d68:	08004d89 	.word	0x08004d89
 8004d6c:	08004d91 	.word	0x08004d91
 8004d70:	08004d99 	.word	0x08004d99
 8004d74:	08004da1 	.word	0x08004da1
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d7e:	e18b      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004d80:	2304      	movs	r3, #4
 8004d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d86:	e187      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d8e:	e183      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d96:	e17f      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004d98:	2320      	movs	r3, #32
 8004d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d9e:	e17b      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004da0:	2340      	movs	r3, #64	; 0x40
 8004da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004da6:	e177      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004dae:	bf00      	nop
 8004db0:	e172      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a1c      	ldr	r2, [pc, #112]	; (8004e28 <UART_SetConfig+0x368>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d144      	bne.n	8004e46 <UART_SetConfig+0x386>
 8004dbc:	4b16      	ldr	r3, [pc, #88]	; (8004e18 <UART_SetConfig+0x358>)
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	2b05      	cmp	r3, #5
 8004dc6:	d839      	bhi.n	8004e3c <UART_SetConfig+0x37c>
 8004dc8:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <UART_SetConfig+0x310>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004de9 	.word	0x08004de9
 8004dd4:	08004df1 	.word	0x08004df1
 8004dd8:	08004df9 	.word	0x08004df9
 8004ddc:	08004e01 	.word	0x08004e01
 8004de0:	08004e2d 	.word	0x08004e2d
 8004de4:	08004e35 	.word	0x08004e35
 8004de8:	2300      	movs	r3, #0
 8004dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004dee:	e153      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004df0:	2304      	movs	r3, #4
 8004df2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004df6:	e14f      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004df8:	2308      	movs	r3, #8
 8004dfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004dfe:	e14b      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004e00:	2310      	movs	r3, #16
 8004e02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e06:	e147      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004e08:	cfff69f3 	.word	0xcfff69f3
 8004e0c:	58000c00 	.word	0x58000c00
 8004e10:	11fff4ff 	.word	0x11fff4ff
 8004e14:	40011000 	.word	0x40011000
 8004e18:	58024400 	.word	0x58024400
 8004e1c:	40004400 	.word	0x40004400
 8004e20:	40004800 	.word	0x40004800
 8004e24:	40004c00 	.word	0x40004c00
 8004e28:	40005000 	.word	0x40005000
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e32:	e131      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004e34:	2340      	movs	r3, #64	; 0x40
 8004e36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e3a:	e12d      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e42:	bf00      	nop
 8004e44:	e128      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4ac3      	ldr	r2, [pc, #780]	; (8005158 <UART_SetConfig+0x698>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d178      	bne.n	8004f42 <UART_SetConfig+0x482>
 8004e50:	4bc2      	ldr	r3, [pc, #776]	; (800515c <UART_SetConfig+0x69c>)
 8004e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e58:	2b28      	cmp	r3, #40	; 0x28
 8004e5a:	d86d      	bhi.n	8004f38 <UART_SetConfig+0x478>
 8004e5c:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <UART_SetConfig+0x3a4>)
 8004e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e62:	bf00      	nop
 8004e64:	08004f09 	.word	0x08004f09
 8004e68:	08004f39 	.word	0x08004f39
 8004e6c:	08004f39 	.word	0x08004f39
 8004e70:	08004f39 	.word	0x08004f39
 8004e74:	08004f39 	.word	0x08004f39
 8004e78:	08004f39 	.word	0x08004f39
 8004e7c:	08004f39 	.word	0x08004f39
 8004e80:	08004f39 	.word	0x08004f39
 8004e84:	08004f11 	.word	0x08004f11
 8004e88:	08004f39 	.word	0x08004f39
 8004e8c:	08004f39 	.word	0x08004f39
 8004e90:	08004f39 	.word	0x08004f39
 8004e94:	08004f39 	.word	0x08004f39
 8004e98:	08004f39 	.word	0x08004f39
 8004e9c:	08004f39 	.word	0x08004f39
 8004ea0:	08004f39 	.word	0x08004f39
 8004ea4:	08004f19 	.word	0x08004f19
 8004ea8:	08004f39 	.word	0x08004f39
 8004eac:	08004f39 	.word	0x08004f39
 8004eb0:	08004f39 	.word	0x08004f39
 8004eb4:	08004f39 	.word	0x08004f39
 8004eb8:	08004f39 	.word	0x08004f39
 8004ebc:	08004f39 	.word	0x08004f39
 8004ec0:	08004f39 	.word	0x08004f39
 8004ec4:	08004f21 	.word	0x08004f21
 8004ec8:	08004f39 	.word	0x08004f39
 8004ecc:	08004f39 	.word	0x08004f39
 8004ed0:	08004f39 	.word	0x08004f39
 8004ed4:	08004f39 	.word	0x08004f39
 8004ed8:	08004f39 	.word	0x08004f39
 8004edc:	08004f39 	.word	0x08004f39
 8004ee0:	08004f39 	.word	0x08004f39
 8004ee4:	08004f29 	.word	0x08004f29
 8004ee8:	08004f39 	.word	0x08004f39
 8004eec:	08004f39 	.word	0x08004f39
 8004ef0:	08004f39 	.word	0x08004f39
 8004ef4:	08004f39 	.word	0x08004f39
 8004ef8:	08004f39 	.word	0x08004f39
 8004efc:	08004f39 	.word	0x08004f39
 8004f00:	08004f39 	.word	0x08004f39
 8004f04:	08004f31 	.word	0x08004f31
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f0e:	e0c3      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004f10:	2304      	movs	r3, #4
 8004f12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f16:	e0bf      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004f18:	2308      	movs	r3, #8
 8004f1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f1e:	e0bb      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004f20:	2310      	movs	r3, #16
 8004f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f26:	e0b7      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004f28:	2320      	movs	r3, #32
 8004f2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f2e:	e0b3      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004f30:	2340      	movs	r3, #64	; 0x40
 8004f32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f36:	e0af      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004f38:	2380      	movs	r3, #128	; 0x80
 8004f3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f3e:	bf00      	nop
 8004f40:	e0aa      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a86      	ldr	r2, [pc, #536]	; (8005160 <UART_SetConfig+0x6a0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d132      	bne.n	8004fb2 <UART_SetConfig+0x4f2>
 8004f4c:	4b83      	ldr	r3, [pc, #524]	; (800515c <UART_SetConfig+0x69c>)
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	2b05      	cmp	r3, #5
 8004f56:	d827      	bhi.n	8004fa8 <UART_SetConfig+0x4e8>
 8004f58:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <UART_SetConfig+0x4a0>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08004f79 	.word	0x08004f79
 8004f64:	08004f81 	.word	0x08004f81
 8004f68:	08004f89 	.word	0x08004f89
 8004f6c:	08004f91 	.word	0x08004f91
 8004f70:	08004f99 	.word	0x08004f99
 8004f74:	08004fa1 	.word	0x08004fa1
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f7e:	e08b      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004f80:	2304      	movs	r3, #4
 8004f82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f86:	e087      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004f88:	2308      	movs	r3, #8
 8004f8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f8e:	e083      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004f90:	2310      	movs	r3, #16
 8004f92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f96:	e07f      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004f98:	2320      	movs	r3, #32
 8004f9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f9e:	e07b      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004fa0:	2340      	movs	r3, #64	; 0x40
 8004fa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fa6:	e077      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fae:	bf00      	nop
 8004fb0:	e072      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a6b      	ldr	r2, [pc, #428]	; (8005164 <UART_SetConfig+0x6a4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d132      	bne.n	8005022 <UART_SetConfig+0x562>
 8004fbc:	4b67      	ldr	r3, [pc, #412]	; (800515c <UART_SetConfig+0x69c>)
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	2b05      	cmp	r3, #5
 8004fc6:	d827      	bhi.n	8005018 <UART_SetConfig+0x558>
 8004fc8:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <UART_SetConfig+0x510>)
 8004fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fce:	bf00      	nop
 8004fd0:	08004fe9 	.word	0x08004fe9
 8004fd4:	08004ff1 	.word	0x08004ff1
 8004fd8:	08004ff9 	.word	0x08004ff9
 8004fdc:	08005001 	.word	0x08005001
 8004fe0:	08005009 	.word	0x08005009
 8004fe4:	08005011 	.word	0x08005011
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fee:	e053      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ff6:	e04f      	b.n	8005098 <UART_SetConfig+0x5d8>
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ffe:	e04b      	b.n	8005098 <UART_SetConfig+0x5d8>
 8005000:	2310      	movs	r3, #16
 8005002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005006:	e047      	b.n	8005098 <UART_SetConfig+0x5d8>
 8005008:	2320      	movs	r3, #32
 800500a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800500e:	e043      	b.n	8005098 <UART_SetConfig+0x5d8>
 8005010:	2340      	movs	r3, #64	; 0x40
 8005012:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005016:	e03f      	b.n	8005098 <UART_SetConfig+0x5d8>
 8005018:	2380      	movs	r3, #128	; 0x80
 800501a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800501e:	bf00      	nop
 8005020:	e03a      	b.n	8005098 <UART_SetConfig+0x5d8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a50      	ldr	r2, [pc, #320]	; (8005168 <UART_SetConfig+0x6a8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d132      	bne.n	8005092 <UART_SetConfig+0x5d2>
 800502c:	4b4b      	ldr	r3, [pc, #300]	; (800515c <UART_SetConfig+0x69c>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	2b05      	cmp	r3, #5
 8005036:	d827      	bhi.n	8005088 <UART_SetConfig+0x5c8>
 8005038:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <UART_SetConfig+0x580>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005059 	.word	0x08005059
 8005044:	08005061 	.word	0x08005061
 8005048:	08005069 	.word	0x08005069
 800504c:	08005071 	.word	0x08005071
 8005050:	08005079 	.word	0x08005079
 8005054:	08005081 	.word	0x08005081
 8005058:	2302      	movs	r3, #2
 800505a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800505e:	e01b      	b.n	8005098 <UART_SetConfig+0x5d8>
 8005060:	2304      	movs	r3, #4
 8005062:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005066:	e017      	b.n	8005098 <UART_SetConfig+0x5d8>
 8005068:	2308      	movs	r3, #8
 800506a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800506e:	e013      	b.n	8005098 <UART_SetConfig+0x5d8>
 8005070:	2310      	movs	r3, #16
 8005072:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005076:	e00f      	b.n	8005098 <UART_SetConfig+0x5d8>
 8005078:	2320      	movs	r3, #32
 800507a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800507e:	e00b      	b.n	8005098 <UART_SetConfig+0x5d8>
 8005080:	2340      	movs	r3, #64	; 0x40
 8005082:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005086:	e007      	b.n	8005098 <UART_SetConfig+0x5d8>
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800508e:	bf00      	nop
 8005090:	e002      	b.n	8005098 <UART_SetConfig+0x5d8>
 8005092:	2380      	movs	r3, #128	; 0x80
 8005094:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a32      	ldr	r2, [pc, #200]	; (8005168 <UART_SetConfig+0x6a8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	f040 86f7 	bne.w	8005e92 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050a4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	f000 80c0 	beq.w	800522e <UART_SetConfig+0x76e>
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	dc04      	bgt.n	80050bc <UART_SetConfig+0x5fc>
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d00c      	beq.n	80050d0 <UART_SetConfig+0x610>
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d065      	beq.n	8005186 <UART_SetConfig+0x6c6>
 80050ba:	e27a      	b.n	80055b2 <UART_SetConfig+0xaf2>
 80050bc:	2b20      	cmp	r3, #32
 80050be:	f000 81b0 	beq.w	8005422 <UART_SetConfig+0x962>
 80050c2:	2b40      	cmp	r3, #64	; 0x40
 80050c4:	f000 821e 	beq.w	8005504 <UART_SetConfig+0xa44>
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	f000 8104 	beq.w	80052d6 <UART_SetConfig+0x816>
 80050ce:	e270      	b.n	80055b2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80050d0:	f7ff f894 	bl	80041fc <HAL_RCCEx_GetD3PCLK1Freq>
 80050d4:	4602      	mov	r2, r0
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d04e      	beq.n	800517c <UART_SetConfig+0x6bc>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d048      	beq.n	8005178 <UART_SetConfig+0x6b8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d042      	beq.n	8005174 <UART_SetConfig+0x6b4>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d03c      	beq.n	8005170 <UART_SetConfig+0x6b0>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d036      	beq.n	800516c <UART_SetConfig+0x6ac>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	2b05      	cmp	r3, #5
 8005104:	d026      	beq.n	8005154 <UART_SetConfig+0x694>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	2b06      	cmp	r3, #6
 800510c:	d020      	beq.n	8005150 <UART_SetConfig+0x690>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	2b07      	cmp	r3, #7
 8005114:	d01a      	beq.n	800514c <UART_SetConfig+0x68c>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	2b08      	cmp	r3, #8
 800511c:	d014      	beq.n	8005148 <UART_SetConfig+0x688>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	2b09      	cmp	r3, #9
 8005124:	d00e      	beq.n	8005144 <UART_SetConfig+0x684>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	2b0a      	cmp	r3, #10
 800512c:	d008      	beq.n	8005140 <UART_SetConfig+0x680>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	2b0b      	cmp	r3, #11
 8005134:	d102      	bne.n	800513c <UART_SetConfig+0x67c>
 8005136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800513a:	e020      	b.n	800517e <UART_SetConfig+0x6be>
 800513c:	2301      	movs	r3, #1
 800513e:	e01e      	b.n	800517e <UART_SetConfig+0x6be>
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	e01c      	b.n	800517e <UART_SetConfig+0x6be>
 8005144:	2340      	movs	r3, #64	; 0x40
 8005146:	e01a      	b.n	800517e <UART_SetConfig+0x6be>
 8005148:	2320      	movs	r3, #32
 800514a:	e018      	b.n	800517e <UART_SetConfig+0x6be>
 800514c:	2310      	movs	r3, #16
 800514e:	e016      	b.n	800517e <UART_SetConfig+0x6be>
 8005150:	230c      	movs	r3, #12
 8005152:	e014      	b.n	800517e <UART_SetConfig+0x6be>
 8005154:	230a      	movs	r3, #10
 8005156:	e012      	b.n	800517e <UART_SetConfig+0x6be>
 8005158:	40011400 	.word	0x40011400
 800515c:	58024400 	.word	0x58024400
 8005160:	40007800 	.word	0x40007800
 8005164:	40007c00 	.word	0x40007c00
 8005168:	58000c00 	.word	0x58000c00
 800516c:	2308      	movs	r3, #8
 800516e:	e006      	b.n	800517e <UART_SetConfig+0x6be>
 8005170:	2306      	movs	r3, #6
 8005172:	e004      	b.n	800517e <UART_SetConfig+0x6be>
 8005174:	2304      	movs	r3, #4
 8005176:	e002      	b.n	800517e <UART_SetConfig+0x6be>
 8005178:	2302      	movs	r3, #2
 800517a:	e000      	b.n	800517e <UART_SetConfig+0x6be>
 800517c:	2301      	movs	r3, #1
 800517e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005184:	e219      	b.n	80055ba <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005186:	f107 0318 	add.w	r3, r7, #24
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff f84c 	bl	8004228 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	2b00      	cmp	r3, #0
 8005198:	d044      	beq.n	8005224 <UART_SetConfig+0x764>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d03e      	beq.n	8005220 <UART_SetConfig+0x760>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d038      	beq.n	800521c <UART_SetConfig+0x75c>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d032      	beq.n	8005218 <UART_SetConfig+0x758>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d02c      	beq.n	8005214 <UART_SetConfig+0x754>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	2b05      	cmp	r3, #5
 80051c0:	d026      	beq.n	8005210 <UART_SetConfig+0x750>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	2b06      	cmp	r3, #6
 80051c8:	d020      	beq.n	800520c <UART_SetConfig+0x74c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	2b07      	cmp	r3, #7
 80051d0:	d01a      	beq.n	8005208 <UART_SetConfig+0x748>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d014      	beq.n	8005204 <UART_SetConfig+0x744>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	2b09      	cmp	r3, #9
 80051e0:	d00e      	beq.n	8005200 <UART_SetConfig+0x740>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	2b0a      	cmp	r3, #10
 80051e8:	d008      	beq.n	80051fc <UART_SetConfig+0x73c>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	2b0b      	cmp	r3, #11
 80051f0:	d102      	bne.n	80051f8 <UART_SetConfig+0x738>
 80051f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051f6:	e016      	b.n	8005226 <UART_SetConfig+0x766>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e014      	b.n	8005226 <UART_SetConfig+0x766>
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	e012      	b.n	8005226 <UART_SetConfig+0x766>
 8005200:	2340      	movs	r3, #64	; 0x40
 8005202:	e010      	b.n	8005226 <UART_SetConfig+0x766>
 8005204:	2320      	movs	r3, #32
 8005206:	e00e      	b.n	8005226 <UART_SetConfig+0x766>
 8005208:	2310      	movs	r3, #16
 800520a:	e00c      	b.n	8005226 <UART_SetConfig+0x766>
 800520c:	230c      	movs	r3, #12
 800520e:	e00a      	b.n	8005226 <UART_SetConfig+0x766>
 8005210:	230a      	movs	r3, #10
 8005212:	e008      	b.n	8005226 <UART_SetConfig+0x766>
 8005214:	2308      	movs	r3, #8
 8005216:	e006      	b.n	8005226 <UART_SetConfig+0x766>
 8005218:	2306      	movs	r3, #6
 800521a:	e004      	b.n	8005226 <UART_SetConfig+0x766>
 800521c:	2304      	movs	r3, #4
 800521e:	e002      	b.n	8005226 <UART_SetConfig+0x766>
 8005220:	2302      	movs	r3, #2
 8005222:	e000      	b.n	8005226 <UART_SetConfig+0x766>
 8005224:	2301      	movs	r3, #1
 8005226:	fbb2 f3f3 	udiv	r3, r2, r3
 800522a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800522c:	e1c5      	b.n	80055ba <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800522e:	f107 030c 	add.w	r3, r7, #12
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff f944 	bl	80044c0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	2b00      	cmp	r3, #0
 8005240:	d044      	beq.n	80052cc <UART_SetConfig+0x80c>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	2b01      	cmp	r3, #1
 8005248:	d03e      	beq.n	80052c8 <UART_SetConfig+0x808>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	2b02      	cmp	r3, #2
 8005250:	d038      	beq.n	80052c4 <UART_SetConfig+0x804>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	2b03      	cmp	r3, #3
 8005258:	d032      	beq.n	80052c0 <UART_SetConfig+0x800>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	2b04      	cmp	r3, #4
 8005260:	d02c      	beq.n	80052bc <UART_SetConfig+0x7fc>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	2b05      	cmp	r3, #5
 8005268:	d026      	beq.n	80052b8 <UART_SetConfig+0x7f8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2b06      	cmp	r3, #6
 8005270:	d020      	beq.n	80052b4 <UART_SetConfig+0x7f4>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2b07      	cmp	r3, #7
 8005278:	d01a      	beq.n	80052b0 <UART_SetConfig+0x7f0>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	2b08      	cmp	r3, #8
 8005280:	d014      	beq.n	80052ac <UART_SetConfig+0x7ec>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	2b09      	cmp	r3, #9
 8005288:	d00e      	beq.n	80052a8 <UART_SetConfig+0x7e8>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	2b0a      	cmp	r3, #10
 8005290:	d008      	beq.n	80052a4 <UART_SetConfig+0x7e4>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	2b0b      	cmp	r3, #11
 8005298:	d102      	bne.n	80052a0 <UART_SetConfig+0x7e0>
 800529a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800529e:	e016      	b.n	80052ce <UART_SetConfig+0x80e>
 80052a0:	2301      	movs	r3, #1
 80052a2:	e014      	b.n	80052ce <UART_SetConfig+0x80e>
 80052a4:	2380      	movs	r3, #128	; 0x80
 80052a6:	e012      	b.n	80052ce <UART_SetConfig+0x80e>
 80052a8:	2340      	movs	r3, #64	; 0x40
 80052aa:	e010      	b.n	80052ce <UART_SetConfig+0x80e>
 80052ac:	2320      	movs	r3, #32
 80052ae:	e00e      	b.n	80052ce <UART_SetConfig+0x80e>
 80052b0:	2310      	movs	r3, #16
 80052b2:	e00c      	b.n	80052ce <UART_SetConfig+0x80e>
 80052b4:	230c      	movs	r3, #12
 80052b6:	e00a      	b.n	80052ce <UART_SetConfig+0x80e>
 80052b8:	230a      	movs	r3, #10
 80052ba:	e008      	b.n	80052ce <UART_SetConfig+0x80e>
 80052bc:	2308      	movs	r3, #8
 80052be:	e006      	b.n	80052ce <UART_SetConfig+0x80e>
 80052c0:	2306      	movs	r3, #6
 80052c2:	e004      	b.n	80052ce <UART_SetConfig+0x80e>
 80052c4:	2304      	movs	r3, #4
 80052c6:	e002      	b.n	80052ce <UART_SetConfig+0x80e>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e000      	b.n	80052ce <UART_SetConfig+0x80e>
 80052cc:	2301      	movs	r3, #1
 80052ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052d4:	e171      	b.n	80055ba <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052d6:	4b7a      	ldr	r3, [pc, #488]	; (80054c0 <UART_SetConfig+0xa00>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d054      	beq.n	800538c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80052e2:	4b77      	ldr	r3, [pc, #476]	; (80054c0 <UART_SetConfig+0xa00>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	08db      	lsrs	r3, r3, #3
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	4a75      	ldr	r2, [pc, #468]	; (80054c4 <UART_SetConfig+0xa04>)
 80052ee:	40da      	lsrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d044      	beq.n	8005382 <UART_SetConfig+0x8c2>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d03e      	beq.n	800537e <UART_SetConfig+0x8be>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	2b02      	cmp	r3, #2
 8005306:	d038      	beq.n	800537a <UART_SetConfig+0x8ba>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	2b03      	cmp	r3, #3
 800530e:	d032      	beq.n	8005376 <UART_SetConfig+0x8b6>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	2b04      	cmp	r3, #4
 8005316:	d02c      	beq.n	8005372 <UART_SetConfig+0x8b2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	2b05      	cmp	r3, #5
 800531e:	d026      	beq.n	800536e <UART_SetConfig+0x8ae>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	2b06      	cmp	r3, #6
 8005326:	d020      	beq.n	800536a <UART_SetConfig+0x8aa>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	2b07      	cmp	r3, #7
 800532e:	d01a      	beq.n	8005366 <UART_SetConfig+0x8a6>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	2b08      	cmp	r3, #8
 8005336:	d014      	beq.n	8005362 <UART_SetConfig+0x8a2>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	2b09      	cmp	r3, #9
 800533e:	d00e      	beq.n	800535e <UART_SetConfig+0x89e>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	2b0a      	cmp	r3, #10
 8005346:	d008      	beq.n	800535a <UART_SetConfig+0x89a>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	2b0b      	cmp	r3, #11
 800534e:	d102      	bne.n	8005356 <UART_SetConfig+0x896>
 8005350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005354:	e016      	b.n	8005384 <UART_SetConfig+0x8c4>
 8005356:	2301      	movs	r3, #1
 8005358:	e014      	b.n	8005384 <UART_SetConfig+0x8c4>
 800535a:	2380      	movs	r3, #128	; 0x80
 800535c:	e012      	b.n	8005384 <UART_SetConfig+0x8c4>
 800535e:	2340      	movs	r3, #64	; 0x40
 8005360:	e010      	b.n	8005384 <UART_SetConfig+0x8c4>
 8005362:	2320      	movs	r3, #32
 8005364:	e00e      	b.n	8005384 <UART_SetConfig+0x8c4>
 8005366:	2310      	movs	r3, #16
 8005368:	e00c      	b.n	8005384 <UART_SetConfig+0x8c4>
 800536a:	230c      	movs	r3, #12
 800536c:	e00a      	b.n	8005384 <UART_SetConfig+0x8c4>
 800536e:	230a      	movs	r3, #10
 8005370:	e008      	b.n	8005384 <UART_SetConfig+0x8c4>
 8005372:	2308      	movs	r3, #8
 8005374:	e006      	b.n	8005384 <UART_SetConfig+0x8c4>
 8005376:	2306      	movs	r3, #6
 8005378:	e004      	b.n	8005384 <UART_SetConfig+0x8c4>
 800537a:	2304      	movs	r3, #4
 800537c:	e002      	b.n	8005384 <UART_SetConfig+0x8c4>
 800537e:	2302      	movs	r3, #2
 8005380:	e000      	b.n	8005384 <UART_SetConfig+0x8c4>
 8005382:	2301      	movs	r3, #1
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800538a:	e116      	b.n	80055ba <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	2b00      	cmp	r3, #0
 8005392:	d043      	beq.n	800541c <UART_SetConfig+0x95c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	2b01      	cmp	r3, #1
 800539a:	d03d      	beq.n	8005418 <UART_SetConfig+0x958>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d037      	beq.n	8005414 <UART_SetConfig+0x954>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d031      	beq.n	8005410 <UART_SetConfig+0x950>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d02b      	beq.n	800540c <UART_SetConfig+0x94c>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	2b05      	cmp	r3, #5
 80053ba:	d025      	beq.n	8005408 <UART_SetConfig+0x948>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	2b06      	cmp	r3, #6
 80053c2:	d01f      	beq.n	8005404 <UART_SetConfig+0x944>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	2b07      	cmp	r3, #7
 80053ca:	d019      	beq.n	8005400 <UART_SetConfig+0x940>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d013      	beq.n	80053fc <UART_SetConfig+0x93c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	2b09      	cmp	r3, #9
 80053da:	d00d      	beq.n	80053f8 <UART_SetConfig+0x938>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	2b0a      	cmp	r3, #10
 80053e2:	d007      	beq.n	80053f4 <UART_SetConfig+0x934>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	2b0b      	cmp	r3, #11
 80053ea:	d101      	bne.n	80053f0 <UART_SetConfig+0x930>
 80053ec:	4b36      	ldr	r3, [pc, #216]	; (80054c8 <UART_SetConfig+0xa08>)
 80053ee:	e016      	b.n	800541e <UART_SetConfig+0x95e>
 80053f0:	4b34      	ldr	r3, [pc, #208]	; (80054c4 <UART_SetConfig+0xa04>)
 80053f2:	e014      	b.n	800541e <UART_SetConfig+0x95e>
 80053f4:	4b35      	ldr	r3, [pc, #212]	; (80054cc <UART_SetConfig+0xa0c>)
 80053f6:	e012      	b.n	800541e <UART_SetConfig+0x95e>
 80053f8:	4b35      	ldr	r3, [pc, #212]	; (80054d0 <UART_SetConfig+0xa10>)
 80053fa:	e010      	b.n	800541e <UART_SetConfig+0x95e>
 80053fc:	4b35      	ldr	r3, [pc, #212]	; (80054d4 <UART_SetConfig+0xa14>)
 80053fe:	e00e      	b.n	800541e <UART_SetConfig+0x95e>
 8005400:	4b35      	ldr	r3, [pc, #212]	; (80054d8 <UART_SetConfig+0xa18>)
 8005402:	e00c      	b.n	800541e <UART_SetConfig+0x95e>
 8005404:	4b35      	ldr	r3, [pc, #212]	; (80054dc <UART_SetConfig+0xa1c>)
 8005406:	e00a      	b.n	800541e <UART_SetConfig+0x95e>
 8005408:	4b35      	ldr	r3, [pc, #212]	; (80054e0 <UART_SetConfig+0xa20>)
 800540a:	e008      	b.n	800541e <UART_SetConfig+0x95e>
 800540c:	4b35      	ldr	r3, [pc, #212]	; (80054e4 <UART_SetConfig+0xa24>)
 800540e:	e006      	b.n	800541e <UART_SetConfig+0x95e>
 8005410:	4b35      	ldr	r3, [pc, #212]	; (80054e8 <UART_SetConfig+0xa28>)
 8005412:	e004      	b.n	800541e <UART_SetConfig+0x95e>
 8005414:	4b35      	ldr	r3, [pc, #212]	; (80054ec <UART_SetConfig+0xa2c>)
 8005416:	e002      	b.n	800541e <UART_SetConfig+0x95e>
 8005418:	4b35      	ldr	r3, [pc, #212]	; (80054f0 <UART_SetConfig+0xa30>)
 800541a:	e000      	b.n	800541e <UART_SetConfig+0x95e>
 800541c:	4b29      	ldr	r3, [pc, #164]	; (80054c4 <UART_SetConfig+0xa04>)
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005420:	e0cb      	b.n	80055ba <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	2b00      	cmp	r3, #0
 8005428:	d046      	beq.n	80054b8 <UART_SetConfig+0x9f8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	2b01      	cmp	r3, #1
 8005430:	d040      	beq.n	80054b4 <UART_SetConfig+0x9f4>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2b02      	cmp	r3, #2
 8005438:	d03a      	beq.n	80054b0 <UART_SetConfig+0x9f0>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	2b03      	cmp	r3, #3
 8005440:	d034      	beq.n	80054ac <UART_SetConfig+0x9ec>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b04      	cmp	r3, #4
 8005448:	d02e      	beq.n	80054a8 <UART_SetConfig+0x9e8>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2b05      	cmp	r3, #5
 8005450:	d028      	beq.n	80054a4 <UART_SetConfig+0x9e4>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2b06      	cmp	r3, #6
 8005458:	d022      	beq.n	80054a0 <UART_SetConfig+0x9e0>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b07      	cmp	r3, #7
 8005460:	d01c      	beq.n	800549c <UART_SetConfig+0x9dc>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b08      	cmp	r3, #8
 8005468:	d016      	beq.n	8005498 <UART_SetConfig+0x9d8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2b09      	cmp	r3, #9
 8005470:	d00f      	beq.n	8005492 <UART_SetConfig+0x9d2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b0a      	cmp	r3, #10
 8005478:	d008      	beq.n	800548c <UART_SetConfig+0x9cc>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b0b      	cmp	r3, #11
 8005480:	d102      	bne.n	8005488 <UART_SetConfig+0x9c8>
 8005482:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005486:	e018      	b.n	80054ba <UART_SetConfig+0x9fa>
 8005488:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <UART_SetConfig+0xa18>)
 800548a:	e016      	b.n	80054ba <UART_SetConfig+0x9fa>
 800548c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005490:	e013      	b.n	80054ba <UART_SetConfig+0x9fa>
 8005492:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005496:	e010      	b.n	80054ba <UART_SetConfig+0x9fa>
 8005498:	4b16      	ldr	r3, [pc, #88]	; (80054f4 <UART_SetConfig+0xa34>)
 800549a:	e00e      	b.n	80054ba <UART_SetConfig+0x9fa>
 800549c:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <UART_SetConfig+0xa08>)
 800549e:	e00c      	b.n	80054ba <UART_SetConfig+0x9fa>
 80054a0:	4b15      	ldr	r3, [pc, #84]	; (80054f8 <UART_SetConfig+0xa38>)
 80054a2:	e00a      	b.n	80054ba <UART_SetConfig+0x9fa>
 80054a4:	4b15      	ldr	r3, [pc, #84]	; (80054fc <UART_SetConfig+0xa3c>)
 80054a6:	e008      	b.n	80054ba <UART_SetConfig+0x9fa>
 80054a8:	4b08      	ldr	r3, [pc, #32]	; (80054cc <UART_SetConfig+0xa0c>)
 80054aa:	e006      	b.n	80054ba <UART_SetConfig+0x9fa>
 80054ac:	4b14      	ldr	r3, [pc, #80]	; (8005500 <UART_SetConfig+0xa40>)
 80054ae:	e004      	b.n	80054ba <UART_SetConfig+0x9fa>
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <UART_SetConfig+0xa10>)
 80054b2:	e002      	b.n	80054ba <UART_SetConfig+0x9fa>
 80054b4:	4b07      	ldr	r3, [pc, #28]	; (80054d4 <UART_SetConfig+0xa14>)
 80054b6:	e000      	b.n	80054ba <UART_SetConfig+0x9fa>
 80054b8:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <UART_SetConfig+0xa18>)
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054bc:	e07d      	b.n	80055ba <UART_SetConfig+0xafa>
 80054be:	bf00      	nop
 80054c0:	58024400 	.word	0x58024400
 80054c4:	03d09000 	.word	0x03d09000
 80054c8:	0003d090 	.word	0x0003d090
 80054cc:	0007a120 	.word	0x0007a120
 80054d0:	000f4240 	.word	0x000f4240
 80054d4:	001e8480 	.word	0x001e8480
 80054d8:	003d0900 	.word	0x003d0900
 80054dc:	00516155 	.word	0x00516155
 80054e0:	0061a800 	.word	0x0061a800
 80054e4:	007a1200 	.word	0x007a1200
 80054e8:	00a2c2aa 	.word	0x00a2c2aa
 80054ec:	00f42400 	.word	0x00f42400
 80054f0:	01e84800 	.word	0x01e84800
 80054f4:	0001e848 	.word	0x0001e848
 80054f8:	00051615 	.word	0x00051615
 80054fc:	00061a80 	.word	0x00061a80
 8005500:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	2b00      	cmp	r3, #0
 800550a:	d04e      	beq.n	80055aa <UART_SetConfig+0xaea>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	2b01      	cmp	r3, #1
 8005512:	d047      	beq.n	80055a4 <UART_SetConfig+0xae4>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	2b02      	cmp	r3, #2
 800551a:	d040      	beq.n	800559e <UART_SetConfig+0xade>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	2b03      	cmp	r3, #3
 8005522:	d039      	beq.n	8005598 <UART_SetConfig+0xad8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	2b04      	cmp	r3, #4
 800552a:	d032      	beq.n	8005592 <UART_SetConfig+0xad2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	2b05      	cmp	r3, #5
 8005532:	d02b      	beq.n	800558c <UART_SetConfig+0xacc>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	2b06      	cmp	r3, #6
 800553a:	d024      	beq.n	8005586 <UART_SetConfig+0xac6>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	2b07      	cmp	r3, #7
 8005542:	d01d      	beq.n	8005580 <UART_SetConfig+0xac0>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	2b08      	cmp	r3, #8
 800554a:	d016      	beq.n	800557a <UART_SetConfig+0xaba>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	2b09      	cmp	r3, #9
 8005552:	d00f      	beq.n	8005574 <UART_SetConfig+0xab4>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	2b0a      	cmp	r3, #10
 800555a:	d008      	beq.n	800556e <UART_SetConfig+0xaae>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	2b0b      	cmp	r3, #11
 8005562:	d101      	bne.n	8005568 <UART_SetConfig+0xaa8>
 8005564:	2380      	movs	r3, #128	; 0x80
 8005566:	e022      	b.n	80055ae <UART_SetConfig+0xaee>
 8005568:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800556c:	e01f      	b.n	80055ae <UART_SetConfig+0xaee>
 800556e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005572:	e01c      	b.n	80055ae <UART_SetConfig+0xaee>
 8005574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005578:	e019      	b.n	80055ae <UART_SetConfig+0xaee>
 800557a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800557e:	e016      	b.n	80055ae <UART_SetConfig+0xaee>
 8005580:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005584:	e013      	b.n	80055ae <UART_SetConfig+0xaee>
 8005586:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800558a:	e010      	b.n	80055ae <UART_SetConfig+0xaee>
 800558c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005590:	e00d      	b.n	80055ae <UART_SetConfig+0xaee>
 8005592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005596:	e00a      	b.n	80055ae <UART_SetConfig+0xaee>
 8005598:	f241 5355 	movw	r3, #5461	; 0x1555
 800559c:	e007      	b.n	80055ae <UART_SetConfig+0xaee>
 800559e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055a2:	e004      	b.n	80055ae <UART_SetConfig+0xaee>
 80055a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055a8:	e001      	b.n	80055ae <UART_SetConfig+0xaee>
 80055aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055b0:	e003      	b.n	80055ba <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80055b8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f001 83e8 	beq.w	8006d92 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	4413      	add	r3, r2
 80055cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d305      	bcc.n	80055de <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055da:	429a      	cmp	r2, r3
 80055dc:	d904      	bls.n	80055e8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055e4:	f001 bbd5 	b.w	8006d92 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 80055e8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	f000 8154 	beq.w	800589a <UART_SetConfig+0xdda>
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	dc06      	bgt.n	8005604 <UART_SetConfig+0xb44>
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d00f      	beq.n	800561a <UART_SetConfig+0xb5a>
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	f000 80ac 	beq.w	8005758 <UART_SetConfig+0xc98>
 8005600:	f000 bc30 	b.w	8005e64 <UART_SetConfig+0x13a4>
 8005604:	2b20      	cmp	r3, #32
 8005606:	f000 832d 	beq.w	8005c64 <UART_SetConfig+0x11a4>
 800560a:	2b40      	cmp	r3, #64	; 0x40
 800560c:	f000 83a5 	beq.w	8005d5a <UART_SetConfig+0x129a>
 8005610:	2b10      	cmp	r3, #16
 8005612:	f000 81e3 	beq.w	80059dc <UART_SetConfig+0xf1c>
 8005616:	f000 bc25 	b.w	8005e64 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800561a:	f7fe fdef 	bl	80041fc <HAL_RCCEx_GetD3PCLK1Freq>
 800561e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	4618      	mov	r0, r3
 8005624:	f04f 0100 	mov.w	r1, #0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	2b00      	cmp	r3, #0
 800562e:	d067      	beq.n	8005700 <UART_SetConfig+0xc40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	2b01      	cmp	r3, #1
 8005636:	d05e      	beq.n	80056f6 <UART_SetConfig+0xc36>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	2b02      	cmp	r3, #2
 800563e:	d055      	beq.n	80056ec <UART_SetConfig+0xc2c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	2b03      	cmp	r3, #3
 8005646:	d04c      	beq.n	80056e2 <UART_SetConfig+0xc22>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b04      	cmp	r3, #4
 800564e:	d043      	beq.n	80056d8 <UART_SetConfig+0xc18>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	2b05      	cmp	r3, #5
 8005656:	d03a      	beq.n	80056ce <UART_SetConfig+0xc0e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	2b06      	cmp	r3, #6
 800565e:	d031      	beq.n	80056c4 <UART_SetConfig+0xc04>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	2b07      	cmp	r3, #7
 8005666:	d028      	beq.n	80056ba <UART_SetConfig+0xbfa>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	2b08      	cmp	r3, #8
 800566e:	d01f      	beq.n	80056b0 <UART_SetConfig+0xbf0>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	2b09      	cmp	r3, #9
 8005676:	d016      	beq.n	80056a6 <UART_SetConfig+0xbe6>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	2b0a      	cmp	r3, #10
 800567e:	d00d      	beq.n	800569c <UART_SetConfig+0xbdc>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	2b0b      	cmp	r3, #11
 8005686:	d104      	bne.n	8005692 <UART_SetConfig+0xbd2>
 8005688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800568c:	f04f 0400 	mov.w	r4, #0
 8005690:	e03a      	b.n	8005708 <UART_SetConfig+0xc48>
 8005692:	f04f 0301 	mov.w	r3, #1
 8005696:	f04f 0400 	mov.w	r4, #0
 800569a:	e035      	b.n	8005708 <UART_SetConfig+0xc48>
 800569c:	f04f 0380 	mov.w	r3, #128	; 0x80
 80056a0:	f04f 0400 	mov.w	r4, #0
 80056a4:	e030      	b.n	8005708 <UART_SetConfig+0xc48>
 80056a6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80056aa:	f04f 0400 	mov.w	r4, #0
 80056ae:	e02b      	b.n	8005708 <UART_SetConfig+0xc48>
 80056b0:	f04f 0320 	mov.w	r3, #32
 80056b4:	f04f 0400 	mov.w	r4, #0
 80056b8:	e026      	b.n	8005708 <UART_SetConfig+0xc48>
 80056ba:	f04f 0310 	mov.w	r3, #16
 80056be:	f04f 0400 	mov.w	r4, #0
 80056c2:	e021      	b.n	8005708 <UART_SetConfig+0xc48>
 80056c4:	f04f 030c 	mov.w	r3, #12
 80056c8:	f04f 0400 	mov.w	r4, #0
 80056cc:	e01c      	b.n	8005708 <UART_SetConfig+0xc48>
 80056ce:	f04f 030a 	mov.w	r3, #10
 80056d2:	f04f 0400 	mov.w	r4, #0
 80056d6:	e017      	b.n	8005708 <UART_SetConfig+0xc48>
 80056d8:	f04f 0308 	mov.w	r3, #8
 80056dc:	f04f 0400 	mov.w	r4, #0
 80056e0:	e012      	b.n	8005708 <UART_SetConfig+0xc48>
 80056e2:	f04f 0306 	mov.w	r3, #6
 80056e6:	f04f 0400 	mov.w	r4, #0
 80056ea:	e00d      	b.n	8005708 <UART_SetConfig+0xc48>
 80056ec:	f04f 0304 	mov.w	r3, #4
 80056f0:	f04f 0400 	mov.w	r4, #0
 80056f4:	e008      	b.n	8005708 <UART_SetConfig+0xc48>
 80056f6:	f04f 0302 	mov.w	r3, #2
 80056fa:	f04f 0400 	mov.w	r4, #0
 80056fe:	e003      	b.n	8005708 <UART_SetConfig+0xc48>
 8005700:	f04f 0301 	mov.w	r3, #1
 8005704:	f04f 0400 	mov.w	r4, #0
 8005708:	461a      	mov	r2, r3
 800570a:	4623      	mov	r3, r4
 800570c:	f7fa fde4 	bl	80002d8 <__aeabi_uldivmod>
 8005710:	4603      	mov	r3, r0
 8005712:	460c      	mov	r4, r1
 8005714:	4619      	mov	r1, r3
 8005716:	4622      	mov	r2, r4
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	f04f 0400 	mov.w	r4, #0
 8005720:	0214      	lsls	r4, r2, #8
 8005722:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005726:	020b      	lsls	r3, r1, #8
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6852      	ldr	r2, [r2, #4]
 800572c:	0852      	lsrs	r2, r2, #1
 800572e:	4611      	mov	r1, r2
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	eb13 0b01 	adds.w	fp, r3, r1
 8005738:	eb44 0c02 	adc.w	ip, r4, r2
 800573c:	4658      	mov	r0, fp
 800573e:	4661      	mov	r1, ip
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f04f 0400 	mov.w	r4, #0
 8005748:	461a      	mov	r2, r3
 800574a:	4623      	mov	r3, r4
 800574c:	f7fa fdc4 	bl	80002d8 <__aeabi_uldivmod>
 8005750:	4603      	mov	r3, r0
 8005752:	460c      	mov	r4, r1
 8005754:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005756:	e389      	b.n	8005e6c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005758:	f107 0318 	add.w	r3, r7, #24
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe fd63 	bl	8004228 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4618      	mov	r0, r3
 8005766:	f04f 0100 	mov.w	r1, #0
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	2b00      	cmp	r3, #0
 8005770:	d067      	beq.n	8005842 <UART_SetConfig+0xd82>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	2b01      	cmp	r3, #1
 8005778:	d05e      	beq.n	8005838 <UART_SetConfig+0xd78>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	2b02      	cmp	r3, #2
 8005780:	d055      	beq.n	800582e <UART_SetConfig+0xd6e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	2b03      	cmp	r3, #3
 8005788:	d04c      	beq.n	8005824 <UART_SetConfig+0xd64>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	2b04      	cmp	r3, #4
 8005790:	d043      	beq.n	800581a <UART_SetConfig+0xd5a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	2b05      	cmp	r3, #5
 8005798:	d03a      	beq.n	8005810 <UART_SetConfig+0xd50>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	2b06      	cmp	r3, #6
 80057a0:	d031      	beq.n	8005806 <UART_SetConfig+0xd46>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	2b07      	cmp	r3, #7
 80057a8:	d028      	beq.n	80057fc <UART_SetConfig+0xd3c>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	d01f      	beq.n	80057f2 <UART_SetConfig+0xd32>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	2b09      	cmp	r3, #9
 80057b8:	d016      	beq.n	80057e8 <UART_SetConfig+0xd28>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	2b0a      	cmp	r3, #10
 80057c0:	d00d      	beq.n	80057de <UART_SetConfig+0xd1e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	2b0b      	cmp	r3, #11
 80057c8:	d104      	bne.n	80057d4 <UART_SetConfig+0xd14>
 80057ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057ce:	f04f 0400 	mov.w	r4, #0
 80057d2:	e03a      	b.n	800584a <UART_SetConfig+0xd8a>
 80057d4:	f04f 0301 	mov.w	r3, #1
 80057d8:	f04f 0400 	mov.w	r4, #0
 80057dc:	e035      	b.n	800584a <UART_SetConfig+0xd8a>
 80057de:	f04f 0380 	mov.w	r3, #128	; 0x80
 80057e2:	f04f 0400 	mov.w	r4, #0
 80057e6:	e030      	b.n	800584a <UART_SetConfig+0xd8a>
 80057e8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80057ec:	f04f 0400 	mov.w	r4, #0
 80057f0:	e02b      	b.n	800584a <UART_SetConfig+0xd8a>
 80057f2:	f04f 0320 	mov.w	r3, #32
 80057f6:	f04f 0400 	mov.w	r4, #0
 80057fa:	e026      	b.n	800584a <UART_SetConfig+0xd8a>
 80057fc:	f04f 0310 	mov.w	r3, #16
 8005800:	f04f 0400 	mov.w	r4, #0
 8005804:	e021      	b.n	800584a <UART_SetConfig+0xd8a>
 8005806:	f04f 030c 	mov.w	r3, #12
 800580a:	f04f 0400 	mov.w	r4, #0
 800580e:	e01c      	b.n	800584a <UART_SetConfig+0xd8a>
 8005810:	f04f 030a 	mov.w	r3, #10
 8005814:	f04f 0400 	mov.w	r4, #0
 8005818:	e017      	b.n	800584a <UART_SetConfig+0xd8a>
 800581a:	f04f 0308 	mov.w	r3, #8
 800581e:	f04f 0400 	mov.w	r4, #0
 8005822:	e012      	b.n	800584a <UART_SetConfig+0xd8a>
 8005824:	f04f 0306 	mov.w	r3, #6
 8005828:	f04f 0400 	mov.w	r4, #0
 800582c:	e00d      	b.n	800584a <UART_SetConfig+0xd8a>
 800582e:	f04f 0304 	mov.w	r3, #4
 8005832:	f04f 0400 	mov.w	r4, #0
 8005836:	e008      	b.n	800584a <UART_SetConfig+0xd8a>
 8005838:	f04f 0302 	mov.w	r3, #2
 800583c:	f04f 0400 	mov.w	r4, #0
 8005840:	e003      	b.n	800584a <UART_SetConfig+0xd8a>
 8005842:	f04f 0301 	mov.w	r3, #1
 8005846:	f04f 0400 	mov.w	r4, #0
 800584a:	461a      	mov	r2, r3
 800584c:	4623      	mov	r3, r4
 800584e:	f7fa fd43 	bl	80002d8 <__aeabi_uldivmod>
 8005852:	4603      	mov	r3, r0
 8005854:	460c      	mov	r4, r1
 8005856:	4619      	mov	r1, r3
 8005858:	4622      	mov	r2, r4
 800585a:	f04f 0300 	mov.w	r3, #0
 800585e:	f04f 0400 	mov.w	r4, #0
 8005862:	0214      	lsls	r4, r2, #8
 8005864:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005868:	020b      	lsls	r3, r1, #8
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6852      	ldr	r2, [r2, #4]
 800586e:	0852      	lsrs	r2, r2, #1
 8005870:	4611      	mov	r1, r2
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	eb13 0b01 	adds.w	fp, r3, r1
 800587a:	eb44 0c02 	adc.w	ip, r4, r2
 800587e:	4658      	mov	r0, fp
 8005880:	4661      	mov	r1, ip
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f04f 0400 	mov.w	r4, #0
 800588a:	461a      	mov	r2, r3
 800588c:	4623      	mov	r3, r4
 800588e:	f7fa fd23 	bl	80002d8 <__aeabi_uldivmod>
 8005892:	4603      	mov	r3, r0
 8005894:	460c      	mov	r4, r1
 8005896:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005898:	e2e8      	b.n	8005e6c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800589a:	f107 030c 	add.w	r3, r7, #12
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe fe0e 	bl	80044c0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f04f 0100 	mov.w	r1, #0
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d067      	beq.n	8005984 <UART_SetConfig+0xec4>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d05e      	beq.n	800597a <UART_SetConfig+0xeba>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d055      	beq.n	8005970 <UART_SetConfig+0xeb0>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d04c      	beq.n	8005966 <UART_SetConfig+0xea6>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d043      	beq.n	800595c <UART_SetConfig+0xe9c>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	2b05      	cmp	r3, #5
 80058da:	d03a      	beq.n	8005952 <UART_SetConfig+0xe92>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	2b06      	cmp	r3, #6
 80058e2:	d031      	beq.n	8005948 <UART_SetConfig+0xe88>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	2b07      	cmp	r3, #7
 80058ea:	d028      	beq.n	800593e <UART_SetConfig+0xe7e>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d01f      	beq.n	8005934 <UART_SetConfig+0xe74>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	2b09      	cmp	r3, #9
 80058fa:	d016      	beq.n	800592a <UART_SetConfig+0xe6a>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	2b0a      	cmp	r3, #10
 8005902:	d00d      	beq.n	8005920 <UART_SetConfig+0xe60>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	2b0b      	cmp	r3, #11
 800590a:	d104      	bne.n	8005916 <UART_SetConfig+0xe56>
 800590c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005910:	f04f 0400 	mov.w	r4, #0
 8005914:	e03a      	b.n	800598c <UART_SetConfig+0xecc>
 8005916:	f04f 0301 	mov.w	r3, #1
 800591a:	f04f 0400 	mov.w	r4, #0
 800591e:	e035      	b.n	800598c <UART_SetConfig+0xecc>
 8005920:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005924:	f04f 0400 	mov.w	r4, #0
 8005928:	e030      	b.n	800598c <UART_SetConfig+0xecc>
 800592a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800592e:	f04f 0400 	mov.w	r4, #0
 8005932:	e02b      	b.n	800598c <UART_SetConfig+0xecc>
 8005934:	f04f 0320 	mov.w	r3, #32
 8005938:	f04f 0400 	mov.w	r4, #0
 800593c:	e026      	b.n	800598c <UART_SetConfig+0xecc>
 800593e:	f04f 0310 	mov.w	r3, #16
 8005942:	f04f 0400 	mov.w	r4, #0
 8005946:	e021      	b.n	800598c <UART_SetConfig+0xecc>
 8005948:	f04f 030c 	mov.w	r3, #12
 800594c:	f04f 0400 	mov.w	r4, #0
 8005950:	e01c      	b.n	800598c <UART_SetConfig+0xecc>
 8005952:	f04f 030a 	mov.w	r3, #10
 8005956:	f04f 0400 	mov.w	r4, #0
 800595a:	e017      	b.n	800598c <UART_SetConfig+0xecc>
 800595c:	f04f 0308 	mov.w	r3, #8
 8005960:	f04f 0400 	mov.w	r4, #0
 8005964:	e012      	b.n	800598c <UART_SetConfig+0xecc>
 8005966:	f04f 0306 	mov.w	r3, #6
 800596a:	f04f 0400 	mov.w	r4, #0
 800596e:	e00d      	b.n	800598c <UART_SetConfig+0xecc>
 8005970:	f04f 0304 	mov.w	r3, #4
 8005974:	f04f 0400 	mov.w	r4, #0
 8005978:	e008      	b.n	800598c <UART_SetConfig+0xecc>
 800597a:	f04f 0302 	mov.w	r3, #2
 800597e:	f04f 0400 	mov.w	r4, #0
 8005982:	e003      	b.n	800598c <UART_SetConfig+0xecc>
 8005984:	f04f 0301 	mov.w	r3, #1
 8005988:	f04f 0400 	mov.w	r4, #0
 800598c:	461a      	mov	r2, r3
 800598e:	4623      	mov	r3, r4
 8005990:	f7fa fca2 	bl	80002d8 <__aeabi_uldivmod>
 8005994:	4603      	mov	r3, r0
 8005996:	460c      	mov	r4, r1
 8005998:	4619      	mov	r1, r3
 800599a:	4622      	mov	r2, r4
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	f04f 0400 	mov.w	r4, #0
 80059a4:	0214      	lsls	r4, r2, #8
 80059a6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80059aa:	020b      	lsls	r3, r1, #8
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6852      	ldr	r2, [r2, #4]
 80059b0:	0852      	lsrs	r2, r2, #1
 80059b2:	4611      	mov	r1, r2
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	eb13 0b01 	adds.w	fp, r3, r1
 80059bc:	eb44 0c02 	adc.w	ip, r4, r2
 80059c0:	4658      	mov	r0, fp
 80059c2:	4661      	mov	r1, ip
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f04f 0400 	mov.w	r4, #0
 80059cc:	461a      	mov	r2, r3
 80059ce:	4623      	mov	r3, r4
 80059d0:	f7fa fc82 	bl	80002d8 <__aeabi_uldivmod>
 80059d4:	4603      	mov	r3, r0
 80059d6:	460c      	mov	r4, r1
 80059d8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80059da:	e247      	b.n	8005e6c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059dc:	4b96      	ldr	r3, [pc, #600]	; (8005c38 <UART_SetConfig+0x1178>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 80a3 	beq.w	8005b30 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ea:	4b93      	ldr	r3, [pc, #588]	; (8005c38 <UART_SetConfig+0x1178>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	08db      	lsrs	r3, r3, #3
 80059f0:	f003 0303 	and.w	r3, r3, #3
 80059f4:	4a91      	ldr	r2, [pc, #580]	; (8005c3c <UART_SetConfig+0x117c>)
 80059f6:	fa22 f303 	lsr.w	r3, r2, r3
 80059fa:	4618      	mov	r0, r3
 80059fc:	f04f 0100 	mov.w	r1, #0
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d067      	beq.n	8005ad8 <UART_SetConfig+0x1018>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d05e      	beq.n	8005ace <UART_SetConfig+0x100e>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d055      	beq.n	8005ac4 <UART_SetConfig+0x1004>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d04c      	beq.n	8005aba <UART_SetConfig+0xffa>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d043      	beq.n	8005ab0 <UART_SetConfig+0xff0>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	2b05      	cmp	r3, #5
 8005a2e:	d03a      	beq.n	8005aa6 <UART_SetConfig+0xfe6>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	2b06      	cmp	r3, #6
 8005a36:	d031      	beq.n	8005a9c <UART_SetConfig+0xfdc>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b07      	cmp	r3, #7
 8005a3e:	d028      	beq.n	8005a92 <UART_SetConfig+0xfd2>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d01f      	beq.n	8005a88 <UART_SetConfig+0xfc8>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b09      	cmp	r3, #9
 8005a4e:	d016      	beq.n	8005a7e <UART_SetConfig+0xfbe>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b0a      	cmp	r3, #10
 8005a56:	d00d      	beq.n	8005a74 <UART_SetConfig+0xfb4>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2b0b      	cmp	r3, #11
 8005a5e:	d104      	bne.n	8005a6a <UART_SetConfig+0xfaa>
 8005a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a64:	f04f 0400 	mov.w	r4, #0
 8005a68:	e03a      	b.n	8005ae0 <UART_SetConfig+0x1020>
 8005a6a:	f04f 0301 	mov.w	r3, #1
 8005a6e:	f04f 0400 	mov.w	r4, #0
 8005a72:	e035      	b.n	8005ae0 <UART_SetConfig+0x1020>
 8005a74:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005a78:	f04f 0400 	mov.w	r4, #0
 8005a7c:	e030      	b.n	8005ae0 <UART_SetConfig+0x1020>
 8005a7e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005a82:	f04f 0400 	mov.w	r4, #0
 8005a86:	e02b      	b.n	8005ae0 <UART_SetConfig+0x1020>
 8005a88:	f04f 0320 	mov.w	r3, #32
 8005a8c:	f04f 0400 	mov.w	r4, #0
 8005a90:	e026      	b.n	8005ae0 <UART_SetConfig+0x1020>
 8005a92:	f04f 0310 	mov.w	r3, #16
 8005a96:	f04f 0400 	mov.w	r4, #0
 8005a9a:	e021      	b.n	8005ae0 <UART_SetConfig+0x1020>
 8005a9c:	f04f 030c 	mov.w	r3, #12
 8005aa0:	f04f 0400 	mov.w	r4, #0
 8005aa4:	e01c      	b.n	8005ae0 <UART_SetConfig+0x1020>
 8005aa6:	f04f 030a 	mov.w	r3, #10
 8005aaa:	f04f 0400 	mov.w	r4, #0
 8005aae:	e017      	b.n	8005ae0 <UART_SetConfig+0x1020>
 8005ab0:	f04f 0308 	mov.w	r3, #8
 8005ab4:	f04f 0400 	mov.w	r4, #0
 8005ab8:	e012      	b.n	8005ae0 <UART_SetConfig+0x1020>
 8005aba:	f04f 0306 	mov.w	r3, #6
 8005abe:	f04f 0400 	mov.w	r4, #0
 8005ac2:	e00d      	b.n	8005ae0 <UART_SetConfig+0x1020>
 8005ac4:	f04f 0304 	mov.w	r3, #4
 8005ac8:	f04f 0400 	mov.w	r4, #0
 8005acc:	e008      	b.n	8005ae0 <UART_SetConfig+0x1020>
 8005ace:	f04f 0302 	mov.w	r3, #2
 8005ad2:	f04f 0400 	mov.w	r4, #0
 8005ad6:	e003      	b.n	8005ae0 <UART_SetConfig+0x1020>
 8005ad8:	f04f 0301 	mov.w	r3, #1
 8005adc:	f04f 0400 	mov.w	r4, #0
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4623      	mov	r3, r4
 8005ae4:	f7fa fbf8 	bl	80002d8 <__aeabi_uldivmod>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	460c      	mov	r4, r1
 8005aec:	4619      	mov	r1, r3
 8005aee:	4622      	mov	r2, r4
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	f04f 0400 	mov.w	r4, #0
 8005af8:	0214      	lsls	r4, r2, #8
 8005afa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005afe:	020b      	lsls	r3, r1, #8
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6852      	ldr	r2, [r2, #4]
 8005b04:	0852      	lsrs	r2, r2, #1
 8005b06:	4611      	mov	r1, r2
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	eb13 0b01 	adds.w	fp, r3, r1
 8005b10:	eb44 0c02 	adc.w	ip, r4, r2
 8005b14:	4658      	mov	r0, fp
 8005b16:	4661      	mov	r1, ip
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f04f 0400 	mov.w	r4, #0
 8005b20:	461a      	mov	r2, r3
 8005b22:	4623      	mov	r3, r4
 8005b24:	f7fa fbd8 	bl	80002d8 <__aeabi_uldivmod>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8005b2e:	e19d      	b.n	8005e6c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d05b      	beq.n	8005bf0 <UART_SetConfig+0x1130>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d053      	beq.n	8005be8 <UART_SetConfig+0x1128>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d04b      	beq.n	8005be0 <UART_SetConfig+0x1120>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d043      	beq.n	8005bd8 <UART_SetConfig+0x1118>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d03b      	beq.n	8005bd0 <UART_SetConfig+0x1110>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	2b05      	cmp	r3, #5
 8005b5e:	d033      	beq.n	8005bc8 <UART_SetConfig+0x1108>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	2b06      	cmp	r3, #6
 8005b66:	d02b      	beq.n	8005bc0 <UART_SetConfig+0x1100>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	2b07      	cmp	r3, #7
 8005b6e:	d023      	beq.n	8005bb8 <UART_SetConfig+0x10f8>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d01b      	beq.n	8005bb0 <UART_SetConfig+0x10f0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	2b09      	cmp	r3, #9
 8005b7e:	d013      	beq.n	8005ba8 <UART_SetConfig+0x10e8>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	2b0a      	cmp	r3, #10
 8005b86:	d00b      	beq.n	8005ba0 <UART_SetConfig+0x10e0>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	2b0b      	cmp	r3, #11
 8005b8e:	d103      	bne.n	8005b98 <UART_SetConfig+0x10d8>
 8005b90:	4b2a      	ldr	r3, [pc, #168]	; (8005c3c <UART_SetConfig+0x117c>)
 8005b92:	f04f 0400 	mov.w	r4, #0
 8005b96:	e02e      	b.n	8005bf6 <UART_SetConfig+0x1136>
 8005b98:	4b29      	ldr	r3, [pc, #164]	; (8005c40 <UART_SetConfig+0x1180>)
 8005b9a:	f04f 0403 	mov.w	r4, #3
 8005b9e:	e02a      	b.n	8005bf6 <UART_SetConfig+0x1136>
 8005ba0:	4b28      	ldr	r3, [pc, #160]	; (8005c44 <UART_SetConfig+0x1184>)
 8005ba2:	f04f 0400 	mov.w	r4, #0
 8005ba6:	e026      	b.n	8005bf6 <UART_SetConfig+0x1136>
 8005ba8:	4b27      	ldr	r3, [pc, #156]	; (8005c48 <UART_SetConfig+0x1188>)
 8005baa:	f04f 0400 	mov.w	r4, #0
 8005bae:	e022      	b.n	8005bf6 <UART_SetConfig+0x1136>
 8005bb0:	4b26      	ldr	r3, [pc, #152]	; (8005c4c <UART_SetConfig+0x118c>)
 8005bb2:	f04f 0400 	mov.w	r4, #0
 8005bb6:	e01e      	b.n	8005bf6 <UART_SetConfig+0x1136>
 8005bb8:	4b25      	ldr	r3, [pc, #148]	; (8005c50 <UART_SetConfig+0x1190>)
 8005bba:	f04f 0400 	mov.w	r4, #0
 8005bbe:	e01a      	b.n	8005bf6 <UART_SetConfig+0x1136>
 8005bc0:	a419      	add	r4, pc, #100	; (adr r4, 8005c28 <UART_SetConfig+0x1168>)
 8005bc2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005bc6:	e016      	b.n	8005bf6 <UART_SetConfig+0x1136>
 8005bc8:	4b22      	ldr	r3, [pc, #136]	; (8005c54 <UART_SetConfig+0x1194>)
 8005bca:	f04f 0400 	mov.w	r4, #0
 8005bce:	e012      	b.n	8005bf6 <UART_SetConfig+0x1136>
 8005bd0:	4b21      	ldr	r3, [pc, #132]	; (8005c58 <UART_SetConfig+0x1198>)
 8005bd2:	f04f 0400 	mov.w	r4, #0
 8005bd6:	e00e      	b.n	8005bf6 <UART_SetConfig+0x1136>
 8005bd8:	a415      	add	r4, pc, #84	; (adr r4, 8005c30 <UART_SetConfig+0x1170>)
 8005bda:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005bde:	e00a      	b.n	8005bf6 <UART_SetConfig+0x1136>
 8005be0:	4b1e      	ldr	r3, [pc, #120]	; (8005c5c <UART_SetConfig+0x119c>)
 8005be2:	f04f 0400 	mov.w	r4, #0
 8005be6:	e006      	b.n	8005bf6 <UART_SetConfig+0x1136>
 8005be8:	4b1d      	ldr	r3, [pc, #116]	; (8005c60 <UART_SetConfig+0x11a0>)
 8005bea:	f04f 0401 	mov.w	r4, #1
 8005bee:	e002      	b.n	8005bf6 <UART_SetConfig+0x1136>
 8005bf0:	4b13      	ldr	r3, [pc, #76]	; (8005c40 <UART_SetConfig+0x1180>)
 8005bf2:	f04f 0403 	mov.w	r4, #3
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6852      	ldr	r2, [r2, #4]
 8005bfa:	0852      	lsrs	r2, r2, #1
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	eb13 0b01 	adds.w	fp, r3, r1
 8005c06:	eb44 0c02 	adc.w	ip, r4, r2
 8005c0a:	4658      	mov	r0, fp
 8005c0c:	4661      	mov	r1, ip
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f04f 0400 	mov.w	r4, #0
 8005c16:	461a      	mov	r2, r3
 8005c18:	4623      	mov	r3, r4
 8005c1a:	f7fa fb5d 	bl	80002d8 <__aeabi_uldivmod>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	460c      	mov	r4, r1
 8005c22:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005c24:	e122      	b.n	8005e6c <UART_SetConfig+0x13ac>
 8005c26:	bf00      	nop
 8005c28:	51615500 	.word	0x51615500
 8005c2c:	00000000 	.word	0x00000000
 8005c30:	a2c2aa00 	.word	0xa2c2aa00
 8005c34:	00000000 	.word	0x00000000
 8005c38:	58024400 	.word	0x58024400
 8005c3c:	03d09000 	.word	0x03d09000
 8005c40:	d0900000 	.word	0xd0900000
 8005c44:	07a12000 	.word	0x07a12000
 8005c48:	0f424000 	.word	0x0f424000
 8005c4c:	1e848000 	.word	0x1e848000
 8005c50:	3d090000 	.word	0x3d090000
 8005c54:	61a80000 	.word	0x61a80000
 8005c58:	7a120000 	.word	0x7a120000
 8005c5c:	f4240000 	.word	0xf4240000
 8005c60:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d05b      	beq.n	8005d24 <UART_SetConfig+0x1264>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d053      	beq.n	8005d1c <UART_SetConfig+0x125c>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d04b      	beq.n	8005d14 <UART_SetConfig+0x1254>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d043      	beq.n	8005d0c <UART_SetConfig+0x124c>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d03b      	beq.n	8005d04 <UART_SetConfig+0x1244>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2b05      	cmp	r3, #5
 8005c92:	d033      	beq.n	8005cfc <UART_SetConfig+0x123c>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	2b06      	cmp	r3, #6
 8005c9a:	d02b      	beq.n	8005cf4 <UART_SetConfig+0x1234>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b07      	cmp	r3, #7
 8005ca2:	d023      	beq.n	8005cec <UART_SetConfig+0x122c>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d01b      	beq.n	8005ce4 <UART_SetConfig+0x1224>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2b09      	cmp	r3, #9
 8005cb2:	d013      	beq.n	8005cdc <UART_SetConfig+0x121c>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	2b0a      	cmp	r3, #10
 8005cba:	d00b      	beq.n	8005cd4 <UART_SetConfig+0x1214>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	2b0b      	cmp	r3, #11
 8005cc2:	d103      	bne.n	8005ccc <UART_SetConfig+0x120c>
 8005cc4:	4bc0      	ldr	r3, [pc, #768]	; (8005fc8 <UART_SetConfig+0x1508>)
 8005cc6:	f04f 0400 	mov.w	r4, #0
 8005cca:	e02e      	b.n	8005d2a <UART_SetConfig+0x126a>
 8005ccc:	4bbf      	ldr	r3, [pc, #764]	; (8005fcc <UART_SetConfig+0x150c>)
 8005cce:	f04f 0400 	mov.w	r4, #0
 8005cd2:	e02a      	b.n	8005d2a <UART_SetConfig+0x126a>
 8005cd4:	4bbe      	ldr	r3, [pc, #760]	; (8005fd0 <UART_SetConfig+0x1510>)
 8005cd6:	f04f 0400 	mov.w	r4, #0
 8005cda:	e026      	b.n	8005d2a <UART_SetConfig+0x126a>
 8005cdc:	4bbd      	ldr	r3, [pc, #756]	; (8005fd4 <UART_SetConfig+0x1514>)
 8005cde:	f04f 0400 	mov.w	r4, #0
 8005ce2:	e022      	b.n	8005d2a <UART_SetConfig+0x126a>
 8005ce4:	4bbc      	ldr	r3, [pc, #752]	; (8005fd8 <UART_SetConfig+0x1518>)
 8005ce6:	f04f 0400 	mov.w	r4, #0
 8005cea:	e01e      	b.n	8005d2a <UART_SetConfig+0x126a>
 8005cec:	4bbb      	ldr	r3, [pc, #748]	; (8005fdc <UART_SetConfig+0x151c>)
 8005cee:	f04f 0400 	mov.w	r4, #0
 8005cf2:	e01a      	b.n	8005d2a <UART_SetConfig+0x126a>
 8005cf4:	a4b0      	add	r4, pc, #704	; (adr r4, 8005fb8 <UART_SetConfig+0x14f8>)
 8005cf6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005cfa:	e016      	b.n	8005d2a <UART_SetConfig+0x126a>
 8005cfc:	4bb8      	ldr	r3, [pc, #736]	; (8005fe0 <UART_SetConfig+0x1520>)
 8005cfe:	f04f 0400 	mov.w	r4, #0
 8005d02:	e012      	b.n	8005d2a <UART_SetConfig+0x126a>
 8005d04:	4bb7      	ldr	r3, [pc, #732]	; (8005fe4 <UART_SetConfig+0x1524>)
 8005d06:	f04f 0400 	mov.w	r4, #0
 8005d0a:	e00e      	b.n	8005d2a <UART_SetConfig+0x126a>
 8005d0c:	a4ac      	add	r4, pc, #688	; (adr r4, 8005fc0 <UART_SetConfig+0x1500>)
 8005d0e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005d12:	e00a      	b.n	8005d2a <UART_SetConfig+0x126a>
 8005d14:	4bb4      	ldr	r3, [pc, #720]	; (8005fe8 <UART_SetConfig+0x1528>)
 8005d16:	f04f 0400 	mov.w	r4, #0
 8005d1a:	e006      	b.n	8005d2a <UART_SetConfig+0x126a>
 8005d1c:	4bb3      	ldr	r3, [pc, #716]	; (8005fec <UART_SetConfig+0x152c>)
 8005d1e:	f04f 0400 	mov.w	r4, #0
 8005d22:	e002      	b.n	8005d2a <UART_SetConfig+0x126a>
 8005d24:	4ba9      	ldr	r3, [pc, #676]	; (8005fcc <UART_SetConfig+0x150c>)
 8005d26:	f04f 0400 	mov.w	r4, #0
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	6852      	ldr	r2, [r2, #4]
 8005d2e:	0852      	lsrs	r2, r2, #1
 8005d30:	4611      	mov	r1, r2
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	eb13 0b01 	adds.w	fp, r3, r1
 8005d3a:	eb44 0c02 	adc.w	ip, r4, r2
 8005d3e:	4658      	mov	r0, fp
 8005d40:	4661      	mov	r1, ip
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f04f 0400 	mov.w	r4, #0
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4623      	mov	r3, r4
 8005d4e:	f7fa fac3 	bl	80002d8 <__aeabi_uldivmod>
 8005d52:	4603      	mov	r3, r0
 8005d54:	460c      	mov	r4, r1
 8005d56:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d58:	e088      	b.n	8005e6c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d064      	beq.n	8005e2c <UART_SetConfig+0x136c>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d05b      	beq.n	8005e22 <UART_SetConfig+0x1362>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d052      	beq.n	8005e18 <UART_SetConfig+0x1358>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d04a      	beq.n	8005e10 <UART_SetConfig+0x1350>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d041      	beq.n	8005e06 <UART_SetConfig+0x1346>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	2b05      	cmp	r3, #5
 8005d88:	d039      	beq.n	8005dfe <UART_SetConfig+0x133e>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	2b06      	cmp	r3, #6
 8005d90:	d031      	beq.n	8005df6 <UART_SetConfig+0x1336>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2b07      	cmp	r3, #7
 8005d98:	d028      	beq.n	8005dec <UART_SetConfig+0x132c>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d01f      	beq.n	8005de2 <UART_SetConfig+0x1322>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	2b09      	cmp	r3, #9
 8005da8:	d016      	beq.n	8005dd8 <UART_SetConfig+0x1318>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	2b0a      	cmp	r3, #10
 8005db0:	d00d      	beq.n	8005dce <UART_SetConfig+0x130e>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	2b0b      	cmp	r3, #11
 8005db8:	d104      	bne.n	8005dc4 <UART_SetConfig+0x1304>
 8005dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dbe:	f04f 0400 	mov.w	r4, #0
 8005dc2:	e037      	b.n	8005e34 <UART_SetConfig+0x1374>
 8005dc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005dc8:	f04f 0400 	mov.w	r4, #0
 8005dcc:	e032      	b.n	8005e34 <UART_SetConfig+0x1374>
 8005dce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005dd2:	f04f 0400 	mov.w	r4, #0
 8005dd6:	e02d      	b.n	8005e34 <UART_SetConfig+0x1374>
 8005dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ddc:	f04f 0400 	mov.w	r4, #0
 8005de0:	e028      	b.n	8005e34 <UART_SetConfig+0x1374>
 8005de2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005de6:	f04f 0400 	mov.w	r4, #0
 8005dea:	e023      	b.n	8005e34 <UART_SetConfig+0x1374>
 8005dec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005df0:	f04f 0400 	mov.w	r4, #0
 8005df4:	e01e      	b.n	8005e34 <UART_SetConfig+0x1374>
 8005df6:	4b7e      	ldr	r3, [pc, #504]	; (8005ff0 <UART_SetConfig+0x1530>)
 8005df8:	f04f 0400 	mov.w	r4, #0
 8005dfc:	e01a      	b.n	8005e34 <UART_SetConfig+0x1374>
 8005dfe:	4b7d      	ldr	r3, [pc, #500]	; (8005ff4 <UART_SetConfig+0x1534>)
 8005e00:	f04f 0400 	mov.w	r4, #0
 8005e04:	e016      	b.n	8005e34 <UART_SetConfig+0x1374>
 8005e06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005e0a:	f04f 0400 	mov.w	r4, #0
 8005e0e:	e011      	b.n	8005e34 <UART_SetConfig+0x1374>
 8005e10:	4b79      	ldr	r3, [pc, #484]	; (8005ff8 <UART_SetConfig+0x1538>)
 8005e12:	f04f 0400 	mov.w	r4, #0
 8005e16:	e00d      	b.n	8005e34 <UART_SetConfig+0x1374>
 8005e18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e1c:	f04f 0400 	mov.w	r4, #0
 8005e20:	e008      	b.n	8005e34 <UART_SetConfig+0x1374>
 8005e22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e26:	f04f 0400 	mov.w	r4, #0
 8005e2a:	e003      	b.n	8005e34 <UART_SetConfig+0x1374>
 8005e2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005e30:	f04f 0400 	mov.w	r4, #0
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6852      	ldr	r2, [r2, #4]
 8005e38:	0852      	lsrs	r2, r2, #1
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	eb13 0b01 	adds.w	fp, r3, r1
 8005e44:	eb44 0c02 	adc.w	ip, r4, r2
 8005e48:	4658      	mov	r0, fp
 8005e4a:	4661      	mov	r1, ip
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f04f 0400 	mov.w	r4, #0
 8005e54:	461a      	mov	r2, r3
 8005e56:	4623      	mov	r3, r4
 8005e58:	f7fa fa3e 	bl	80002d8 <__aeabi_uldivmod>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005e62:	e003      	b.n	8005e6c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8005e6a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e72:	d309      	bcc.n	8005e88 <UART_SetConfig+0x13c8>
 8005e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e7a:	d205      	bcs.n	8005e88 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e82:	60da      	str	r2, [r3, #12]
 8005e84:	f000 bf85 	b.w	8006d92 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8e:	f000 bf80 	b.w	8006d92 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e9a:	f040 83da 	bne.w	8006652 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8005e9e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ea2:	2b40      	cmp	r3, #64	; 0x40
 8005ea4:	f200 83b3 	bhi.w	800660e <UART_SetConfig+0x1b4e>
 8005ea8:	a201      	add	r2, pc, #4	; (adr r2, 8005eb0 <UART_SetConfig+0x13f0>)
 8005eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eae:	bf00      	nop
 8005eb0:	08005ffd 	.word	0x08005ffd
 8005eb4:	080060b5 	.word	0x080060b5
 8005eb8:	0800660f 	.word	0x0800660f
 8005ebc:	0800660f 	.word	0x0800660f
 8005ec0:	0800616d 	.word	0x0800616d
 8005ec4:	0800660f 	.word	0x0800660f
 8005ec8:	0800660f 	.word	0x0800660f
 8005ecc:	0800660f 	.word	0x0800660f
 8005ed0:	08006229 	.word	0x08006229
 8005ed4:	0800660f 	.word	0x0800660f
 8005ed8:	0800660f 	.word	0x0800660f
 8005edc:	0800660f 	.word	0x0800660f
 8005ee0:	0800660f 	.word	0x0800660f
 8005ee4:	0800660f 	.word	0x0800660f
 8005ee8:	0800660f 	.word	0x0800660f
 8005eec:	0800660f 	.word	0x0800660f
 8005ef0:	080062e5 	.word	0x080062e5
 8005ef4:	0800660f 	.word	0x0800660f
 8005ef8:	0800660f 	.word	0x0800660f
 8005efc:	0800660f 	.word	0x0800660f
 8005f00:	0800660f 	.word	0x0800660f
 8005f04:	0800660f 	.word	0x0800660f
 8005f08:	0800660f 	.word	0x0800660f
 8005f0c:	0800660f 	.word	0x0800660f
 8005f10:	0800660f 	.word	0x0800660f
 8005f14:	0800660f 	.word	0x0800660f
 8005f18:	0800660f 	.word	0x0800660f
 8005f1c:	0800660f 	.word	0x0800660f
 8005f20:	0800660f 	.word	0x0800660f
 8005f24:	0800660f 	.word	0x0800660f
 8005f28:	0800660f 	.word	0x0800660f
 8005f2c:	0800660f 	.word	0x0800660f
 8005f30:	08006457 	.word	0x08006457
 8005f34:	0800660f 	.word	0x0800660f
 8005f38:	0800660f 	.word	0x0800660f
 8005f3c:	0800660f 	.word	0x0800660f
 8005f40:	0800660f 	.word	0x0800660f
 8005f44:	0800660f 	.word	0x0800660f
 8005f48:	0800660f 	.word	0x0800660f
 8005f4c:	0800660f 	.word	0x0800660f
 8005f50:	0800660f 	.word	0x0800660f
 8005f54:	0800660f 	.word	0x0800660f
 8005f58:	0800660f 	.word	0x0800660f
 8005f5c:	0800660f 	.word	0x0800660f
 8005f60:	0800660f 	.word	0x0800660f
 8005f64:	0800660f 	.word	0x0800660f
 8005f68:	0800660f 	.word	0x0800660f
 8005f6c:	0800660f 	.word	0x0800660f
 8005f70:	0800660f 	.word	0x0800660f
 8005f74:	0800660f 	.word	0x0800660f
 8005f78:	0800660f 	.word	0x0800660f
 8005f7c:	0800660f 	.word	0x0800660f
 8005f80:	0800660f 	.word	0x0800660f
 8005f84:	0800660f 	.word	0x0800660f
 8005f88:	0800660f 	.word	0x0800660f
 8005f8c:	0800660f 	.word	0x0800660f
 8005f90:	0800660f 	.word	0x0800660f
 8005f94:	0800660f 	.word	0x0800660f
 8005f98:	0800660f 	.word	0x0800660f
 8005f9c:	0800660f 	.word	0x0800660f
 8005fa0:	0800660f 	.word	0x0800660f
 8005fa4:	0800660f 	.word	0x0800660f
 8005fa8:	0800660f 	.word	0x0800660f
 8005fac:	0800660f 	.word	0x0800660f
 8005fb0:	0800654d 	.word	0x0800654d
 8005fb4:	f3af 8000 	nop.w
 8005fb8:	05161500 	.word	0x05161500
 8005fbc:	00000000 	.word	0x00000000
 8005fc0:	0a2c2a00 	.word	0x0a2c2a00
 8005fc4:	00000000 	.word	0x00000000
 8005fc8:	003d0900 	.word	0x003d0900
 8005fcc:	3d090000 	.word	0x3d090000
 8005fd0:	007a1200 	.word	0x007a1200
 8005fd4:	00f42400 	.word	0x00f42400
 8005fd8:	01e84800 	.word	0x01e84800
 8005fdc:	03d09000 	.word	0x03d09000
 8005fe0:	061a8000 	.word	0x061a8000
 8005fe4:	07a12000 	.word	0x07a12000
 8005fe8:	0f424000 	.word	0x0f424000
 8005fec:	1e848000 	.word	0x1e848000
 8005ff0:	000aaa00 	.word	0x000aaa00
 8005ff4:	000ccc00 	.word	0x000ccc00
 8005ff8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ffc:	f7fd f9f4 	bl	80033e8 <HAL_RCC_GetPCLK1Freq>
 8006000:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	2b00      	cmp	r3, #0
 8006008:	d044      	beq.n	8006094 <UART_SetConfig+0x15d4>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	2b01      	cmp	r3, #1
 8006010:	d03e      	beq.n	8006090 <UART_SetConfig+0x15d0>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	2b02      	cmp	r3, #2
 8006018:	d038      	beq.n	800608c <UART_SetConfig+0x15cc>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	2b03      	cmp	r3, #3
 8006020:	d032      	beq.n	8006088 <UART_SetConfig+0x15c8>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	2b04      	cmp	r3, #4
 8006028:	d02c      	beq.n	8006084 <UART_SetConfig+0x15c4>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	2b05      	cmp	r3, #5
 8006030:	d026      	beq.n	8006080 <UART_SetConfig+0x15c0>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	2b06      	cmp	r3, #6
 8006038:	d020      	beq.n	800607c <UART_SetConfig+0x15bc>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	2b07      	cmp	r3, #7
 8006040:	d01a      	beq.n	8006078 <UART_SetConfig+0x15b8>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2b08      	cmp	r3, #8
 8006048:	d014      	beq.n	8006074 <UART_SetConfig+0x15b4>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	2b09      	cmp	r3, #9
 8006050:	d00e      	beq.n	8006070 <UART_SetConfig+0x15b0>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	2b0a      	cmp	r3, #10
 8006058:	d008      	beq.n	800606c <UART_SetConfig+0x15ac>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	2b0b      	cmp	r3, #11
 8006060:	d102      	bne.n	8006068 <UART_SetConfig+0x15a8>
 8006062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006066:	e016      	b.n	8006096 <UART_SetConfig+0x15d6>
 8006068:	2301      	movs	r3, #1
 800606a:	e014      	b.n	8006096 <UART_SetConfig+0x15d6>
 800606c:	2380      	movs	r3, #128	; 0x80
 800606e:	e012      	b.n	8006096 <UART_SetConfig+0x15d6>
 8006070:	2340      	movs	r3, #64	; 0x40
 8006072:	e010      	b.n	8006096 <UART_SetConfig+0x15d6>
 8006074:	2320      	movs	r3, #32
 8006076:	e00e      	b.n	8006096 <UART_SetConfig+0x15d6>
 8006078:	2310      	movs	r3, #16
 800607a:	e00c      	b.n	8006096 <UART_SetConfig+0x15d6>
 800607c:	230c      	movs	r3, #12
 800607e:	e00a      	b.n	8006096 <UART_SetConfig+0x15d6>
 8006080:	230a      	movs	r3, #10
 8006082:	e008      	b.n	8006096 <UART_SetConfig+0x15d6>
 8006084:	2308      	movs	r3, #8
 8006086:	e006      	b.n	8006096 <UART_SetConfig+0x15d6>
 8006088:	2306      	movs	r3, #6
 800608a:	e004      	b.n	8006096 <UART_SetConfig+0x15d6>
 800608c:	2304      	movs	r3, #4
 800608e:	e002      	b.n	8006096 <UART_SetConfig+0x15d6>
 8006090:	2302      	movs	r3, #2
 8006092:	e000      	b.n	8006096 <UART_SetConfig+0x15d6>
 8006094:	2301      	movs	r3, #1
 8006096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006098:	fbb2 f3f3 	udiv	r3, r2, r3
 800609c:	005a      	lsls	r2, r3, #1
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	085b      	lsrs	r3, r3, #1
 80060a4:	441a      	add	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060b2:	e2b0      	b.n	8006616 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060b4:	f7fd f9ae 	bl	8003414 <HAL_RCC_GetPCLK2Freq>
 80060b8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d044      	beq.n	800614c <UART_SetConfig+0x168c>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d03e      	beq.n	8006148 <UART_SetConfig+0x1688>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d038      	beq.n	8006144 <UART_SetConfig+0x1684>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d032      	beq.n	8006140 <UART_SetConfig+0x1680>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	2b04      	cmp	r3, #4
 80060e0:	d02c      	beq.n	800613c <UART_SetConfig+0x167c>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	2b05      	cmp	r3, #5
 80060e8:	d026      	beq.n	8006138 <UART_SetConfig+0x1678>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	2b06      	cmp	r3, #6
 80060f0:	d020      	beq.n	8006134 <UART_SetConfig+0x1674>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	2b07      	cmp	r3, #7
 80060f8:	d01a      	beq.n	8006130 <UART_SetConfig+0x1670>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d014      	beq.n	800612c <UART_SetConfig+0x166c>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	2b09      	cmp	r3, #9
 8006108:	d00e      	beq.n	8006128 <UART_SetConfig+0x1668>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	2b0a      	cmp	r3, #10
 8006110:	d008      	beq.n	8006124 <UART_SetConfig+0x1664>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	2b0b      	cmp	r3, #11
 8006118:	d102      	bne.n	8006120 <UART_SetConfig+0x1660>
 800611a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800611e:	e016      	b.n	800614e <UART_SetConfig+0x168e>
 8006120:	2301      	movs	r3, #1
 8006122:	e014      	b.n	800614e <UART_SetConfig+0x168e>
 8006124:	2380      	movs	r3, #128	; 0x80
 8006126:	e012      	b.n	800614e <UART_SetConfig+0x168e>
 8006128:	2340      	movs	r3, #64	; 0x40
 800612a:	e010      	b.n	800614e <UART_SetConfig+0x168e>
 800612c:	2320      	movs	r3, #32
 800612e:	e00e      	b.n	800614e <UART_SetConfig+0x168e>
 8006130:	2310      	movs	r3, #16
 8006132:	e00c      	b.n	800614e <UART_SetConfig+0x168e>
 8006134:	230c      	movs	r3, #12
 8006136:	e00a      	b.n	800614e <UART_SetConfig+0x168e>
 8006138:	230a      	movs	r3, #10
 800613a:	e008      	b.n	800614e <UART_SetConfig+0x168e>
 800613c:	2308      	movs	r3, #8
 800613e:	e006      	b.n	800614e <UART_SetConfig+0x168e>
 8006140:	2306      	movs	r3, #6
 8006142:	e004      	b.n	800614e <UART_SetConfig+0x168e>
 8006144:	2304      	movs	r3, #4
 8006146:	e002      	b.n	800614e <UART_SetConfig+0x168e>
 8006148:	2302      	movs	r3, #2
 800614a:	e000      	b.n	800614e <UART_SetConfig+0x168e>
 800614c:	2301      	movs	r3, #1
 800614e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006150:	fbb2 f3f3 	udiv	r3, r2, r3
 8006154:	005a      	lsls	r2, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	085b      	lsrs	r3, r3, #1
 800615c:	441a      	add	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	fbb2 f3f3 	udiv	r3, r2, r3
 8006166:	b29b      	uxth	r3, r3
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800616a:	e254      	b.n	8006616 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800616c:	f107 0318 	add.w	r3, r7, #24
 8006170:	4618      	mov	r0, r3
 8006172:	f7fe f859 	bl	8004228 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006176:	69fa      	ldr	r2, [r7, #28]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	2b00      	cmp	r3, #0
 800617e:	d044      	beq.n	800620a <UART_SetConfig+0x174a>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	2b01      	cmp	r3, #1
 8006186:	d03e      	beq.n	8006206 <UART_SetConfig+0x1746>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	2b02      	cmp	r3, #2
 800618e:	d038      	beq.n	8006202 <UART_SetConfig+0x1742>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	2b03      	cmp	r3, #3
 8006196:	d032      	beq.n	80061fe <UART_SetConfig+0x173e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	2b04      	cmp	r3, #4
 800619e:	d02c      	beq.n	80061fa <UART_SetConfig+0x173a>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	2b05      	cmp	r3, #5
 80061a6:	d026      	beq.n	80061f6 <UART_SetConfig+0x1736>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	2b06      	cmp	r3, #6
 80061ae:	d020      	beq.n	80061f2 <UART_SetConfig+0x1732>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	2b07      	cmp	r3, #7
 80061b6:	d01a      	beq.n	80061ee <UART_SetConfig+0x172e>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d014      	beq.n	80061ea <UART_SetConfig+0x172a>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	2b09      	cmp	r3, #9
 80061c6:	d00e      	beq.n	80061e6 <UART_SetConfig+0x1726>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	2b0a      	cmp	r3, #10
 80061ce:	d008      	beq.n	80061e2 <UART_SetConfig+0x1722>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	2b0b      	cmp	r3, #11
 80061d6:	d102      	bne.n	80061de <UART_SetConfig+0x171e>
 80061d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061dc:	e016      	b.n	800620c <UART_SetConfig+0x174c>
 80061de:	2301      	movs	r3, #1
 80061e0:	e014      	b.n	800620c <UART_SetConfig+0x174c>
 80061e2:	2380      	movs	r3, #128	; 0x80
 80061e4:	e012      	b.n	800620c <UART_SetConfig+0x174c>
 80061e6:	2340      	movs	r3, #64	; 0x40
 80061e8:	e010      	b.n	800620c <UART_SetConfig+0x174c>
 80061ea:	2320      	movs	r3, #32
 80061ec:	e00e      	b.n	800620c <UART_SetConfig+0x174c>
 80061ee:	2310      	movs	r3, #16
 80061f0:	e00c      	b.n	800620c <UART_SetConfig+0x174c>
 80061f2:	230c      	movs	r3, #12
 80061f4:	e00a      	b.n	800620c <UART_SetConfig+0x174c>
 80061f6:	230a      	movs	r3, #10
 80061f8:	e008      	b.n	800620c <UART_SetConfig+0x174c>
 80061fa:	2308      	movs	r3, #8
 80061fc:	e006      	b.n	800620c <UART_SetConfig+0x174c>
 80061fe:	2306      	movs	r3, #6
 8006200:	e004      	b.n	800620c <UART_SetConfig+0x174c>
 8006202:	2304      	movs	r3, #4
 8006204:	e002      	b.n	800620c <UART_SetConfig+0x174c>
 8006206:	2302      	movs	r3, #2
 8006208:	e000      	b.n	800620c <UART_SetConfig+0x174c>
 800620a:	2301      	movs	r3, #1
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	005a      	lsls	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	085b      	lsrs	r3, r3, #1
 8006218:	441a      	add	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006222:	b29b      	uxth	r3, r3
 8006224:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006226:	e1f6      	b.n	8006616 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006228:	f107 030c 	add.w	r3, r7, #12
 800622c:	4618      	mov	r0, r3
 800622e:	f7fe f947 	bl	80044c0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	2b00      	cmp	r3, #0
 800623a:	d044      	beq.n	80062c6 <UART_SetConfig+0x1806>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	2b01      	cmp	r3, #1
 8006242:	d03e      	beq.n	80062c2 <UART_SetConfig+0x1802>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2b02      	cmp	r3, #2
 800624a:	d038      	beq.n	80062be <UART_SetConfig+0x17fe>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	2b03      	cmp	r3, #3
 8006252:	d032      	beq.n	80062ba <UART_SetConfig+0x17fa>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	2b04      	cmp	r3, #4
 800625a:	d02c      	beq.n	80062b6 <UART_SetConfig+0x17f6>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	2b05      	cmp	r3, #5
 8006262:	d026      	beq.n	80062b2 <UART_SetConfig+0x17f2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	2b06      	cmp	r3, #6
 800626a:	d020      	beq.n	80062ae <UART_SetConfig+0x17ee>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	2b07      	cmp	r3, #7
 8006272:	d01a      	beq.n	80062aa <UART_SetConfig+0x17ea>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	2b08      	cmp	r3, #8
 800627a:	d014      	beq.n	80062a6 <UART_SetConfig+0x17e6>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	2b09      	cmp	r3, #9
 8006282:	d00e      	beq.n	80062a2 <UART_SetConfig+0x17e2>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	2b0a      	cmp	r3, #10
 800628a:	d008      	beq.n	800629e <UART_SetConfig+0x17de>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	2b0b      	cmp	r3, #11
 8006292:	d102      	bne.n	800629a <UART_SetConfig+0x17da>
 8006294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006298:	e016      	b.n	80062c8 <UART_SetConfig+0x1808>
 800629a:	2301      	movs	r3, #1
 800629c:	e014      	b.n	80062c8 <UART_SetConfig+0x1808>
 800629e:	2380      	movs	r3, #128	; 0x80
 80062a0:	e012      	b.n	80062c8 <UART_SetConfig+0x1808>
 80062a2:	2340      	movs	r3, #64	; 0x40
 80062a4:	e010      	b.n	80062c8 <UART_SetConfig+0x1808>
 80062a6:	2320      	movs	r3, #32
 80062a8:	e00e      	b.n	80062c8 <UART_SetConfig+0x1808>
 80062aa:	2310      	movs	r3, #16
 80062ac:	e00c      	b.n	80062c8 <UART_SetConfig+0x1808>
 80062ae:	230c      	movs	r3, #12
 80062b0:	e00a      	b.n	80062c8 <UART_SetConfig+0x1808>
 80062b2:	230a      	movs	r3, #10
 80062b4:	e008      	b.n	80062c8 <UART_SetConfig+0x1808>
 80062b6:	2308      	movs	r3, #8
 80062b8:	e006      	b.n	80062c8 <UART_SetConfig+0x1808>
 80062ba:	2306      	movs	r3, #6
 80062bc:	e004      	b.n	80062c8 <UART_SetConfig+0x1808>
 80062be:	2304      	movs	r3, #4
 80062c0:	e002      	b.n	80062c8 <UART_SetConfig+0x1808>
 80062c2:	2302      	movs	r3, #2
 80062c4:	e000      	b.n	80062c8 <UART_SetConfig+0x1808>
 80062c6:	2301      	movs	r3, #1
 80062c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062cc:	005a      	lsls	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	085b      	lsrs	r3, r3, #1
 80062d4:	441a      	add	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	fbb2 f3f3 	udiv	r3, r2, r3
 80062de:	b29b      	uxth	r3, r3
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062e2:	e198      	b.n	8006616 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062e4:	4b87      	ldr	r3, [pc, #540]	; (8006504 <UART_SetConfig+0x1a44>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d05e      	beq.n	80063ae <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f0:	4b84      	ldr	r3, [pc, #528]	; (8006504 <UART_SetConfig+0x1a44>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	08db      	lsrs	r3, r3, #3
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	4a83      	ldr	r2, [pc, #524]	; (8006508 <UART_SetConfig+0x1a48>)
 80062fc:	40da      	lsrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	2b00      	cmp	r3, #0
 8006304:	d044      	beq.n	8006390 <UART_SetConfig+0x18d0>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	2b01      	cmp	r3, #1
 800630c:	d03e      	beq.n	800638c <UART_SetConfig+0x18cc>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	2b02      	cmp	r3, #2
 8006314:	d038      	beq.n	8006388 <UART_SetConfig+0x18c8>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	2b03      	cmp	r3, #3
 800631c:	d032      	beq.n	8006384 <UART_SetConfig+0x18c4>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	2b04      	cmp	r3, #4
 8006324:	d02c      	beq.n	8006380 <UART_SetConfig+0x18c0>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	2b05      	cmp	r3, #5
 800632c:	d026      	beq.n	800637c <UART_SetConfig+0x18bc>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	2b06      	cmp	r3, #6
 8006334:	d020      	beq.n	8006378 <UART_SetConfig+0x18b8>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	2b07      	cmp	r3, #7
 800633c:	d01a      	beq.n	8006374 <UART_SetConfig+0x18b4>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	2b08      	cmp	r3, #8
 8006344:	d014      	beq.n	8006370 <UART_SetConfig+0x18b0>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	2b09      	cmp	r3, #9
 800634c:	d00e      	beq.n	800636c <UART_SetConfig+0x18ac>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	2b0a      	cmp	r3, #10
 8006354:	d008      	beq.n	8006368 <UART_SetConfig+0x18a8>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	2b0b      	cmp	r3, #11
 800635c:	d102      	bne.n	8006364 <UART_SetConfig+0x18a4>
 800635e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006362:	e016      	b.n	8006392 <UART_SetConfig+0x18d2>
 8006364:	2301      	movs	r3, #1
 8006366:	e014      	b.n	8006392 <UART_SetConfig+0x18d2>
 8006368:	2380      	movs	r3, #128	; 0x80
 800636a:	e012      	b.n	8006392 <UART_SetConfig+0x18d2>
 800636c:	2340      	movs	r3, #64	; 0x40
 800636e:	e010      	b.n	8006392 <UART_SetConfig+0x18d2>
 8006370:	2320      	movs	r3, #32
 8006372:	e00e      	b.n	8006392 <UART_SetConfig+0x18d2>
 8006374:	2310      	movs	r3, #16
 8006376:	e00c      	b.n	8006392 <UART_SetConfig+0x18d2>
 8006378:	230c      	movs	r3, #12
 800637a:	e00a      	b.n	8006392 <UART_SetConfig+0x18d2>
 800637c:	230a      	movs	r3, #10
 800637e:	e008      	b.n	8006392 <UART_SetConfig+0x18d2>
 8006380:	2308      	movs	r3, #8
 8006382:	e006      	b.n	8006392 <UART_SetConfig+0x18d2>
 8006384:	2306      	movs	r3, #6
 8006386:	e004      	b.n	8006392 <UART_SetConfig+0x18d2>
 8006388:	2304      	movs	r3, #4
 800638a:	e002      	b.n	8006392 <UART_SetConfig+0x18d2>
 800638c:	2302      	movs	r3, #2
 800638e:	e000      	b.n	8006392 <UART_SetConfig+0x18d2>
 8006390:	2301      	movs	r3, #1
 8006392:	fbb2 f3f3 	udiv	r3, r2, r3
 8006396:	005a      	lsls	r2, r3, #1
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	085b      	lsrs	r3, r3, #1
 800639e:	441a      	add	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80063ac:	e133      	b.n	8006616 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d043      	beq.n	800643e <UART_SetConfig+0x197e>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d03d      	beq.n	800643a <UART_SetConfig+0x197a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d037      	beq.n	8006436 <UART_SetConfig+0x1976>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d031      	beq.n	8006432 <UART_SetConfig+0x1972>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d02b      	beq.n	800642e <UART_SetConfig+0x196e>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	2b05      	cmp	r3, #5
 80063dc:	d025      	beq.n	800642a <UART_SetConfig+0x196a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	2b06      	cmp	r3, #6
 80063e4:	d01f      	beq.n	8006426 <UART_SetConfig+0x1966>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	2b07      	cmp	r3, #7
 80063ec:	d019      	beq.n	8006422 <UART_SetConfig+0x1962>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	2b08      	cmp	r3, #8
 80063f4:	d013      	beq.n	800641e <UART_SetConfig+0x195e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	2b09      	cmp	r3, #9
 80063fc:	d00d      	beq.n	800641a <UART_SetConfig+0x195a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	2b0a      	cmp	r3, #10
 8006404:	d007      	beq.n	8006416 <UART_SetConfig+0x1956>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	2b0b      	cmp	r3, #11
 800640c:	d101      	bne.n	8006412 <UART_SetConfig+0x1952>
 800640e:	4b3f      	ldr	r3, [pc, #252]	; (800650c <UART_SetConfig+0x1a4c>)
 8006410:	e016      	b.n	8006440 <UART_SetConfig+0x1980>
 8006412:	4b3f      	ldr	r3, [pc, #252]	; (8006510 <UART_SetConfig+0x1a50>)
 8006414:	e014      	b.n	8006440 <UART_SetConfig+0x1980>
 8006416:	4b3f      	ldr	r3, [pc, #252]	; (8006514 <UART_SetConfig+0x1a54>)
 8006418:	e012      	b.n	8006440 <UART_SetConfig+0x1980>
 800641a:	4b3f      	ldr	r3, [pc, #252]	; (8006518 <UART_SetConfig+0x1a58>)
 800641c:	e010      	b.n	8006440 <UART_SetConfig+0x1980>
 800641e:	4b3f      	ldr	r3, [pc, #252]	; (800651c <UART_SetConfig+0x1a5c>)
 8006420:	e00e      	b.n	8006440 <UART_SetConfig+0x1980>
 8006422:	4b3f      	ldr	r3, [pc, #252]	; (8006520 <UART_SetConfig+0x1a60>)
 8006424:	e00c      	b.n	8006440 <UART_SetConfig+0x1980>
 8006426:	4b3f      	ldr	r3, [pc, #252]	; (8006524 <UART_SetConfig+0x1a64>)
 8006428:	e00a      	b.n	8006440 <UART_SetConfig+0x1980>
 800642a:	4b3f      	ldr	r3, [pc, #252]	; (8006528 <UART_SetConfig+0x1a68>)
 800642c:	e008      	b.n	8006440 <UART_SetConfig+0x1980>
 800642e:	4b3f      	ldr	r3, [pc, #252]	; (800652c <UART_SetConfig+0x1a6c>)
 8006430:	e006      	b.n	8006440 <UART_SetConfig+0x1980>
 8006432:	4b3f      	ldr	r3, [pc, #252]	; (8006530 <UART_SetConfig+0x1a70>)
 8006434:	e004      	b.n	8006440 <UART_SetConfig+0x1980>
 8006436:	4b3f      	ldr	r3, [pc, #252]	; (8006534 <UART_SetConfig+0x1a74>)
 8006438:	e002      	b.n	8006440 <UART_SetConfig+0x1980>
 800643a:	4b33      	ldr	r3, [pc, #204]	; (8006508 <UART_SetConfig+0x1a48>)
 800643c:	e000      	b.n	8006440 <UART_SetConfig+0x1980>
 800643e:	4b34      	ldr	r3, [pc, #208]	; (8006510 <UART_SetConfig+0x1a50>)
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6852      	ldr	r2, [r2, #4]
 8006444:	0852      	lsrs	r2, r2, #1
 8006446:	441a      	add	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006450:	b29b      	uxth	r3, r3
 8006452:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006454:	e0df      	b.n	8006616 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	2b00      	cmp	r3, #0
 800645c:	d045      	beq.n	80064ea <UART_SetConfig+0x1a2a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	2b01      	cmp	r3, #1
 8006464:	d03f      	beq.n	80064e6 <UART_SetConfig+0x1a26>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	2b02      	cmp	r3, #2
 800646c:	d039      	beq.n	80064e2 <UART_SetConfig+0x1a22>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	2b03      	cmp	r3, #3
 8006474:	d033      	beq.n	80064de <UART_SetConfig+0x1a1e>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	2b04      	cmp	r3, #4
 800647c:	d02d      	beq.n	80064da <UART_SetConfig+0x1a1a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	2b05      	cmp	r3, #5
 8006484:	d027      	beq.n	80064d6 <UART_SetConfig+0x1a16>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	2b06      	cmp	r3, #6
 800648c:	d021      	beq.n	80064d2 <UART_SetConfig+0x1a12>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	2b07      	cmp	r3, #7
 8006494:	d01b      	beq.n	80064ce <UART_SetConfig+0x1a0e>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	2b08      	cmp	r3, #8
 800649c:	d015      	beq.n	80064ca <UART_SetConfig+0x1a0a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	2b09      	cmp	r3, #9
 80064a4:	d00f      	beq.n	80064c6 <UART_SetConfig+0x1a06>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	2b0a      	cmp	r3, #10
 80064ac:	d008      	beq.n	80064c0 <UART_SetConfig+0x1a00>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	2b0b      	cmp	r3, #11
 80064b4:	d102      	bne.n	80064bc <UART_SetConfig+0x19fc>
 80064b6:	f647 2312 	movw	r3, #31250	; 0x7a12
 80064ba:	e017      	b.n	80064ec <UART_SetConfig+0x1a2c>
 80064bc:	4b18      	ldr	r3, [pc, #96]	; (8006520 <UART_SetConfig+0x1a60>)
 80064be:	e015      	b.n	80064ec <UART_SetConfig+0x1a2c>
 80064c0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80064c4:	e012      	b.n	80064ec <UART_SetConfig+0x1a2c>
 80064c6:	4b1c      	ldr	r3, [pc, #112]	; (8006538 <UART_SetConfig+0x1a78>)
 80064c8:	e010      	b.n	80064ec <UART_SetConfig+0x1a2c>
 80064ca:	4b1c      	ldr	r3, [pc, #112]	; (800653c <UART_SetConfig+0x1a7c>)
 80064cc:	e00e      	b.n	80064ec <UART_SetConfig+0x1a2c>
 80064ce:	4b0f      	ldr	r3, [pc, #60]	; (800650c <UART_SetConfig+0x1a4c>)
 80064d0:	e00c      	b.n	80064ec <UART_SetConfig+0x1a2c>
 80064d2:	4b1b      	ldr	r3, [pc, #108]	; (8006540 <UART_SetConfig+0x1a80>)
 80064d4:	e00a      	b.n	80064ec <UART_SetConfig+0x1a2c>
 80064d6:	4b1b      	ldr	r3, [pc, #108]	; (8006544 <UART_SetConfig+0x1a84>)
 80064d8:	e008      	b.n	80064ec <UART_SetConfig+0x1a2c>
 80064da:	4b0e      	ldr	r3, [pc, #56]	; (8006514 <UART_SetConfig+0x1a54>)
 80064dc:	e006      	b.n	80064ec <UART_SetConfig+0x1a2c>
 80064de:	4b1a      	ldr	r3, [pc, #104]	; (8006548 <UART_SetConfig+0x1a88>)
 80064e0:	e004      	b.n	80064ec <UART_SetConfig+0x1a2c>
 80064e2:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <UART_SetConfig+0x1a58>)
 80064e4:	e002      	b.n	80064ec <UART_SetConfig+0x1a2c>
 80064e6:	4b0d      	ldr	r3, [pc, #52]	; (800651c <UART_SetConfig+0x1a5c>)
 80064e8:	e000      	b.n	80064ec <UART_SetConfig+0x1a2c>
 80064ea:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <UART_SetConfig+0x1a60>)
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6852      	ldr	r2, [r2, #4]
 80064f0:	0852      	lsrs	r2, r2, #1
 80064f2:	441a      	add	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006500:	e089      	b.n	8006616 <UART_SetConfig+0x1b56>
 8006502:	bf00      	nop
 8006504:	58024400 	.word	0x58024400
 8006508:	03d09000 	.word	0x03d09000
 800650c:	0007a120 	.word	0x0007a120
 8006510:	07a12000 	.word	0x07a12000
 8006514:	000f4240 	.word	0x000f4240
 8006518:	001e8480 	.word	0x001e8480
 800651c:	003d0900 	.word	0x003d0900
 8006520:	007a1200 	.word	0x007a1200
 8006524:	00a2c2aa 	.word	0x00a2c2aa
 8006528:	00c35000 	.word	0x00c35000
 800652c:	00f42400 	.word	0x00f42400
 8006530:	01458554 	.word	0x01458554
 8006534:	01e84800 	.word	0x01e84800
 8006538:	0001e848 	.word	0x0001e848
 800653c:	0003d090 	.word	0x0003d090
 8006540:	000a2c2a 	.word	0x000a2c2a
 8006544:	000c3500 	.word	0x000c3500
 8006548:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	2b00      	cmp	r3, #0
 8006552:	d04f      	beq.n	80065f4 <UART_SetConfig+0x1b34>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	2b01      	cmp	r3, #1
 800655a:	d048      	beq.n	80065ee <UART_SetConfig+0x1b2e>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	2b02      	cmp	r3, #2
 8006562:	d041      	beq.n	80065e8 <UART_SetConfig+0x1b28>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	2b03      	cmp	r3, #3
 800656a:	d03a      	beq.n	80065e2 <UART_SetConfig+0x1b22>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	2b04      	cmp	r3, #4
 8006572:	d033      	beq.n	80065dc <UART_SetConfig+0x1b1c>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	2b05      	cmp	r3, #5
 800657a:	d02c      	beq.n	80065d6 <UART_SetConfig+0x1b16>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	2b06      	cmp	r3, #6
 8006582:	d025      	beq.n	80065d0 <UART_SetConfig+0x1b10>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	2b07      	cmp	r3, #7
 800658a:	d01e      	beq.n	80065ca <UART_SetConfig+0x1b0a>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	2b08      	cmp	r3, #8
 8006592:	d017      	beq.n	80065c4 <UART_SetConfig+0x1b04>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	2b09      	cmp	r3, #9
 800659a:	d010      	beq.n	80065be <UART_SetConfig+0x1afe>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	2b0a      	cmp	r3, #10
 80065a2:	d009      	beq.n	80065b8 <UART_SetConfig+0x1af8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	2b0b      	cmp	r3, #11
 80065aa:	d102      	bne.n	80065b2 <UART_SetConfig+0x1af2>
 80065ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065b0:	e022      	b.n	80065f8 <UART_SetConfig+0x1b38>
 80065b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80065b6:	e01f      	b.n	80065f8 <UART_SetConfig+0x1b38>
 80065b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065bc:	e01c      	b.n	80065f8 <UART_SetConfig+0x1b38>
 80065be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065c2:	e019      	b.n	80065f8 <UART_SetConfig+0x1b38>
 80065c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065c8:	e016      	b.n	80065f8 <UART_SetConfig+0x1b38>
 80065ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065ce:	e013      	b.n	80065f8 <UART_SetConfig+0x1b38>
 80065d0:	f241 5354 	movw	r3, #5460	; 0x1554
 80065d4:	e010      	b.n	80065f8 <UART_SetConfig+0x1b38>
 80065d6:	f641 1398 	movw	r3, #6552	; 0x1998
 80065da:	e00d      	b.n	80065f8 <UART_SetConfig+0x1b38>
 80065dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065e0:	e00a      	b.n	80065f8 <UART_SetConfig+0x1b38>
 80065e2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80065e6:	e007      	b.n	80065f8 <UART_SetConfig+0x1b38>
 80065e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065ec:	e004      	b.n	80065f8 <UART_SetConfig+0x1b38>
 80065ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065f2:	e001      	b.n	80065f8 <UART_SetConfig+0x1b38>
 80065f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6852      	ldr	r2, [r2, #4]
 80065fc:	0852      	lsrs	r2, r2, #1
 80065fe:	441a      	add	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	fbb2 f3f3 	udiv	r3, r2, r3
 8006608:	b29b      	uxth	r3, r3
 800660a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800660c:	e003      	b.n	8006616 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006614:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006618:	2b0f      	cmp	r3, #15
 800661a:	d916      	bls.n	800664a <UART_SetConfig+0x1b8a>
 800661c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006622:	d212      	bcs.n	800664a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006626:	b29b      	uxth	r3, r3
 8006628:	f023 030f 	bic.w	r3, r3, #15
 800662c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006630:	085b      	lsrs	r3, r3, #1
 8006632:	b29b      	uxth	r3, r3
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	b29a      	uxth	r2, r3
 800663a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800663c:	4313      	orrs	r3, r2
 800663e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006646:	60da      	str	r2, [r3, #12]
 8006648:	e3a3      	b.n	8006d92 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006650:	e39f      	b.n	8006d92 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8006652:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006656:	2b40      	cmp	r3, #64	; 0x40
 8006658:	f200 8388 	bhi.w	8006d6c <UART_SetConfig+0x22ac>
 800665c:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <UART_SetConfig+0x1ba4>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	08006769 	.word	0x08006769
 8006668:	0800681f 	.word	0x0800681f
 800666c:	08006d6d 	.word	0x08006d6d
 8006670:	08006d6d 	.word	0x08006d6d
 8006674:	080068d5 	.word	0x080068d5
 8006678:	08006d6d 	.word	0x08006d6d
 800667c:	08006d6d 	.word	0x08006d6d
 8006680:	08006d6d 	.word	0x08006d6d
 8006684:	0800698f 	.word	0x0800698f
 8006688:	08006d6d 	.word	0x08006d6d
 800668c:	08006d6d 	.word	0x08006d6d
 8006690:	08006d6d 	.word	0x08006d6d
 8006694:	08006d6d 	.word	0x08006d6d
 8006698:	08006d6d 	.word	0x08006d6d
 800669c:	08006d6d 	.word	0x08006d6d
 80066a0:	08006d6d 	.word	0x08006d6d
 80066a4:	08006a49 	.word	0x08006a49
 80066a8:	08006d6d 	.word	0x08006d6d
 80066ac:	08006d6d 	.word	0x08006d6d
 80066b0:	08006d6d 	.word	0x08006d6d
 80066b4:	08006d6d 	.word	0x08006d6d
 80066b8:	08006d6d 	.word	0x08006d6d
 80066bc:	08006d6d 	.word	0x08006d6d
 80066c0:	08006d6d 	.word	0x08006d6d
 80066c4:	08006d6d 	.word	0x08006d6d
 80066c8:	08006d6d 	.word	0x08006d6d
 80066cc:	08006d6d 	.word	0x08006d6d
 80066d0:	08006d6d 	.word	0x08006d6d
 80066d4:	08006d6d 	.word	0x08006d6d
 80066d8:	08006d6d 	.word	0x08006d6d
 80066dc:	08006d6d 	.word	0x08006d6d
 80066e0:	08006d6d 	.word	0x08006d6d
 80066e4:	08006bb9 	.word	0x08006bb9
 80066e8:	08006d6d 	.word	0x08006d6d
 80066ec:	08006d6d 	.word	0x08006d6d
 80066f0:	08006d6d 	.word	0x08006d6d
 80066f4:	08006d6d 	.word	0x08006d6d
 80066f8:	08006d6d 	.word	0x08006d6d
 80066fc:	08006d6d 	.word	0x08006d6d
 8006700:	08006d6d 	.word	0x08006d6d
 8006704:	08006d6d 	.word	0x08006d6d
 8006708:	08006d6d 	.word	0x08006d6d
 800670c:	08006d6d 	.word	0x08006d6d
 8006710:	08006d6d 	.word	0x08006d6d
 8006714:	08006d6d 	.word	0x08006d6d
 8006718:	08006d6d 	.word	0x08006d6d
 800671c:	08006d6d 	.word	0x08006d6d
 8006720:	08006d6d 	.word	0x08006d6d
 8006724:	08006d6d 	.word	0x08006d6d
 8006728:	08006d6d 	.word	0x08006d6d
 800672c:	08006d6d 	.word	0x08006d6d
 8006730:	08006d6d 	.word	0x08006d6d
 8006734:	08006d6d 	.word	0x08006d6d
 8006738:	08006d6d 	.word	0x08006d6d
 800673c:	08006d6d 	.word	0x08006d6d
 8006740:	08006d6d 	.word	0x08006d6d
 8006744:	08006d6d 	.word	0x08006d6d
 8006748:	08006d6d 	.word	0x08006d6d
 800674c:	08006d6d 	.word	0x08006d6d
 8006750:	08006d6d 	.word	0x08006d6d
 8006754:	08006d6d 	.word	0x08006d6d
 8006758:	08006d6d 	.word	0x08006d6d
 800675c:	08006d6d 	.word	0x08006d6d
 8006760:	08006d6d 	.word	0x08006d6d
 8006764:	08006cad 	.word	0x08006cad
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006768:	f7fc fe3e 	bl	80033e8 <HAL_RCC_GetPCLK1Freq>
 800676c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	2b00      	cmp	r3, #0
 8006774:	d044      	beq.n	8006800 <UART_SetConfig+0x1d40>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	2b01      	cmp	r3, #1
 800677c:	d03e      	beq.n	80067fc <UART_SetConfig+0x1d3c>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	2b02      	cmp	r3, #2
 8006784:	d038      	beq.n	80067f8 <UART_SetConfig+0x1d38>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	2b03      	cmp	r3, #3
 800678c:	d032      	beq.n	80067f4 <UART_SetConfig+0x1d34>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006792:	2b04      	cmp	r3, #4
 8006794:	d02c      	beq.n	80067f0 <UART_SetConfig+0x1d30>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	2b05      	cmp	r3, #5
 800679c:	d026      	beq.n	80067ec <UART_SetConfig+0x1d2c>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	2b06      	cmp	r3, #6
 80067a4:	d020      	beq.n	80067e8 <UART_SetConfig+0x1d28>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	2b07      	cmp	r3, #7
 80067ac:	d01a      	beq.n	80067e4 <UART_SetConfig+0x1d24>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	d014      	beq.n	80067e0 <UART_SetConfig+0x1d20>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	2b09      	cmp	r3, #9
 80067bc:	d00e      	beq.n	80067dc <UART_SetConfig+0x1d1c>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	2b0a      	cmp	r3, #10
 80067c4:	d008      	beq.n	80067d8 <UART_SetConfig+0x1d18>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	2b0b      	cmp	r3, #11
 80067cc:	d102      	bne.n	80067d4 <UART_SetConfig+0x1d14>
 80067ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067d2:	e016      	b.n	8006802 <UART_SetConfig+0x1d42>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e014      	b.n	8006802 <UART_SetConfig+0x1d42>
 80067d8:	2380      	movs	r3, #128	; 0x80
 80067da:	e012      	b.n	8006802 <UART_SetConfig+0x1d42>
 80067dc:	2340      	movs	r3, #64	; 0x40
 80067de:	e010      	b.n	8006802 <UART_SetConfig+0x1d42>
 80067e0:	2320      	movs	r3, #32
 80067e2:	e00e      	b.n	8006802 <UART_SetConfig+0x1d42>
 80067e4:	2310      	movs	r3, #16
 80067e6:	e00c      	b.n	8006802 <UART_SetConfig+0x1d42>
 80067e8:	230c      	movs	r3, #12
 80067ea:	e00a      	b.n	8006802 <UART_SetConfig+0x1d42>
 80067ec:	230a      	movs	r3, #10
 80067ee:	e008      	b.n	8006802 <UART_SetConfig+0x1d42>
 80067f0:	2308      	movs	r3, #8
 80067f2:	e006      	b.n	8006802 <UART_SetConfig+0x1d42>
 80067f4:	2306      	movs	r3, #6
 80067f6:	e004      	b.n	8006802 <UART_SetConfig+0x1d42>
 80067f8:	2304      	movs	r3, #4
 80067fa:	e002      	b.n	8006802 <UART_SetConfig+0x1d42>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e000      	b.n	8006802 <UART_SetConfig+0x1d42>
 8006800:	2301      	movs	r3, #1
 8006802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006804:	fbb2 f2f3 	udiv	r2, r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	085b      	lsrs	r3, r3, #1
 800680e:	441a      	add	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	fbb2 f3f3 	udiv	r3, r2, r3
 8006818:	b29b      	uxth	r3, r3
 800681a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800681c:	e2aa      	b.n	8006d74 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800681e:	f7fc fdf9 	bl	8003414 <HAL_RCC_GetPCLK2Freq>
 8006822:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	d044      	beq.n	80068b6 <UART_SetConfig+0x1df6>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	2b01      	cmp	r3, #1
 8006832:	d03e      	beq.n	80068b2 <UART_SetConfig+0x1df2>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	2b02      	cmp	r3, #2
 800683a:	d038      	beq.n	80068ae <UART_SetConfig+0x1dee>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	2b03      	cmp	r3, #3
 8006842:	d032      	beq.n	80068aa <UART_SetConfig+0x1dea>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	2b04      	cmp	r3, #4
 800684a:	d02c      	beq.n	80068a6 <UART_SetConfig+0x1de6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	2b05      	cmp	r3, #5
 8006852:	d026      	beq.n	80068a2 <UART_SetConfig+0x1de2>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2b06      	cmp	r3, #6
 800685a:	d020      	beq.n	800689e <UART_SetConfig+0x1dde>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	2b07      	cmp	r3, #7
 8006862:	d01a      	beq.n	800689a <UART_SetConfig+0x1dda>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	2b08      	cmp	r3, #8
 800686a:	d014      	beq.n	8006896 <UART_SetConfig+0x1dd6>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	2b09      	cmp	r3, #9
 8006872:	d00e      	beq.n	8006892 <UART_SetConfig+0x1dd2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	2b0a      	cmp	r3, #10
 800687a:	d008      	beq.n	800688e <UART_SetConfig+0x1dce>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	2b0b      	cmp	r3, #11
 8006882:	d102      	bne.n	800688a <UART_SetConfig+0x1dca>
 8006884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006888:	e016      	b.n	80068b8 <UART_SetConfig+0x1df8>
 800688a:	2301      	movs	r3, #1
 800688c:	e014      	b.n	80068b8 <UART_SetConfig+0x1df8>
 800688e:	2380      	movs	r3, #128	; 0x80
 8006890:	e012      	b.n	80068b8 <UART_SetConfig+0x1df8>
 8006892:	2340      	movs	r3, #64	; 0x40
 8006894:	e010      	b.n	80068b8 <UART_SetConfig+0x1df8>
 8006896:	2320      	movs	r3, #32
 8006898:	e00e      	b.n	80068b8 <UART_SetConfig+0x1df8>
 800689a:	2310      	movs	r3, #16
 800689c:	e00c      	b.n	80068b8 <UART_SetConfig+0x1df8>
 800689e:	230c      	movs	r3, #12
 80068a0:	e00a      	b.n	80068b8 <UART_SetConfig+0x1df8>
 80068a2:	230a      	movs	r3, #10
 80068a4:	e008      	b.n	80068b8 <UART_SetConfig+0x1df8>
 80068a6:	2308      	movs	r3, #8
 80068a8:	e006      	b.n	80068b8 <UART_SetConfig+0x1df8>
 80068aa:	2306      	movs	r3, #6
 80068ac:	e004      	b.n	80068b8 <UART_SetConfig+0x1df8>
 80068ae:	2304      	movs	r3, #4
 80068b0:	e002      	b.n	80068b8 <UART_SetConfig+0x1df8>
 80068b2:	2302      	movs	r3, #2
 80068b4:	e000      	b.n	80068b8 <UART_SetConfig+0x1df8>
 80068b6:	2301      	movs	r3, #1
 80068b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	441a      	add	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068d2:	e24f      	b.n	8006d74 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068d4:	f107 0318 	add.w	r3, r7, #24
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fd fca5 	bl	8004228 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068de:	69fa      	ldr	r2, [r7, #28]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d044      	beq.n	8006972 <UART_SetConfig+0x1eb2>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d03e      	beq.n	800696e <UART_SetConfig+0x1eae>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d038      	beq.n	800696a <UART_SetConfig+0x1eaa>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d032      	beq.n	8006966 <UART_SetConfig+0x1ea6>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	2b04      	cmp	r3, #4
 8006906:	d02c      	beq.n	8006962 <UART_SetConfig+0x1ea2>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	2b05      	cmp	r3, #5
 800690e:	d026      	beq.n	800695e <UART_SetConfig+0x1e9e>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	2b06      	cmp	r3, #6
 8006916:	d020      	beq.n	800695a <UART_SetConfig+0x1e9a>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	2b07      	cmp	r3, #7
 800691e:	d01a      	beq.n	8006956 <UART_SetConfig+0x1e96>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	2b08      	cmp	r3, #8
 8006926:	d014      	beq.n	8006952 <UART_SetConfig+0x1e92>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	2b09      	cmp	r3, #9
 800692e:	d00e      	beq.n	800694e <UART_SetConfig+0x1e8e>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	2b0a      	cmp	r3, #10
 8006936:	d008      	beq.n	800694a <UART_SetConfig+0x1e8a>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	2b0b      	cmp	r3, #11
 800693e:	d102      	bne.n	8006946 <UART_SetConfig+0x1e86>
 8006940:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006944:	e016      	b.n	8006974 <UART_SetConfig+0x1eb4>
 8006946:	2301      	movs	r3, #1
 8006948:	e014      	b.n	8006974 <UART_SetConfig+0x1eb4>
 800694a:	2380      	movs	r3, #128	; 0x80
 800694c:	e012      	b.n	8006974 <UART_SetConfig+0x1eb4>
 800694e:	2340      	movs	r3, #64	; 0x40
 8006950:	e010      	b.n	8006974 <UART_SetConfig+0x1eb4>
 8006952:	2320      	movs	r3, #32
 8006954:	e00e      	b.n	8006974 <UART_SetConfig+0x1eb4>
 8006956:	2310      	movs	r3, #16
 8006958:	e00c      	b.n	8006974 <UART_SetConfig+0x1eb4>
 800695a:	230c      	movs	r3, #12
 800695c:	e00a      	b.n	8006974 <UART_SetConfig+0x1eb4>
 800695e:	230a      	movs	r3, #10
 8006960:	e008      	b.n	8006974 <UART_SetConfig+0x1eb4>
 8006962:	2308      	movs	r3, #8
 8006964:	e006      	b.n	8006974 <UART_SetConfig+0x1eb4>
 8006966:	2306      	movs	r3, #6
 8006968:	e004      	b.n	8006974 <UART_SetConfig+0x1eb4>
 800696a:	2304      	movs	r3, #4
 800696c:	e002      	b.n	8006974 <UART_SetConfig+0x1eb4>
 800696e:	2302      	movs	r3, #2
 8006970:	e000      	b.n	8006974 <UART_SetConfig+0x1eb4>
 8006972:	2301      	movs	r3, #1
 8006974:	fbb2 f2f3 	udiv	r2, r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	085b      	lsrs	r3, r3, #1
 800697e:	441a      	add	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	fbb2 f3f3 	udiv	r3, r2, r3
 8006988:	b29b      	uxth	r3, r3
 800698a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800698c:	e1f2      	b.n	8006d74 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800698e:	f107 030c 	add.w	r3, r7, #12
 8006992:	4618      	mov	r0, r3
 8006994:	f7fd fd94 	bl	80044c0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d044      	beq.n	8006a2c <UART_SetConfig+0x1f6c>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d03e      	beq.n	8006a28 <UART_SetConfig+0x1f68>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d038      	beq.n	8006a24 <UART_SetConfig+0x1f64>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d032      	beq.n	8006a20 <UART_SetConfig+0x1f60>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	2b04      	cmp	r3, #4
 80069c0:	d02c      	beq.n	8006a1c <UART_SetConfig+0x1f5c>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	2b05      	cmp	r3, #5
 80069c8:	d026      	beq.n	8006a18 <UART_SetConfig+0x1f58>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	2b06      	cmp	r3, #6
 80069d0:	d020      	beq.n	8006a14 <UART_SetConfig+0x1f54>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	2b07      	cmp	r3, #7
 80069d8:	d01a      	beq.n	8006a10 <UART_SetConfig+0x1f50>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	2b08      	cmp	r3, #8
 80069e0:	d014      	beq.n	8006a0c <UART_SetConfig+0x1f4c>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	2b09      	cmp	r3, #9
 80069e8:	d00e      	beq.n	8006a08 <UART_SetConfig+0x1f48>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	2b0a      	cmp	r3, #10
 80069f0:	d008      	beq.n	8006a04 <UART_SetConfig+0x1f44>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	2b0b      	cmp	r3, #11
 80069f8:	d102      	bne.n	8006a00 <UART_SetConfig+0x1f40>
 80069fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069fe:	e016      	b.n	8006a2e <UART_SetConfig+0x1f6e>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e014      	b.n	8006a2e <UART_SetConfig+0x1f6e>
 8006a04:	2380      	movs	r3, #128	; 0x80
 8006a06:	e012      	b.n	8006a2e <UART_SetConfig+0x1f6e>
 8006a08:	2340      	movs	r3, #64	; 0x40
 8006a0a:	e010      	b.n	8006a2e <UART_SetConfig+0x1f6e>
 8006a0c:	2320      	movs	r3, #32
 8006a0e:	e00e      	b.n	8006a2e <UART_SetConfig+0x1f6e>
 8006a10:	2310      	movs	r3, #16
 8006a12:	e00c      	b.n	8006a2e <UART_SetConfig+0x1f6e>
 8006a14:	230c      	movs	r3, #12
 8006a16:	e00a      	b.n	8006a2e <UART_SetConfig+0x1f6e>
 8006a18:	230a      	movs	r3, #10
 8006a1a:	e008      	b.n	8006a2e <UART_SetConfig+0x1f6e>
 8006a1c:	2308      	movs	r3, #8
 8006a1e:	e006      	b.n	8006a2e <UART_SetConfig+0x1f6e>
 8006a20:	2306      	movs	r3, #6
 8006a22:	e004      	b.n	8006a2e <UART_SetConfig+0x1f6e>
 8006a24:	2304      	movs	r3, #4
 8006a26:	e002      	b.n	8006a2e <UART_SetConfig+0x1f6e>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e000      	b.n	8006a2e <UART_SetConfig+0x1f6e>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	085b      	lsrs	r3, r3, #1
 8006a38:	441a      	add	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a46:	e195      	b.n	8006d74 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a48:	4b87      	ldr	r3, [pc, #540]	; (8006c68 <UART_SetConfig+0x21a8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d05d      	beq.n	8006b10 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a54:	4b84      	ldr	r3, [pc, #528]	; (8006c68 <UART_SetConfig+0x21a8>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	08db      	lsrs	r3, r3, #3
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	4a83      	ldr	r2, [pc, #524]	; (8006c6c <UART_SetConfig+0x21ac>)
 8006a60:	40da      	lsrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d044      	beq.n	8006af4 <UART_SetConfig+0x2034>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d03e      	beq.n	8006af0 <UART_SetConfig+0x2030>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d038      	beq.n	8006aec <UART_SetConfig+0x202c>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d032      	beq.n	8006ae8 <UART_SetConfig+0x2028>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d02c      	beq.n	8006ae4 <UART_SetConfig+0x2024>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	2b05      	cmp	r3, #5
 8006a90:	d026      	beq.n	8006ae0 <UART_SetConfig+0x2020>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	2b06      	cmp	r3, #6
 8006a98:	d020      	beq.n	8006adc <UART_SetConfig+0x201c>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	2b07      	cmp	r3, #7
 8006aa0:	d01a      	beq.n	8006ad8 <UART_SetConfig+0x2018>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	2b08      	cmp	r3, #8
 8006aa8:	d014      	beq.n	8006ad4 <UART_SetConfig+0x2014>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	2b09      	cmp	r3, #9
 8006ab0:	d00e      	beq.n	8006ad0 <UART_SetConfig+0x2010>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	2b0a      	cmp	r3, #10
 8006ab8:	d008      	beq.n	8006acc <UART_SetConfig+0x200c>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	2b0b      	cmp	r3, #11
 8006ac0:	d102      	bne.n	8006ac8 <UART_SetConfig+0x2008>
 8006ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ac6:	e016      	b.n	8006af6 <UART_SetConfig+0x2036>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e014      	b.n	8006af6 <UART_SetConfig+0x2036>
 8006acc:	2380      	movs	r3, #128	; 0x80
 8006ace:	e012      	b.n	8006af6 <UART_SetConfig+0x2036>
 8006ad0:	2340      	movs	r3, #64	; 0x40
 8006ad2:	e010      	b.n	8006af6 <UART_SetConfig+0x2036>
 8006ad4:	2320      	movs	r3, #32
 8006ad6:	e00e      	b.n	8006af6 <UART_SetConfig+0x2036>
 8006ad8:	2310      	movs	r3, #16
 8006ada:	e00c      	b.n	8006af6 <UART_SetConfig+0x2036>
 8006adc:	230c      	movs	r3, #12
 8006ade:	e00a      	b.n	8006af6 <UART_SetConfig+0x2036>
 8006ae0:	230a      	movs	r3, #10
 8006ae2:	e008      	b.n	8006af6 <UART_SetConfig+0x2036>
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	e006      	b.n	8006af6 <UART_SetConfig+0x2036>
 8006ae8:	2306      	movs	r3, #6
 8006aea:	e004      	b.n	8006af6 <UART_SetConfig+0x2036>
 8006aec:	2304      	movs	r3, #4
 8006aee:	e002      	b.n	8006af6 <UART_SetConfig+0x2036>
 8006af0:	2302      	movs	r3, #2
 8006af2:	e000      	b.n	8006af6 <UART_SetConfig+0x2036>
 8006af4:	2301      	movs	r3, #1
 8006af6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	085b      	lsrs	r3, r3, #1
 8006b00:	441a      	add	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8006b0e:	e131      	b.n	8006d74 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d043      	beq.n	8006ba0 <UART_SetConfig+0x20e0>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d03d      	beq.n	8006b9c <UART_SetConfig+0x20dc>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d037      	beq.n	8006b98 <UART_SetConfig+0x20d8>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d031      	beq.n	8006b94 <UART_SetConfig+0x20d4>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d02b      	beq.n	8006b90 <UART_SetConfig+0x20d0>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	2b05      	cmp	r3, #5
 8006b3e:	d025      	beq.n	8006b8c <UART_SetConfig+0x20cc>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	2b06      	cmp	r3, #6
 8006b46:	d01f      	beq.n	8006b88 <UART_SetConfig+0x20c8>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	2b07      	cmp	r3, #7
 8006b4e:	d019      	beq.n	8006b84 <UART_SetConfig+0x20c4>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d013      	beq.n	8006b80 <UART_SetConfig+0x20c0>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	2b09      	cmp	r3, #9
 8006b5e:	d00d      	beq.n	8006b7c <UART_SetConfig+0x20bc>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	2b0a      	cmp	r3, #10
 8006b66:	d007      	beq.n	8006b78 <UART_SetConfig+0x20b8>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	2b0b      	cmp	r3, #11
 8006b6e:	d101      	bne.n	8006b74 <UART_SetConfig+0x20b4>
 8006b70:	4b3f      	ldr	r3, [pc, #252]	; (8006c70 <UART_SetConfig+0x21b0>)
 8006b72:	e016      	b.n	8006ba2 <UART_SetConfig+0x20e2>
 8006b74:	4b3d      	ldr	r3, [pc, #244]	; (8006c6c <UART_SetConfig+0x21ac>)
 8006b76:	e014      	b.n	8006ba2 <UART_SetConfig+0x20e2>
 8006b78:	4b3e      	ldr	r3, [pc, #248]	; (8006c74 <UART_SetConfig+0x21b4>)
 8006b7a:	e012      	b.n	8006ba2 <UART_SetConfig+0x20e2>
 8006b7c:	4b3e      	ldr	r3, [pc, #248]	; (8006c78 <UART_SetConfig+0x21b8>)
 8006b7e:	e010      	b.n	8006ba2 <UART_SetConfig+0x20e2>
 8006b80:	4b3e      	ldr	r3, [pc, #248]	; (8006c7c <UART_SetConfig+0x21bc>)
 8006b82:	e00e      	b.n	8006ba2 <UART_SetConfig+0x20e2>
 8006b84:	4b3e      	ldr	r3, [pc, #248]	; (8006c80 <UART_SetConfig+0x21c0>)
 8006b86:	e00c      	b.n	8006ba2 <UART_SetConfig+0x20e2>
 8006b88:	4b3e      	ldr	r3, [pc, #248]	; (8006c84 <UART_SetConfig+0x21c4>)
 8006b8a:	e00a      	b.n	8006ba2 <UART_SetConfig+0x20e2>
 8006b8c:	4b3e      	ldr	r3, [pc, #248]	; (8006c88 <UART_SetConfig+0x21c8>)
 8006b8e:	e008      	b.n	8006ba2 <UART_SetConfig+0x20e2>
 8006b90:	4b3e      	ldr	r3, [pc, #248]	; (8006c8c <UART_SetConfig+0x21cc>)
 8006b92:	e006      	b.n	8006ba2 <UART_SetConfig+0x20e2>
 8006b94:	4b3e      	ldr	r3, [pc, #248]	; (8006c90 <UART_SetConfig+0x21d0>)
 8006b96:	e004      	b.n	8006ba2 <UART_SetConfig+0x20e2>
 8006b98:	4b3e      	ldr	r3, [pc, #248]	; (8006c94 <UART_SetConfig+0x21d4>)
 8006b9a:	e002      	b.n	8006ba2 <UART_SetConfig+0x20e2>
 8006b9c:	4b3e      	ldr	r3, [pc, #248]	; (8006c98 <UART_SetConfig+0x21d8>)
 8006b9e:	e000      	b.n	8006ba2 <UART_SetConfig+0x20e2>
 8006ba0:	4b32      	ldr	r3, [pc, #200]	; (8006c6c <UART_SetConfig+0x21ac>)
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6852      	ldr	r2, [r2, #4]
 8006ba6:	0852      	lsrs	r2, r2, #1
 8006ba8:	441a      	add	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bb6:	e0dd      	b.n	8006d74 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d046      	beq.n	8006c4e <UART_SetConfig+0x218e>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d040      	beq.n	8006c4a <UART_SetConfig+0x218a>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d03a      	beq.n	8006c46 <UART_SetConfig+0x2186>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d034      	beq.n	8006c42 <UART_SetConfig+0x2182>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d02e      	beq.n	8006c3e <UART_SetConfig+0x217e>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	2b05      	cmp	r3, #5
 8006be6:	d028      	beq.n	8006c3a <UART_SetConfig+0x217a>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	2b06      	cmp	r3, #6
 8006bee:	d022      	beq.n	8006c36 <UART_SetConfig+0x2176>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	2b07      	cmp	r3, #7
 8006bf6:	d01c      	beq.n	8006c32 <UART_SetConfig+0x2172>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d016      	beq.n	8006c2e <UART_SetConfig+0x216e>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	2b09      	cmp	r3, #9
 8006c06:	d00f      	beq.n	8006c28 <UART_SetConfig+0x2168>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	2b0a      	cmp	r3, #10
 8006c0e:	d008      	beq.n	8006c22 <UART_SetConfig+0x2162>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	2b0b      	cmp	r3, #11
 8006c16:	d102      	bne.n	8006c1e <UART_SetConfig+0x215e>
 8006c18:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006c1c:	e018      	b.n	8006c50 <UART_SetConfig+0x2190>
 8006c1e:	4b18      	ldr	r3, [pc, #96]	; (8006c80 <UART_SetConfig+0x21c0>)
 8006c20:	e016      	b.n	8006c50 <UART_SetConfig+0x2190>
 8006c22:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006c26:	e013      	b.n	8006c50 <UART_SetConfig+0x2190>
 8006c28:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006c2c:	e010      	b.n	8006c50 <UART_SetConfig+0x2190>
 8006c2e:	4b1b      	ldr	r3, [pc, #108]	; (8006c9c <UART_SetConfig+0x21dc>)
 8006c30:	e00e      	b.n	8006c50 <UART_SetConfig+0x2190>
 8006c32:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <UART_SetConfig+0x21b0>)
 8006c34:	e00c      	b.n	8006c50 <UART_SetConfig+0x2190>
 8006c36:	4b1a      	ldr	r3, [pc, #104]	; (8006ca0 <UART_SetConfig+0x21e0>)
 8006c38:	e00a      	b.n	8006c50 <UART_SetConfig+0x2190>
 8006c3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ca4 <UART_SetConfig+0x21e4>)
 8006c3c:	e008      	b.n	8006c50 <UART_SetConfig+0x2190>
 8006c3e:	4b0d      	ldr	r3, [pc, #52]	; (8006c74 <UART_SetConfig+0x21b4>)
 8006c40:	e006      	b.n	8006c50 <UART_SetConfig+0x2190>
 8006c42:	4b19      	ldr	r3, [pc, #100]	; (8006ca8 <UART_SetConfig+0x21e8>)
 8006c44:	e004      	b.n	8006c50 <UART_SetConfig+0x2190>
 8006c46:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <UART_SetConfig+0x21b8>)
 8006c48:	e002      	b.n	8006c50 <UART_SetConfig+0x2190>
 8006c4a:	4b0c      	ldr	r3, [pc, #48]	; (8006c7c <UART_SetConfig+0x21bc>)
 8006c4c:	e000      	b.n	8006c50 <UART_SetConfig+0x2190>
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <UART_SetConfig+0x21c0>)
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6852      	ldr	r2, [r2, #4]
 8006c54:	0852      	lsrs	r2, r2, #1
 8006c56:	441a      	add	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c64:	e086      	b.n	8006d74 <UART_SetConfig+0x22b4>
 8006c66:	bf00      	nop
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	03d09000 	.word	0x03d09000
 8006c70:	0003d090 	.word	0x0003d090
 8006c74:	0007a120 	.word	0x0007a120
 8006c78:	000f4240 	.word	0x000f4240
 8006c7c:	001e8480 	.word	0x001e8480
 8006c80:	003d0900 	.word	0x003d0900
 8006c84:	00516155 	.word	0x00516155
 8006c88:	0061a800 	.word	0x0061a800
 8006c8c:	007a1200 	.word	0x007a1200
 8006c90:	00a2c2aa 	.word	0x00a2c2aa
 8006c94:	00f42400 	.word	0x00f42400
 8006c98:	01e84800 	.word	0x01e84800
 8006c9c:	0001e848 	.word	0x0001e848
 8006ca0:	00051615 	.word	0x00051615
 8006ca4:	00061a80 	.word	0x00061a80
 8006ca8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d04e      	beq.n	8006d52 <UART_SetConfig+0x2292>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d047      	beq.n	8006d4c <UART_SetConfig+0x228c>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d040      	beq.n	8006d46 <UART_SetConfig+0x2286>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d039      	beq.n	8006d40 <UART_SetConfig+0x2280>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d032      	beq.n	8006d3a <UART_SetConfig+0x227a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	2b05      	cmp	r3, #5
 8006cda:	d02b      	beq.n	8006d34 <UART_SetConfig+0x2274>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	2b06      	cmp	r3, #6
 8006ce2:	d024      	beq.n	8006d2e <UART_SetConfig+0x226e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	2b07      	cmp	r3, #7
 8006cea:	d01d      	beq.n	8006d28 <UART_SetConfig+0x2268>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d016      	beq.n	8006d22 <UART_SetConfig+0x2262>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	2b09      	cmp	r3, #9
 8006cfa:	d00f      	beq.n	8006d1c <UART_SetConfig+0x225c>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	2b0a      	cmp	r3, #10
 8006d02:	d008      	beq.n	8006d16 <UART_SetConfig+0x2256>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	2b0b      	cmp	r3, #11
 8006d0a:	d101      	bne.n	8006d10 <UART_SetConfig+0x2250>
 8006d0c:	2380      	movs	r3, #128	; 0x80
 8006d0e:	e022      	b.n	8006d56 <UART_SetConfig+0x2296>
 8006d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d14:	e01f      	b.n	8006d56 <UART_SetConfig+0x2296>
 8006d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d1a:	e01c      	b.n	8006d56 <UART_SetConfig+0x2296>
 8006d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d20:	e019      	b.n	8006d56 <UART_SetConfig+0x2296>
 8006d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d26:	e016      	b.n	8006d56 <UART_SetConfig+0x2296>
 8006d28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d2c:	e013      	b.n	8006d56 <UART_SetConfig+0x2296>
 8006d2e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006d32:	e010      	b.n	8006d56 <UART_SetConfig+0x2296>
 8006d34:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006d38:	e00d      	b.n	8006d56 <UART_SetConfig+0x2296>
 8006d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d3e:	e00a      	b.n	8006d56 <UART_SetConfig+0x2296>
 8006d40:	f241 5355 	movw	r3, #5461	; 0x1555
 8006d44:	e007      	b.n	8006d56 <UART_SetConfig+0x2296>
 8006d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d4a:	e004      	b.n	8006d56 <UART_SetConfig+0x2296>
 8006d4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d50:	e001      	b.n	8006d56 <UART_SetConfig+0x2296>
 8006d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	6852      	ldr	r2, [r2, #4]
 8006d5a:	0852      	lsrs	r2, r2, #1
 8006d5c:	441a      	add	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d6a:	e003      	b.n	8006d74 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006d72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d76:	2b0f      	cmp	r3, #15
 8006d78:	d908      	bls.n	8006d8c <UART_SetConfig+0x22cc>
 8006d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d80:	d204      	bcs.n	8006d8c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d88:	60da      	str	r2, [r3, #12]
 8006d8a:	e002      	b.n	8006d92 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006dae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3740      	adds	r7, #64	; 0x40
 8006db6:	46bd      	mov	sp, r7
 8006db8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0c:	f003 0304 	and.w	r3, r3, #4
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2e:	f003 0308 	and.w	r3, r3, #8
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e50:	f003 0310 	and.w	r3, r3, #16
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00a      	beq.n	8006e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	f003 0320 	and.w	r3, r3, #32
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01a      	beq.n	8006ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eba:	d10a      	bne.n	8006ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	605a      	str	r2, [r3, #4]
  }
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af02      	add	r7, sp, #8
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006f10:	f7fa fa7e 	bl	8001410 <HAL_GetTick>
 8006f14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d10e      	bne.n	8006f42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f82c 	bl	8006f90 <UART_WaitOnFlagUntilTimeout>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e022      	b.n	8006f88 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d10e      	bne.n	8006f6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f816 	bl	8006f90 <UART_WaitOnFlagUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e00c      	b.n	8006f88 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	603b      	str	r3, [r7, #0]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fa0:	e062      	b.n	8007068 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa8:	d05e      	beq.n	8007068 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006faa:	f7fa fa31 	bl	8001410 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d302      	bcc.n	8006fc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d11d      	bne.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006fce:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0201 	bic.w	r2, r2, #1
 8006fde:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e045      	b.n	8007088 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0304 	and.w	r3, r3, #4
 8007006:	2b00      	cmp	r3, #0
 8007008:	d02e      	beq.n	8007068 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007018:	d126      	bne.n	8007068 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007022:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007032:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0201 	bic.w	r2, r2, #1
 8007042:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2220      	movs	r2, #32
 8007048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2220      	movs	r2, #32
 8007058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e00f      	b.n	8007088 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	69da      	ldr	r2, [r3, #28]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	4013      	ands	r3, r2
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	429a      	cmp	r2, r3
 8007076:	bf0c      	ite	eq
 8007078:	2301      	moveq	r3, #1
 800707a:	2300      	movne	r3, #0
 800707c:	b2db      	uxtb	r3, r3
 800707e:	461a      	mov	r2, r3
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	429a      	cmp	r2, r3
 8007084:	d08d      	beq.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80070a2:	2302      	movs	r3, #2
 80070a4:	e027      	b.n	80070f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2224      	movs	r2, #36	; 0x24
 80070b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f022 0201 	bic.w	r2, r2, #1
 80070cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007112:	2b01      	cmp	r3, #1
 8007114:	d101      	bne.n	800711a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007116:	2302      	movs	r3, #2
 8007118:	e02d      	b.n	8007176 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2224      	movs	r2, #36	; 0x24
 8007126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0201 	bic.w	r2, r2, #1
 8007140:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f850 	bl	80071fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2220      	movs	r2, #32
 8007168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800718e:	2b01      	cmp	r3, #1
 8007190:	d101      	bne.n	8007196 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007192:	2302      	movs	r3, #2
 8007194:	e02d      	b.n	80071f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2224      	movs	r2, #36	; 0x24
 80071a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0201 	bic.w	r2, r2, #1
 80071bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f812 	bl	80071fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2220      	movs	r2, #32
 80071e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b089      	sub	sp, #36	; 0x24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007204:	4a2f      	ldr	r2, [pc, #188]	; (80072c4 <UARTEx_SetNbDataToProcess+0xc8>)
 8007206:	f107 0314 	add.w	r3, r7, #20
 800720a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800720e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007212:	4a2d      	ldr	r2, [pc, #180]	; (80072c8 <UARTEx_SetNbDataToProcess+0xcc>)
 8007214:	f107 030c 	add.w	r3, r7, #12
 8007218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800721c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007224:	2b00      	cmp	r3, #0
 8007226:	d108      	bne.n	800723a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007238:	e03d      	b.n	80072b6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800723a:	2308      	movs	r3, #8
 800723c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800723e:	2308      	movs	r3, #8
 8007240:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	0e5b      	lsrs	r3, r3, #25
 800724a:	b2db      	uxtb	r3, r3
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	0f5b      	lsrs	r3, r3, #29
 800725a:	b2db      	uxtb	r3, r3
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007262:	7fbb      	ldrb	r3, [r7, #30]
 8007264:	7f3a      	ldrb	r2, [r7, #28]
 8007266:	f107 0120 	add.w	r1, r7, #32
 800726a:	440a      	add	r2, r1
 800726c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007270:	fb02 f303 	mul.w	r3, r2, r3
 8007274:	7f3a      	ldrb	r2, [r7, #28]
 8007276:	f107 0120 	add.w	r1, r7, #32
 800727a:	440a      	add	r2, r1
 800727c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007280:	fb93 f3f2 	sdiv	r3, r3, r2
 8007284:	b29a      	uxth	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800728c:	7ffb      	ldrb	r3, [r7, #31]
 800728e:	7f7a      	ldrb	r2, [r7, #29]
 8007290:	f107 0120 	add.w	r1, r7, #32
 8007294:	440a      	add	r2, r1
 8007296:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800729a:	fb02 f303 	mul.w	r3, r2, r3
 800729e:	7f7a      	ldrb	r2, [r7, #29]
 80072a0:	f107 0120 	add.w	r1, r7, #32
 80072a4:	440a      	add	r2, r1
 80072a6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80072aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80072b6:	bf00      	nop
 80072b8:	3724      	adds	r7, #36	; 0x24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	080084e0 	.word	0x080084e0
 80072c8:	080084e8 	.word	0x080084e8

080072cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072cc:	b084      	sub	sp, #16
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	f107 001c 	add.w	r0, r7, #28
 80072da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d120      	bne.n	8007326 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	4b25      	ldr	r3, [pc, #148]	; (800738c <USB_CoreInit+0xc0>)
 80072f6:	4013      	ands	r3, r2
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800730a:	2b01      	cmp	r3, #1
 800730c:	d105      	bne.n	800731a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa4c 	bl	80077b8 <USB_CoreReset>
 8007320:	4603      	mov	r3, r0
 8007322:	73fb      	strb	r3, [r7, #15]
 8007324:	e01a      	b.n	800735c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fa40 	bl	80077b8 <USB_CoreReset>
 8007338:	4603      	mov	r3, r0
 800733a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800733c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d106      	bne.n	8007350 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	639a      	str	r2, [r3, #56]	; 0x38
 800734e:	e005      	b.n	800735c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	2b01      	cmp	r3, #1
 8007360:	d10b      	bne.n	800737a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f043 0206 	orr.w	r2, r3, #6
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f043 0220 	orr.w	r2, r3, #32
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007386:	b004      	add	sp, #16
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	ffbdffbf 	.word	0xffbdffbf

08007390 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f023 0201 	bic.w	r2, r3, #1
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	460b      	mov	r3, r1
 80073bc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d106      	bne.n	80073de <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	60da      	str	r2, [r3, #12]
 80073dc:	e00b      	b.n	80073f6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80073de:	78fb      	ldrb	r3, [r7, #3]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d106      	bne.n	80073f2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	60da      	str	r2, [r3, #12]
 80073f0:	e001      	b.n	80073f6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e003      	b.n	80073fe <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80073f6:	2032      	movs	r0, #50	; 0x32
 80073f8:	f7fa f816 	bl	8001428 <HAL_Delay>

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
	...

08007408 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007408:	b084      	sub	sp, #16
 800740a:	b580      	push	{r7, lr}
 800740c:	b086      	sub	sp, #24
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007422:	2300      	movs	r3, #0
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	e009      	b.n	800743c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	3340      	adds	r3, #64	; 0x40
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	2200      	movs	r2, #0
 8007434:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	3301      	adds	r3, #1
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	2b0e      	cmp	r3, #14
 8007440:	d9f2      	bls.n	8007428 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007444:	2b00      	cmp	r3, #0
 8007446:	d11c      	bne.n	8007482 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007456:	f043 0302 	orr.w	r3, r3, #2
 800745a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	e005      	b.n	800748e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007486:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007494:	461a      	mov	r2, r3
 8007496:	2300      	movs	r3, #0
 8007498:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a0:	4619      	mov	r1, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a8:	461a      	mov	r2, r3
 80074aa:	680b      	ldr	r3, [r1, #0]
 80074ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d10c      	bne.n	80074ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d104      	bne.n	80074c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80074ba:	2100      	movs	r1, #0
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f949 	bl	8007754 <USB_SetDevSpeed>
 80074c2:	e008      	b.n	80074d6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074c4:	2101      	movs	r1, #1
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f944 	bl	8007754 <USB_SetDevSpeed>
 80074cc:	e003      	b.n	80074d6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074ce:	2103      	movs	r1, #3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f93f 	bl	8007754 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074d6:	2110      	movs	r1, #16
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f8f3 	bl	80076c4 <USB_FlushTxFifo>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f911 	bl	8007710 <USB_FlushRxFifo>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fe:	461a      	mov	r2, r3
 8007500:	2300      	movs	r3, #0
 8007502:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800750a:	461a      	mov	r2, r3
 800750c:	2300      	movs	r3, #0
 800750e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007516:	461a      	mov	r2, r3
 8007518:	2300      	movs	r3, #0
 800751a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800751c:	2300      	movs	r3, #0
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	e043      	b.n	80075aa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007538:	d118      	bne.n	800756c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4413      	add	r3, r2
 8007548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754c:	461a      	mov	r2, r3
 800754e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	e013      	b.n	800757e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007562:	461a      	mov	r2, r3
 8007564:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	e008      	b.n	800757e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007578:	461a      	mov	r2, r3
 800757a:	2300      	movs	r3, #0
 800757c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	015a      	lsls	r2, r3, #5
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	4413      	add	r3, r2
 8007586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758a:	461a      	mov	r2, r3
 800758c:	2300      	movs	r3, #0
 800758e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759c:	461a      	mov	r2, r3
 800759e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	3301      	adds	r3, #1
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d3b7      	bcc.n	8007522 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075b2:	2300      	movs	r3, #0
 80075b4:	613b      	str	r3, [r7, #16]
 80075b6:	e043      	b.n	8007640 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075ce:	d118      	bne.n	8007602 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10a      	bne.n	80075ec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e2:	461a      	mov	r2, r3
 80075e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	e013      	b.n	8007614 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f8:	461a      	mov	r2, r3
 80075fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	e008      	b.n	8007614 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760e:	461a      	mov	r2, r3
 8007610:	2300      	movs	r3, #0
 8007612:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007620:	461a      	mov	r2, r3
 8007622:	2300      	movs	r3, #0
 8007624:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007632:	461a      	mov	r2, r3
 8007634:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007638:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	3301      	adds	r3, #1
 800763e:	613b      	str	r3, [r7, #16]
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	429a      	cmp	r2, r3
 8007646:	d3b7      	bcc.n	80075b8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800765a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007668:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	2b00      	cmp	r3, #0
 800766e:	d105      	bne.n	800767c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	f043 0210 	orr.w	r2, r3, #16
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699a      	ldr	r2, [r3, #24]
 8007680:	4b0e      	ldr	r3, [pc, #56]	; (80076bc <USB_DevInit+0x2b4>)
 8007682:	4313      	orrs	r3, r2
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800768a:	2b00      	cmp	r3, #0
 800768c:	d005      	beq.n	800769a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	f043 0208 	orr.w	r2, r3, #8
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800769a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800769c:	2b01      	cmp	r3, #1
 800769e:	d105      	bne.n	80076ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	699a      	ldr	r2, [r3, #24]
 80076a4:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <USB_DevInit+0x2b8>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076b8:	b004      	add	sp, #16
 80076ba:	4770      	bx	lr
 80076bc:	803c3800 	.word	0x803c3800
 80076c0:	40000004 	.word	0x40000004

080076c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	019b      	lsls	r3, r3, #6
 80076d6:	f043 0220 	orr.w	r2, r3, #32
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3301      	adds	r3, #1
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4a09      	ldr	r2, [pc, #36]	; (800770c <USB_FlushTxFifo+0x48>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d901      	bls.n	80076f0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e006      	b.n	80076fe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	f003 0320 	and.w	r3, r3, #32
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	d0f0      	beq.n	80076de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	00030d40 	.word	0x00030d40

08007710 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2210      	movs	r2, #16
 8007720:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3301      	adds	r3, #1
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4a09      	ldr	r2, [pc, #36]	; (8007750 <USB_FlushRxFifo+0x40>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d901      	bls.n	8007734 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e006      	b.n	8007742 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	f003 0310 	and.w	r3, r3, #16
 800773c:	2b10      	cmp	r3, #16
 800773e:	d0f0      	beq.n	8007722 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	00030d40 	.word	0x00030d40

08007754 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	68f9      	ldr	r1, [r7, #12]
 8007770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007774:	4313      	orrs	r3, r2
 8007776:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077a0:	f043 0302 	orr.w	r3, r3, #2
 80077a4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80077a6:	2003      	movs	r0, #3
 80077a8:	f7f9 fe3e 	bl	8001428 <HAL_Delay>

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4a13      	ldr	r2, [pc, #76]	; (800781c <USB_CoreReset+0x64>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d901      	bls.n	80077d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e01b      	b.n	800780e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	daf2      	bge.n	80077c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f043 0201 	orr.w	r2, r3, #1
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3301      	adds	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4a09      	ldr	r2, [pc, #36]	; (800781c <USB_CoreReset+0x64>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d901      	bls.n	8007800 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e006      	b.n	800780e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b01      	cmp	r3, #1
 800780a:	d0f0      	beq.n	80077ee <USB_CoreReset+0x36>

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	00030d40 	.word	0x00030d40

08007820 <__libc_init_array>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	4e0d      	ldr	r6, [pc, #52]	; (8007858 <__libc_init_array+0x38>)
 8007824:	4c0d      	ldr	r4, [pc, #52]	; (800785c <__libc_init_array+0x3c>)
 8007826:	1ba4      	subs	r4, r4, r6
 8007828:	10a4      	asrs	r4, r4, #2
 800782a:	2500      	movs	r5, #0
 800782c:	42a5      	cmp	r5, r4
 800782e:	d109      	bne.n	8007844 <__libc_init_array+0x24>
 8007830:	4e0b      	ldr	r6, [pc, #44]	; (8007860 <__libc_init_array+0x40>)
 8007832:	4c0c      	ldr	r4, [pc, #48]	; (8007864 <__libc_init_array+0x44>)
 8007834:	f000 fe46 	bl	80084c4 <_init>
 8007838:	1ba4      	subs	r4, r4, r6
 800783a:	10a4      	asrs	r4, r4, #2
 800783c:	2500      	movs	r5, #0
 800783e:	42a5      	cmp	r5, r4
 8007840:	d105      	bne.n	800784e <__libc_init_array+0x2e>
 8007842:	bd70      	pop	{r4, r5, r6, pc}
 8007844:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007848:	4798      	blx	r3
 800784a:	3501      	adds	r5, #1
 800784c:	e7ee      	b.n	800782c <__libc_init_array+0xc>
 800784e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007852:	4798      	blx	r3
 8007854:	3501      	adds	r5, #1
 8007856:	e7f2      	b.n	800783e <__libc_init_array+0x1e>
 8007858:	080086e0 	.word	0x080086e0
 800785c:	080086e0 	.word	0x080086e0
 8007860:	080086e0 	.word	0x080086e0
 8007864:	080086e4 	.word	0x080086e4

08007868 <memset>:
 8007868:	4402      	add	r2, r0
 800786a:	4603      	mov	r3, r0
 800786c:	4293      	cmp	r3, r2
 800786e:	d100      	bne.n	8007872 <memset+0xa>
 8007870:	4770      	bx	lr
 8007872:	f803 1b01 	strb.w	r1, [r3], #1
 8007876:	e7f9      	b.n	800786c <memset+0x4>

08007878 <cos>:
 8007878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800787a:	eeb0 7b40 	vmov.f64	d7, d0
 800787e:	ee17 3a90 	vmov	r3, s15
 8007882:	4a19      	ldr	r2, [pc, #100]	; (80078e8 <cos+0x70>)
 8007884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007888:	4293      	cmp	r3, r2
 800788a:	dc04      	bgt.n	8007896 <cos+0x1e>
 800788c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80078e0 <cos+0x68>
 8007890:	f000 f9a6 	bl	8007be0 <__kernel_cos>
 8007894:	e004      	b.n	80078a0 <cos+0x28>
 8007896:	4a15      	ldr	r2, [pc, #84]	; (80078ec <cos+0x74>)
 8007898:	4293      	cmp	r3, r2
 800789a:	dd04      	ble.n	80078a6 <cos+0x2e>
 800789c:	ee30 0b40 	vsub.f64	d0, d0, d0
 80078a0:	b005      	add	sp, #20
 80078a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80078a6:	4668      	mov	r0, sp
 80078a8:	f000 f85e 	bl	8007968 <__ieee754_rem_pio2>
 80078ac:	f000 0003 	and.w	r0, r0, #3
 80078b0:	2801      	cmp	r0, #1
 80078b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80078b6:	ed9d 0b00 	vldr	d0, [sp]
 80078ba:	d007      	beq.n	80078cc <cos+0x54>
 80078bc:	2802      	cmp	r0, #2
 80078be:	d00a      	beq.n	80078d6 <cos+0x5e>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d0e5      	beq.n	8007890 <cos+0x18>
 80078c4:	2001      	movs	r0, #1
 80078c6:	f000 fc93 	bl	80081f0 <__kernel_sin>
 80078ca:	e7e9      	b.n	80078a0 <cos+0x28>
 80078cc:	f000 fc90 	bl	80081f0 <__kernel_sin>
 80078d0:	eeb1 0b40 	vneg.f64	d0, d0
 80078d4:	e7e4      	b.n	80078a0 <cos+0x28>
 80078d6:	f000 f983 	bl	8007be0 <__kernel_cos>
 80078da:	e7f9      	b.n	80078d0 <cos+0x58>
 80078dc:	f3af 8000 	nop.w
	...
 80078e8:	3fe921fb 	.word	0x3fe921fb
 80078ec:	7fefffff 	.word	0x7fefffff

080078f0 <sin>:
 80078f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078f2:	eeb0 7b40 	vmov.f64	d7, d0
 80078f6:	ee17 3a90 	vmov	r3, s15
 80078fa:	4a19      	ldr	r2, [pc, #100]	; (8007960 <sin+0x70>)
 80078fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007900:	4293      	cmp	r3, r2
 8007902:	dc05      	bgt.n	8007910 <sin+0x20>
 8007904:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8007958 <sin+0x68>
 8007908:	2000      	movs	r0, #0
 800790a:	f000 fc71 	bl	80081f0 <__kernel_sin>
 800790e:	e004      	b.n	800791a <sin+0x2a>
 8007910:	4a14      	ldr	r2, [pc, #80]	; (8007964 <sin+0x74>)
 8007912:	4293      	cmp	r3, r2
 8007914:	dd04      	ble.n	8007920 <sin+0x30>
 8007916:	ee30 0b40 	vsub.f64	d0, d0, d0
 800791a:	b005      	add	sp, #20
 800791c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007920:	4668      	mov	r0, sp
 8007922:	f000 f821 	bl	8007968 <__ieee754_rem_pio2>
 8007926:	f000 0003 	and.w	r0, r0, #3
 800792a:	2801      	cmp	r0, #1
 800792c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007930:	ed9d 0b00 	vldr	d0, [sp]
 8007934:	d004      	beq.n	8007940 <sin+0x50>
 8007936:	2802      	cmp	r0, #2
 8007938:	d005      	beq.n	8007946 <sin+0x56>
 800793a:	b950      	cbnz	r0, 8007952 <sin+0x62>
 800793c:	2001      	movs	r0, #1
 800793e:	e7e4      	b.n	800790a <sin+0x1a>
 8007940:	f000 f94e 	bl	8007be0 <__kernel_cos>
 8007944:	e7e9      	b.n	800791a <sin+0x2a>
 8007946:	2001      	movs	r0, #1
 8007948:	f000 fc52 	bl	80081f0 <__kernel_sin>
 800794c:	eeb1 0b40 	vneg.f64	d0, d0
 8007950:	e7e3      	b.n	800791a <sin+0x2a>
 8007952:	f000 f945 	bl	8007be0 <__kernel_cos>
 8007956:	e7f9      	b.n	800794c <sin+0x5c>
	...
 8007960:	3fe921fb 	.word	0x3fe921fb
 8007964:	7fefffff 	.word	0x7fefffff

08007968 <__ieee754_rem_pio2>:
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	eeb0 7b40 	vmov.f64	d7, d0
 800796e:	ee17 5a90 	vmov	r5, s15
 8007972:	4b95      	ldr	r3, [pc, #596]	; (8007bc8 <__ieee754_rem_pio2+0x260>)
 8007974:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007978:	429e      	cmp	r6, r3
 800797a:	b088      	sub	sp, #32
 800797c:	4604      	mov	r4, r0
 800797e:	dc07      	bgt.n	8007990 <__ieee754_rem_pio2+0x28>
 8007980:	2200      	movs	r2, #0
 8007982:	2300      	movs	r3, #0
 8007984:	ed84 0b00 	vstr	d0, [r4]
 8007988:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800798c:	2000      	movs	r0, #0
 800798e:	e01b      	b.n	80079c8 <__ieee754_rem_pio2+0x60>
 8007990:	4b8e      	ldr	r3, [pc, #568]	; (8007bcc <__ieee754_rem_pio2+0x264>)
 8007992:	429e      	cmp	r6, r3
 8007994:	dc3b      	bgt.n	8007a0e <__ieee754_rem_pio2+0xa6>
 8007996:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800799a:	2d00      	cmp	r5, #0
 800799c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8007b88 <__ieee754_rem_pio2+0x220>
 80079a0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80079a4:	dd19      	ble.n	80079da <__ieee754_rem_pio2+0x72>
 80079a6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80079aa:	429e      	cmp	r6, r3
 80079ac:	d00e      	beq.n	80079cc <__ieee754_rem_pio2+0x64>
 80079ae:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8007b90 <__ieee754_rem_pio2+0x228>
 80079b2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80079b6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80079ba:	ed84 5b00 	vstr	d5, [r4]
 80079be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80079c2:	ed84 7b02 	vstr	d7, [r4, #8]
 80079c6:	2001      	movs	r0, #1
 80079c8:	b008      	add	sp, #32
 80079ca:	bd70      	pop	{r4, r5, r6, pc}
 80079cc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8007b98 <__ieee754_rem_pio2+0x230>
 80079d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80079d4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8007ba0 <__ieee754_rem_pio2+0x238>
 80079d8:	e7eb      	b.n	80079b2 <__ieee754_rem_pio2+0x4a>
 80079da:	429e      	cmp	r6, r3
 80079dc:	ee30 7b06 	vadd.f64	d7, d0, d6
 80079e0:	d00e      	beq.n	8007a00 <__ieee754_rem_pio2+0x98>
 80079e2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8007b90 <__ieee754_rem_pio2+0x228>
 80079e6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80079ea:	ee37 7b45 	vsub.f64	d7, d7, d5
 80079ee:	ed84 5b00 	vstr	d5, [r4]
 80079f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80079f6:	f04f 30ff 	mov.w	r0, #4294967295
 80079fa:	ed84 7b02 	vstr	d7, [r4, #8]
 80079fe:	e7e3      	b.n	80079c8 <__ieee754_rem_pio2+0x60>
 8007a00:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8007b98 <__ieee754_rem_pio2+0x230>
 8007a04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007a08:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8007ba0 <__ieee754_rem_pio2+0x238>
 8007a0c:	e7eb      	b.n	80079e6 <__ieee754_rem_pio2+0x7e>
 8007a0e:	4b70      	ldr	r3, [pc, #448]	; (8007bd0 <__ieee754_rem_pio2+0x268>)
 8007a10:	429e      	cmp	r6, r3
 8007a12:	dc6c      	bgt.n	8007aee <__ieee754_rem_pio2+0x186>
 8007a14:	f000 fc44 	bl	80082a0 <fabs>
 8007a18:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8007a1c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8007ba8 <__ieee754_rem_pio2+0x240>
 8007a20:	eea0 7b06 	vfma.f64	d7, d0, d6
 8007a24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007a28:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007a2c:	ee17 0a90 	vmov	r0, s15
 8007a30:	eeb1 5b44 	vneg.f64	d5, d4
 8007a34:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8007b88 <__ieee754_rem_pio2+0x220>
 8007a38:	eea5 0b07 	vfma.f64	d0, d5, d7
 8007a3c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8007b90 <__ieee754_rem_pio2+0x228>
 8007a40:	281f      	cmp	r0, #31
 8007a42:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007a46:	ee30 6b47 	vsub.f64	d6, d0, d7
 8007a4a:	dc08      	bgt.n	8007a5e <__ieee754_rem_pio2+0xf6>
 8007a4c:	1e42      	subs	r2, r0, #1
 8007a4e:	4b61      	ldr	r3, [pc, #388]	; (8007bd4 <__ieee754_rem_pio2+0x26c>)
 8007a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a54:	42b3      	cmp	r3, r6
 8007a56:	d002      	beq.n	8007a5e <__ieee754_rem_pio2+0xf6>
 8007a58:	ed84 6b00 	vstr	d6, [r4]
 8007a5c:	e022      	b.n	8007aa4 <__ieee754_rem_pio2+0x13c>
 8007a5e:	ee16 3a90 	vmov	r3, s13
 8007a62:	1536      	asrs	r6, r6, #20
 8007a64:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8007a68:	1af3      	subs	r3, r6, r3
 8007a6a:	2b10      	cmp	r3, #16
 8007a6c:	ddf4      	ble.n	8007a58 <__ieee754_rem_pio2+0xf0>
 8007a6e:	eeb0 6b40 	vmov.f64	d6, d0
 8007a72:	ed9f 3b49 	vldr	d3, [pc, #292]	; 8007b98 <__ieee754_rem_pio2+0x230>
 8007a76:	eea5 6b03 	vfma.f64	d6, d5, d3
 8007a7a:	ee30 7b46 	vsub.f64	d7, d0, d6
 8007a7e:	eea5 7b03 	vfma.f64	d7, d5, d3
 8007a82:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8007ba0 <__ieee754_rem_pio2+0x238>
 8007a86:	ee94 7b03 	vfnms.f64	d7, d4, d3
 8007a8a:	ee36 3b47 	vsub.f64	d3, d6, d7
 8007a8e:	ee13 3a90 	vmov	r3, s7
 8007a92:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8007a96:	1af6      	subs	r6, r6, r3
 8007a98:	2e31      	cmp	r6, #49	; 0x31
 8007a9a:	dc17      	bgt.n	8007acc <__ieee754_rem_pio2+0x164>
 8007a9c:	eeb0 0b46 	vmov.f64	d0, d6
 8007aa0:	ed84 3b00 	vstr	d3, [r4]
 8007aa4:	ed94 6b00 	vldr	d6, [r4]
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	ee30 0b46 	vsub.f64	d0, d0, d6
 8007aae:	ee30 7b47 	vsub.f64	d7, d0, d7
 8007ab2:	ed84 7b02 	vstr	d7, [r4, #8]
 8007ab6:	da87      	bge.n	80079c8 <__ieee754_rem_pio2+0x60>
 8007ab8:	eeb1 6b46 	vneg.f64	d6, d6
 8007abc:	ed84 6b00 	vstr	d6, [r4]
 8007ac0:	eeb1 7b47 	vneg.f64	d7, d7
 8007ac4:	4240      	negs	r0, r0
 8007ac6:	ed84 7b02 	vstr	d7, [r4, #8]
 8007aca:	e77d      	b.n	80079c8 <__ieee754_rem_pio2+0x60>
 8007acc:	ed9f 3b38 	vldr	d3, [pc, #224]	; 8007bb0 <__ieee754_rem_pio2+0x248>
 8007ad0:	eeb0 0b46 	vmov.f64	d0, d6
 8007ad4:	eea5 0b03 	vfma.f64	d0, d5, d3
 8007ad8:	ee36 7b40 	vsub.f64	d7, d6, d0
 8007adc:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8007bb8 <__ieee754_rem_pio2+0x250>
 8007ae0:	eea5 7b03 	vfma.f64	d7, d5, d3
 8007ae4:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8007ae8:	ee30 6b47 	vsub.f64	d6, d0, d7
 8007aec:	e7b4      	b.n	8007a58 <__ieee754_rem_pio2+0xf0>
 8007aee:	4b3a      	ldr	r3, [pc, #232]	; (8007bd8 <__ieee754_rem_pio2+0x270>)
 8007af0:	429e      	cmp	r6, r3
 8007af2:	dd06      	ble.n	8007b02 <__ieee754_rem_pio2+0x19a>
 8007af4:	ee30 7b40 	vsub.f64	d7, d0, d0
 8007af8:	ed80 7b02 	vstr	d7, [r0, #8]
 8007afc:	ed80 7b00 	vstr	d7, [r0]
 8007b00:	e744      	b.n	800798c <__ieee754_rem_pio2+0x24>
 8007b02:	1532      	asrs	r2, r6, #20
 8007b04:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8007b08:	ee10 0a10 	vmov	r0, s0
 8007b0c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8007b10:	ec41 0b17 	vmov	d7, r0, r1
 8007b14:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8007b18:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8007bc0 <__ieee754_rem_pio2+0x258>
 8007b1c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8007b20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007b24:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007b28:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007b2c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8007b30:	a908      	add	r1, sp, #32
 8007b32:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8007b36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007b3a:	ed8d 6b04 	vstr	d6, [sp, #16]
 8007b3e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007b42:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b46:	2303      	movs	r3, #3
 8007b48:	ed31 7b02 	vldmdb	r1!, {d7}
 8007b4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b54:	f103 30ff 	add.w	r0, r3, #4294967295
 8007b58:	d013      	beq.n	8007b82 <__ieee754_rem_pio2+0x21a>
 8007b5a:	4920      	ldr	r1, [pc, #128]	; (8007bdc <__ieee754_rem_pio2+0x274>)
 8007b5c:	9101      	str	r1, [sp, #4]
 8007b5e:	2102      	movs	r1, #2
 8007b60:	9100      	str	r1, [sp, #0]
 8007b62:	a802      	add	r0, sp, #8
 8007b64:	4621      	mov	r1, r4
 8007b66:	f000 f8a7 	bl	8007cb8 <__kernel_rem_pio2>
 8007b6a:	2d00      	cmp	r5, #0
 8007b6c:	f6bf af2c 	bge.w	80079c8 <__ieee754_rem_pio2+0x60>
 8007b70:	ed94 7b00 	vldr	d7, [r4]
 8007b74:	eeb1 7b47 	vneg.f64	d7, d7
 8007b78:	ed84 7b00 	vstr	d7, [r4]
 8007b7c:	ed94 7b02 	vldr	d7, [r4, #8]
 8007b80:	e79e      	b.n	8007ac0 <__ieee754_rem_pio2+0x158>
 8007b82:	4603      	mov	r3, r0
 8007b84:	e7e0      	b.n	8007b48 <__ieee754_rem_pio2+0x1e0>
 8007b86:	bf00      	nop
 8007b88:	54400000 	.word	0x54400000
 8007b8c:	3ff921fb 	.word	0x3ff921fb
 8007b90:	1a626331 	.word	0x1a626331
 8007b94:	3dd0b461 	.word	0x3dd0b461
 8007b98:	1a600000 	.word	0x1a600000
 8007b9c:	3dd0b461 	.word	0x3dd0b461
 8007ba0:	2e037073 	.word	0x2e037073
 8007ba4:	3ba3198a 	.word	0x3ba3198a
 8007ba8:	6dc9c883 	.word	0x6dc9c883
 8007bac:	3fe45f30 	.word	0x3fe45f30
 8007bb0:	2e000000 	.word	0x2e000000
 8007bb4:	3ba3198a 	.word	0x3ba3198a
 8007bb8:	252049c1 	.word	0x252049c1
 8007bbc:	397b839a 	.word	0x397b839a
 8007bc0:	00000000 	.word	0x00000000
 8007bc4:	41700000 	.word	0x41700000
 8007bc8:	3fe921fb 	.word	0x3fe921fb
 8007bcc:	4002d97b 	.word	0x4002d97b
 8007bd0:	413921fb 	.word	0x413921fb
 8007bd4:	08008500 	.word	0x08008500
 8007bd8:	7fefffff 	.word	0x7fefffff
 8007bdc:	08008580 	.word	0x08008580

08007be0 <__kernel_cos>:
 8007be0:	ee10 1a90 	vmov	r1, s1
 8007be4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007be8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007bec:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8007bf0:	da05      	bge.n	8007bfe <__kernel_cos+0x1e>
 8007bf2:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8007bf6:	ee16 3a90 	vmov	r3, s13
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d03d      	beq.n	8007c7a <__kernel_cos+0x9a>
 8007bfe:	ee20 4b00 	vmul.f64	d4, d0, d0
 8007c02:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007c06:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8007c80 <__kernel_cos+0xa0>
 8007c0a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8007c0e:	ee24 6b06 	vmul.f64	d6, d4, d6
 8007c12:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8007c88 <__kernel_cos+0xa8>
 8007c16:	eea4 5b03 	vfma.f64	d5, d4, d3
 8007c1a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8007c90 <__kernel_cos+0xb0>
 8007c1e:	eea5 3b04 	vfma.f64	d3, d5, d4
 8007c22:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8007c98 <__kernel_cos+0xb8>
 8007c26:	eea3 5b04 	vfma.f64	d5, d3, d4
 8007c2a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8007ca0 <__kernel_cos+0xc0>
 8007c2e:	4b20      	ldr	r3, [pc, #128]	; (8007cb0 <__kernel_cos+0xd0>)
 8007c30:	eea5 3b04 	vfma.f64	d3, d5, d4
 8007c34:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8007ca8 <__kernel_cos+0xc8>
 8007c38:	4299      	cmp	r1, r3
 8007c3a:	eea3 5b04 	vfma.f64	d5, d3, d4
 8007c3e:	ee25 5b04 	vmul.f64	d5, d5, d4
 8007c42:	eea4 1b05 	vfma.f64	d1, d4, d5
 8007c46:	dc04      	bgt.n	8007c52 <__kernel_cos+0x72>
 8007c48:	ee36 6b41 	vsub.f64	d6, d6, d1
 8007c4c:	ee37 0b46 	vsub.f64	d0, d7, d6
 8007c50:	4770      	bx	lr
 8007c52:	4b18      	ldr	r3, [pc, #96]	; (8007cb4 <__kernel_cos+0xd4>)
 8007c54:	4299      	cmp	r1, r3
 8007c56:	dc0d      	bgt.n	8007c74 <__kernel_cos+0x94>
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8007c5e:	ec43 2b15 	vmov	d5, r2, r3
 8007c62:	ee37 0b45 	vsub.f64	d0, d7, d5
 8007c66:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007c6a:	ee36 6b41 	vsub.f64	d6, d6, d1
 8007c6e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8007c72:	4770      	bx	lr
 8007c74:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8007c78:	e7f3      	b.n	8007c62 <__kernel_cos+0x82>
 8007c7a:	eeb0 0b47 	vmov.f64	d0, d7
 8007c7e:	4770      	bx	lr
 8007c80:	be8838d4 	.word	0xbe8838d4
 8007c84:	bda8fae9 	.word	0xbda8fae9
 8007c88:	bdb4b1c4 	.word	0xbdb4b1c4
 8007c8c:	3e21ee9e 	.word	0x3e21ee9e
 8007c90:	809c52ad 	.word	0x809c52ad
 8007c94:	be927e4f 	.word	0xbe927e4f
 8007c98:	19cb1590 	.word	0x19cb1590
 8007c9c:	3efa01a0 	.word	0x3efa01a0
 8007ca0:	16c15177 	.word	0x16c15177
 8007ca4:	bf56c16c 	.word	0xbf56c16c
 8007ca8:	5555554c 	.word	0x5555554c
 8007cac:	3fa55555 	.word	0x3fa55555
 8007cb0:	3fd33332 	.word	0x3fd33332
 8007cb4:	3fe90000 	.word	0x3fe90000

08007cb8 <__kernel_rem_pio2>:
 8007cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	ed2d 8b06 	vpush	{d8-d10}
 8007cc0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8007cc4:	469b      	mov	fp, r3
 8007cc6:	460e      	mov	r6, r1
 8007cc8:	4bc7      	ldr	r3, [pc, #796]	; (8007fe8 <__kernel_rem_pio2+0x330>)
 8007cca:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8007ccc:	9002      	str	r0, [sp, #8]
 8007cce:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8007cd2:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 8007cd4:	1ed1      	subs	r1, r2, #3
 8007cd6:	2318      	movs	r3, #24
 8007cd8:	f06f 0417 	mvn.w	r4, #23
 8007cdc:	fb91 f1f3 	sdiv	r1, r1, r3
 8007ce0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007ce4:	f10b 3aff 	add.w	sl, fp, #4294967295
 8007ce8:	fb01 4404 	mla	r4, r1, r4, r4
 8007cec:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8007fd0 <__kernel_rem_pio2+0x318>
 8007cf0:	4414      	add	r4, r2
 8007cf2:	eba1 050a 	sub.w	r5, r1, sl
 8007cf6:	aa1a      	add	r2, sp, #104	; 0x68
 8007cf8:	eb09 070a 	add.w	r7, r9, sl
 8007cfc:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8007d00:	4696      	mov	lr, r2
 8007d02:	2300      	movs	r3, #0
 8007d04:	42bb      	cmp	r3, r7
 8007d06:	dd0f      	ble.n	8007d28 <__kernel_rem_pio2+0x70>
 8007d08:	af6a      	add	r7, sp, #424	; 0x1a8
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	454a      	cmp	r2, r9
 8007d0e:	dc28      	bgt.n	8007d62 <__kernel_rem_pio2+0xaa>
 8007d10:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8007d14:	eb0b 0302 	add.w	r3, fp, r2
 8007d18:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8007d1c:	9d02      	ldr	r5, [sp, #8]
 8007d1e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 8007fd0 <__kernel_rem_pio2+0x318>
 8007d22:	f04f 0c00 	mov.w	ip, #0
 8007d26:	e016      	b.n	8007d56 <__kernel_rem_pio2+0x9e>
 8007d28:	42dd      	cmn	r5, r3
 8007d2a:	d409      	bmi.n	8007d40 <__kernel_rem_pio2+0x88>
 8007d2c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8007d30:	ee07 2a90 	vmov	s15, r2
 8007d34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007d38:	ecae 7b02 	vstmia	lr!, {d7}
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	e7e1      	b.n	8007d04 <__kernel_rem_pio2+0x4c>
 8007d40:	eeb0 7b46 	vmov.f64	d7, d6
 8007d44:	e7f8      	b.n	8007d38 <__kernel_rem_pio2+0x80>
 8007d46:	ecb5 5b02 	vldmia	r5!, {d5}
 8007d4a:	ed33 6b02 	vldmdb	r3!, {d6}
 8007d4e:	f10c 0c01 	add.w	ip, ip, #1
 8007d52:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007d56:	45d4      	cmp	ip, sl
 8007d58:	ddf5      	ble.n	8007d46 <__kernel_rem_pio2+0x8e>
 8007d5a:	eca7 7b02 	vstmia	r7!, {d7}
 8007d5e:	3201      	adds	r2, #1
 8007d60:	e7d4      	b.n	8007d0c <__kernel_rem_pio2+0x54>
 8007d62:	ab06      	add	r3, sp, #24
 8007d64:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8007d68:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8007fd8 <__kernel_rem_pio2+0x320>
 8007d6c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8007fe0 <__kernel_rem_pio2+0x328>
 8007d70:	9304      	str	r3, [sp, #16]
 8007d72:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8007d76:	9303      	str	r3, [sp, #12]
 8007d78:	464d      	mov	r5, r9
 8007d7a:	ab92      	add	r3, sp, #584	; 0x248
 8007d7c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 8007d80:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007d84:	3f01      	subs	r7, #1
 8007d86:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8007d8a:	00ff      	lsls	r7, r7, #3
 8007d8c:	ab92      	add	r3, sp, #584	; 0x248
 8007d8e:	19da      	adds	r2, r3, r7
 8007d90:	3a98      	subs	r2, #152	; 0x98
 8007d92:	2300      	movs	r3, #0
 8007d94:	1ae9      	subs	r1, r5, r3
 8007d96:	2900      	cmp	r1, #0
 8007d98:	dc4e      	bgt.n	8007e38 <__kernel_rem_pio2+0x180>
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f000 fb04 	bl	80083a8 <scalbn>
 8007da0:	eeb0 8b40 	vmov.f64	d8, d0
 8007da4:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8007da8:	ee28 0b00 	vmul.f64	d0, d8, d0
 8007dac:	f000 fa84 	bl	80082b8 <floor>
 8007db0:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8007db4:	eea0 8b47 	vfms.f64	d8, d0, d7
 8007db8:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8007dbc:	2c00      	cmp	r4, #0
 8007dbe:	edcd 7a01 	vstr	s15, [sp, #4]
 8007dc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007dc6:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007dca:	dd4a      	ble.n	8007e62 <__kernel_rem_pio2+0x1aa>
 8007dcc:	1e69      	subs	r1, r5, #1
 8007dce:	ab06      	add	r3, sp, #24
 8007dd0:	f1c4 0018 	rsb	r0, r4, #24
 8007dd4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8007dd8:	9a01      	ldr	r2, [sp, #4]
 8007dda:	fa4c f300 	asr.w	r3, ip, r0
 8007dde:	441a      	add	r2, r3
 8007de0:	4083      	lsls	r3, r0
 8007de2:	9201      	str	r2, [sp, #4]
 8007de4:	ebac 0203 	sub.w	r2, ip, r3
 8007de8:	ab06      	add	r3, sp, #24
 8007dea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8007dee:	f1c4 0317 	rsb	r3, r4, #23
 8007df2:	fa42 f803 	asr.w	r8, r2, r3
 8007df6:	f1b8 0f00 	cmp.w	r8, #0
 8007dfa:	dd43      	ble.n	8007e84 <__kernel_rem_pio2+0x1cc>
 8007dfc:	9b01      	ldr	r3, [sp, #4]
 8007dfe:	2000      	movs	r0, #0
 8007e00:	3301      	adds	r3, #1
 8007e02:	9301      	str	r3, [sp, #4]
 8007e04:	4601      	mov	r1, r0
 8007e06:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 8007e0a:	4285      	cmp	r5, r0
 8007e0c:	dc6e      	bgt.n	8007eec <__kernel_rem_pio2+0x234>
 8007e0e:	2c00      	cmp	r4, #0
 8007e10:	dd04      	ble.n	8007e1c <__kernel_rem_pio2+0x164>
 8007e12:	2c01      	cmp	r4, #1
 8007e14:	d07f      	beq.n	8007f16 <__kernel_rem_pio2+0x25e>
 8007e16:	2c02      	cmp	r4, #2
 8007e18:	f000 8087 	beq.w	8007f2a <__kernel_rem_pio2+0x272>
 8007e1c:	f1b8 0f02 	cmp.w	r8, #2
 8007e20:	d130      	bne.n	8007e84 <__kernel_rem_pio2+0x1cc>
 8007e22:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007e26:	ee30 8b48 	vsub.f64	d8, d0, d8
 8007e2a:	b359      	cbz	r1, 8007e84 <__kernel_rem_pio2+0x1cc>
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f000 fabb 	bl	80083a8 <scalbn>
 8007e32:	ee38 8b40 	vsub.f64	d8, d8, d0
 8007e36:	e025      	b.n	8007e84 <__kernel_rem_pio2+0x1cc>
 8007e38:	ee20 7b09 	vmul.f64	d7, d0, d9
 8007e3c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8007e40:	a806      	add	r0, sp, #24
 8007e42:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8007e46:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8007e4a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007e4e:	ee10 1a10 	vmov	r1, s0
 8007e52:	ed32 0b02 	vldmdb	r2!, {d0}
 8007e56:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8007e5a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8007e5e:	3301      	adds	r3, #1
 8007e60:	e798      	b.n	8007d94 <__kernel_rem_pio2+0xdc>
 8007e62:	d106      	bne.n	8007e72 <__kernel_rem_pio2+0x1ba>
 8007e64:	1e6b      	subs	r3, r5, #1
 8007e66:	aa06      	add	r2, sp, #24
 8007e68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e6c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 8007e70:	e7c1      	b.n	8007df6 <__kernel_rem_pio2+0x13e>
 8007e72:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8007e76:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7e:	da32      	bge.n	8007ee6 <__kernel_rem_pio2+0x22e>
 8007e80:	f04f 0800 	mov.w	r8, #0
 8007e84:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e8c:	f040 80b0 	bne.w	8007ff0 <__kernel_rem_pio2+0x338>
 8007e90:	1e6b      	subs	r3, r5, #1
 8007e92:	4618      	mov	r0, r3
 8007e94:	2200      	movs	r2, #0
 8007e96:	4548      	cmp	r0, r9
 8007e98:	da4e      	bge.n	8007f38 <__kernel_rem_pio2+0x280>
 8007e9a:	2a00      	cmp	r2, #0
 8007e9c:	f000 8088 	beq.w	8007fb0 <__kernel_rem_pio2+0x2f8>
 8007ea0:	aa06      	add	r2, sp, #24
 8007ea2:	3c18      	subs	r4, #24
 8007ea4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007ea8:	2900      	cmp	r1, #0
 8007eaa:	f000 808e 	beq.w	8007fca <__kernel_rem_pio2+0x312>
 8007eae:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	9302      	str	r3, [sp, #8]
 8007eb6:	f000 fa77 	bl	80083a8 <scalbn>
 8007eba:	9b02      	ldr	r3, [sp, #8]
 8007ebc:	aa6a      	add	r2, sp, #424	; 0x1a8
 8007ebe:	00d9      	lsls	r1, r3, #3
 8007ec0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8007fd8 <__kernel_rem_pio2+0x320>
 8007ec4:	1850      	adds	r0, r2, r1
 8007ec6:	f100 0508 	add.w	r5, r0, #8
 8007eca:	461c      	mov	r4, r3
 8007ecc:	2c00      	cmp	r4, #0
 8007ece:	f280 80bd 	bge.w	800804c <__kernel_rem_pio2+0x394>
 8007ed2:	2500      	movs	r5, #0
 8007ed4:	1b5c      	subs	r4, r3, r5
 8007ed6:	2c00      	cmp	r4, #0
 8007ed8:	f2c0 80dd 	blt.w	8008096 <__kernel_rem_pio2+0x3de>
 8007edc:	4f43      	ldr	r7, [pc, #268]	; (8007fec <__kernel_rem_pio2+0x334>)
 8007ede:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8007fd0 <__kernel_rem_pio2+0x318>
 8007ee2:	2400      	movs	r4, #0
 8007ee4:	e0cb      	b.n	800807e <__kernel_rem_pio2+0x3c6>
 8007ee6:	f04f 0802 	mov.w	r8, #2
 8007eea:	e787      	b.n	8007dfc <__kernel_rem_pio2+0x144>
 8007eec:	ab06      	add	r3, sp, #24
 8007eee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007ef2:	b949      	cbnz	r1, 8007f08 <__kernel_rem_pio2+0x250>
 8007ef4:	b12b      	cbz	r3, 8007f02 <__kernel_rem_pio2+0x24a>
 8007ef6:	aa06      	add	r2, sp, #24
 8007ef8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007efc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007f00:	2301      	movs	r3, #1
 8007f02:	3001      	adds	r0, #1
 8007f04:	4619      	mov	r1, r3
 8007f06:	e780      	b.n	8007e0a <__kernel_rem_pio2+0x152>
 8007f08:	aa06      	add	r2, sp, #24
 8007f0a:	ebac 0303 	sub.w	r3, ip, r3
 8007f0e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007f12:	460b      	mov	r3, r1
 8007f14:	e7f5      	b.n	8007f02 <__kernel_rem_pio2+0x24a>
 8007f16:	1e68      	subs	r0, r5, #1
 8007f18:	ab06      	add	r3, sp, #24
 8007f1a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007f1e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007f22:	aa06      	add	r2, sp, #24
 8007f24:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007f28:	e778      	b.n	8007e1c <__kernel_rem_pio2+0x164>
 8007f2a:	1e68      	subs	r0, r5, #1
 8007f2c:	ab06      	add	r3, sp, #24
 8007f2e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007f32:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007f36:	e7f4      	b.n	8007f22 <__kernel_rem_pio2+0x26a>
 8007f38:	a906      	add	r1, sp, #24
 8007f3a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007f3e:	3801      	subs	r0, #1
 8007f40:	430a      	orrs	r2, r1
 8007f42:	e7a8      	b.n	8007e96 <__kernel_rem_pio2+0x1de>
 8007f44:	f10c 0c01 	add.w	ip, ip, #1
 8007f48:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007f4c:	2a00      	cmp	r2, #0
 8007f4e:	d0f9      	beq.n	8007f44 <__kernel_rem_pio2+0x28c>
 8007f50:	eb0b 0305 	add.w	r3, fp, r5
 8007f54:	aa1a      	add	r2, sp, #104	; 0x68
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	1898      	adds	r0, r3, r2
 8007f5a:	3008      	adds	r0, #8
 8007f5c:	1c69      	adds	r1, r5, #1
 8007f5e:	3708      	adds	r7, #8
 8007f60:	2200      	movs	r2, #0
 8007f62:	4465      	add	r5, ip
 8007f64:	9005      	str	r0, [sp, #20]
 8007f66:	428d      	cmp	r5, r1
 8007f68:	f6ff af07 	blt.w	8007d7a <__kernel_rem_pio2+0xc2>
 8007f6c:	a81a      	add	r0, sp, #104	; 0x68
 8007f6e:	eb02 0c03 	add.w	ip, r2, r3
 8007f72:	4484      	add	ip, r0
 8007f74:	9803      	ldr	r0, [sp, #12]
 8007f76:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007f7a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8007f7e:	9001      	str	r0, [sp, #4]
 8007f80:	ee07 0a90 	vmov	s15, r0
 8007f84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007f88:	9805      	ldr	r0, [sp, #20]
 8007f8a:	ed8c 7b00 	vstr	d7, [ip]
 8007f8e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007fd0 <__kernel_rem_pio2+0x318>
 8007f92:	eb00 0802 	add.w	r8, r0, r2
 8007f96:	f04f 0c00 	mov.w	ip, #0
 8007f9a:	45d4      	cmp	ip, sl
 8007f9c:	dd0c      	ble.n	8007fb8 <__kernel_rem_pio2+0x300>
 8007f9e:	eb02 0c07 	add.w	ip, r2, r7
 8007fa2:	a86a      	add	r0, sp, #424	; 0x1a8
 8007fa4:	4484      	add	ip, r0
 8007fa6:	ed8c 7b02 	vstr	d7, [ip, #8]
 8007faa:	3101      	adds	r1, #1
 8007fac:	3208      	adds	r2, #8
 8007fae:	e7da      	b.n	8007f66 <__kernel_rem_pio2+0x2ae>
 8007fb0:	9b04      	ldr	r3, [sp, #16]
 8007fb2:	f04f 0c01 	mov.w	ip, #1
 8007fb6:	e7c7      	b.n	8007f48 <__kernel_rem_pio2+0x290>
 8007fb8:	ecbe 5b02 	vldmia	lr!, {d5}
 8007fbc:	ed38 6b02 	vldmdb	r8!, {d6}
 8007fc0:	f10c 0c01 	add.w	ip, ip, #1
 8007fc4:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007fc8:	e7e7      	b.n	8007f9a <__kernel_rem_pio2+0x2e2>
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	e768      	b.n	8007ea0 <__kernel_rem_pio2+0x1e8>
 8007fce:	bf00      	nop
	...
 8007fdc:	3e700000 	.word	0x3e700000
 8007fe0:	00000000 	.word	0x00000000
 8007fe4:	41700000 	.word	0x41700000
 8007fe8:	080086c8 	.word	0x080086c8
 8007fec:	08008688 	.word	0x08008688
 8007ff0:	4260      	negs	r0, r4
 8007ff2:	eeb0 0b48 	vmov.f64	d0, d8
 8007ff6:	f000 f9d7 	bl	80083a8 <scalbn>
 8007ffa:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80081d8 <__kernel_rem_pio2+0x520>
 8007ffe:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8008002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008006:	db18      	blt.n	800803a <__kernel_rem_pio2+0x382>
 8008008:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80081e0 <__kernel_rem_pio2+0x528>
 800800c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008010:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008014:	aa06      	add	r2, sp, #24
 8008016:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800801a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800801e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008022:	a906      	add	r1, sp, #24
 8008024:	ee10 3a10 	vmov	r3, s0
 8008028:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800802c:	1c6b      	adds	r3, r5, #1
 800802e:	ee17 2a10 	vmov	r2, s14
 8008032:	3418      	adds	r4, #24
 8008034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008038:	e739      	b.n	8007eae <__kernel_rem_pio2+0x1f6>
 800803a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800803e:	aa06      	add	r2, sp, #24
 8008040:	ee10 3a10 	vmov	r3, s0
 8008044:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008048:	462b      	mov	r3, r5
 800804a:	e730      	b.n	8007eae <__kernel_rem_pio2+0x1f6>
 800804c:	aa06      	add	r2, sp, #24
 800804e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8008052:	9202      	str	r2, [sp, #8]
 8008054:	ee07 2a90 	vmov	s15, r2
 8008058:	3c01      	subs	r4, #1
 800805a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800805e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8008062:	ee20 0b06 	vmul.f64	d0, d0, d6
 8008066:	ed25 7b02 	vstmdb	r5!, {d7}
 800806a:	e72f      	b.n	8007ecc <__kernel_rem_pio2+0x214>
 800806c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8008070:	ecb7 5b02 	vldmia	r7!, {d5}
 8008074:	ed9c 6b00 	vldr	d6, [ip]
 8008078:	3401      	adds	r4, #1
 800807a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800807e:	454c      	cmp	r4, r9
 8008080:	dc01      	bgt.n	8008086 <__kernel_rem_pio2+0x3ce>
 8008082:	42a5      	cmp	r5, r4
 8008084:	daf2      	bge.n	800806c <__kernel_rem_pio2+0x3b4>
 8008086:	aa42      	add	r2, sp, #264	; 0x108
 8008088:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800808c:	ed84 7b00 	vstr	d7, [r4]
 8008090:	3501      	adds	r5, #1
 8008092:	3808      	subs	r0, #8
 8008094:	e71e      	b.n	8007ed4 <__kernel_rem_pio2+0x21c>
 8008096:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8008098:	2a03      	cmp	r2, #3
 800809a:	d84e      	bhi.n	800813a <__kernel_rem_pio2+0x482>
 800809c:	e8df f002 	tbb	[pc, r2]
 80080a0:	021f1f3e 	.word	0x021f1f3e
 80080a4:	3108      	adds	r1, #8
 80080a6:	aa42      	add	r2, sp, #264	; 0x108
 80080a8:	4411      	add	r1, r2
 80080aa:	4608      	mov	r0, r1
 80080ac:	461c      	mov	r4, r3
 80080ae:	2c00      	cmp	r4, #0
 80080b0:	dc61      	bgt.n	8008176 <__kernel_rem_pio2+0x4be>
 80080b2:	4608      	mov	r0, r1
 80080b4:	461c      	mov	r4, r3
 80080b6:	2c01      	cmp	r4, #1
 80080b8:	dc6d      	bgt.n	8008196 <__kernel_rem_pio2+0x4de>
 80080ba:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80081e8 <__kernel_rem_pio2+0x530>
 80080be:	2b01      	cmp	r3, #1
 80080c0:	dc79      	bgt.n	80081b6 <__kernel_rem_pio2+0x4fe>
 80080c2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80080c6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80080ca:	f1b8 0f00 	cmp.w	r8, #0
 80080ce:	d178      	bne.n	80081c2 <__kernel_rem_pio2+0x50a>
 80080d0:	ed86 5b00 	vstr	d5, [r6]
 80080d4:	ed86 6b02 	vstr	d6, [r6, #8]
 80080d8:	ed86 7b04 	vstr	d7, [r6, #16]
 80080dc:	e02d      	b.n	800813a <__kernel_rem_pio2+0x482>
 80080de:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80081e8 <__kernel_rem_pio2+0x530>
 80080e2:	3108      	adds	r1, #8
 80080e4:	aa42      	add	r2, sp, #264	; 0x108
 80080e6:	4411      	add	r1, r2
 80080e8:	4618      	mov	r0, r3
 80080ea:	2800      	cmp	r0, #0
 80080ec:	da34      	bge.n	8008158 <__kernel_rem_pio2+0x4a0>
 80080ee:	f1b8 0f00 	cmp.w	r8, #0
 80080f2:	d037      	beq.n	8008164 <__kernel_rem_pio2+0x4ac>
 80080f4:	eeb1 7b46 	vneg.f64	d7, d6
 80080f8:	ed86 7b00 	vstr	d7, [r6]
 80080fc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8008100:	a844      	add	r0, sp, #272	; 0x110
 8008102:	2101      	movs	r1, #1
 8008104:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008108:	428b      	cmp	r3, r1
 800810a:	da2e      	bge.n	800816a <__kernel_rem_pio2+0x4b2>
 800810c:	f1b8 0f00 	cmp.w	r8, #0
 8008110:	d001      	beq.n	8008116 <__kernel_rem_pio2+0x45e>
 8008112:	eeb1 7b47 	vneg.f64	d7, d7
 8008116:	ed86 7b02 	vstr	d7, [r6, #8]
 800811a:	e00e      	b.n	800813a <__kernel_rem_pio2+0x482>
 800811c:	aa92      	add	r2, sp, #584	; 0x248
 800811e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 80081e8 <__kernel_rem_pio2+0x530>
 8008122:	4411      	add	r1, r2
 8008124:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8008128:	2b00      	cmp	r3, #0
 800812a:	da0f      	bge.n	800814c <__kernel_rem_pio2+0x494>
 800812c:	f1b8 0f00 	cmp.w	r8, #0
 8008130:	d001      	beq.n	8008136 <__kernel_rem_pio2+0x47e>
 8008132:	eeb1 7b47 	vneg.f64	d7, d7
 8008136:	ed86 7b00 	vstr	d7, [r6]
 800813a:	9b01      	ldr	r3, [sp, #4]
 800813c:	f003 0007 	and.w	r0, r3, #7
 8008140:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8008144:	ecbd 8b06 	vpop	{d8-d10}
 8008148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814c:	ed31 6b02 	vldmdb	r1!, {d6}
 8008150:	3b01      	subs	r3, #1
 8008152:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008156:	e7e7      	b.n	8008128 <__kernel_rem_pio2+0x470>
 8008158:	ed31 7b02 	vldmdb	r1!, {d7}
 800815c:	3801      	subs	r0, #1
 800815e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008162:	e7c2      	b.n	80080ea <__kernel_rem_pio2+0x432>
 8008164:	eeb0 7b46 	vmov.f64	d7, d6
 8008168:	e7c6      	b.n	80080f8 <__kernel_rem_pio2+0x440>
 800816a:	ecb0 6b02 	vldmia	r0!, {d6}
 800816e:	3101      	adds	r1, #1
 8008170:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008174:	e7c8      	b.n	8008108 <__kernel_rem_pio2+0x450>
 8008176:	ed10 7b04 	vldr	d7, [r0, #-16]
 800817a:	ed30 5b02 	vldmdb	r0!, {d5}
 800817e:	3c01      	subs	r4, #1
 8008180:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008184:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008188:	ed00 6b02 	vstr	d6, [r0, #-8]
 800818c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008190:	ed80 7b00 	vstr	d7, [r0]
 8008194:	e78b      	b.n	80080ae <__kernel_rem_pio2+0x3f6>
 8008196:	ed10 7b04 	vldr	d7, [r0, #-16]
 800819a:	ed30 5b02 	vldmdb	r0!, {d5}
 800819e:	3c01      	subs	r4, #1
 80081a0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80081a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80081a8:	ed00 6b02 	vstr	d6, [r0, #-8]
 80081ac:	ee37 7b05 	vadd.f64	d7, d7, d5
 80081b0:	ed80 7b00 	vstr	d7, [r0]
 80081b4:	e77f      	b.n	80080b6 <__kernel_rem_pio2+0x3fe>
 80081b6:	ed31 6b02 	vldmdb	r1!, {d6}
 80081ba:	3b01      	subs	r3, #1
 80081bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80081c0:	e77d      	b.n	80080be <__kernel_rem_pio2+0x406>
 80081c2:	eeb1 5b45 	vneg.f64	d5, d5
 80081c6:	eeb1 6b46 	vneg.f64	d6, d6
 80081ca:	ed86 5b00 	vstr	d5, [r6]
 80081ce:	eeb1 7b47 	vneg.f64	d7, d7
 80081d2:	ed86 6b02 	vstr	d6, [r6, #8]
 80081d6:	e77f      	b.n	80080d8 <__kernel_rem_pio2+0x420>
 80081d8:	00000000 	.word	0x00000000
 80081dc:	41700000 	.word	0x41700000
 80081e0:	00000000 	.word	0x00000000
 80081e4:	3e700000 	.word	0x3e700000
	...

080081f0 <__kernel_sin>:
 80081f0:	ee10 3a90 	vmov	r3, s1
 80081f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081f8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80081fc:	da04      	bge.n	8008208 <__kernel_sin+0x18>
 80081fe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008202:	ee17 3a90 	vmov	r3, s15
 8008206:	b35b      	cbz	r3, 8008260 <__kernel_sin+0x70>
 8008208:	ee20 6b00 	vmul.f64	d6, d0, d0
 800820c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8008210:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8008268 <__kernel_sin+0x78>
 8008214:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008270 <__kernel_sin+0x80>
 8008218:	eea6 4b07 	vfma.f64	d4, d6, d7
 800821c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008278 <__kernel_sin+0x88>
 8008220:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008224:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008280 <__kernel_sin+0x90>
 8008228:	eea7 4b06 	vfma.f64	d4, d7, d6
 800822c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008288 <__kernel_sin+0x98>
 8008230:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008234:	b930      	cbnz	r0, 8008244 <__kernel_sin+0x54>
 8008236:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008290 <__kernel_sin+0xa0>
 800823a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800823e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8008242:	4770      	bx	lr
 8008244:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8008248:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800824c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8008250:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8008254:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008298 <__kernel_sin+0xa8>
 8008258:	eea5 1b07 	vfma.f64	d1, d5, d7
 800825c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	f3af 8000 	nop.w
 8008268:	5acfd57c 	.word	0x5acfd57c
 800826c:	3de5d93a 	.word	0x3de5d93a
 8008270:	8a2b9ceb 	.word	0x8a2b9ceb
 8008274:	be5ae5e6 	.word	0xbe5ae5e6
 8008278:	57b1fe7d 	.word	0x57b1fe7d
 800827c:	3ec71de3 	.word	0x3ec71de3
 8008280:	19c161d5 	.word	0x19c161d5
 8008284:	bf2a01a0 	.word	0xbf2a01a0
 8008288:	1110f8a6 	.word	0x1110f8a6
 800828c:	3f811111 	.word	0x3f811111
 8008290:	55555549 	.word	0x55555549
 8008294:	bfc55555 	.word	0xbfc55555
 8008298:	55555549 	.word	0x55555549
 800829c:	3fc55555 	.word	0x3fc55555

080082a0 <fabs>:
 80082a0:	ec51 0b10 	vmov	r0, r1, d0
 80082a4:	ee10 2a10 	vmov	r2, s0
 80082a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80082ac:	ec43 2b10 	vmov	d0, r2, r3
 80082b0:	4770      	bx	lr
 80082b2:	0000      	movs	r0, r0
 80082b4:	0000      	movs	r0, r0
	...

080082b8 <floor>:
 80082b8:	ee10 1a90 	vmov	r1, s1
 80082bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80082c0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80082c4:	2b13      	cmp	r3, #19
 80082c6:	b530      	push	{r4, r5, lr}
 80082c8:	ee10 0a10 	vmov	r0, s0
 80082cc:	ee10 5a10 	vmov	r5, s0
 80082d0:	dc33      	bgt.n	800833a <floor+0x82>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	da17      	bge.n	8008306 <floor+0x4e>
 80082d6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8008398 <floor+0xe0>
 80082da:	ee30 0b07 	vadd.f64	d0, d0, d7
 80082de:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80082e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e6:	dd09      	ble.n	80082fc <floor+0x44>
 80082e8:	2900      	cmp	r1, #0
 80082ea:	da50      	bge.n	800838e <floor+0xd6>
 80082ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80082f0:	4a2b      	ldr	r2, [pc, #172]	; (80083a0 <floor+0xe8>)
 80082f2:	4303      	orrs	r3, r0
 80082f4:	2000      	movs	r0, #0
 80082f6:	4283      	cmp	r3, r0
 80082f8:	bf18      	it	ne
 80082fa:	4611      	movne	r1, r2
 80082fc:	460b      	mov	r3, r1
 80082fe:	4602      	mov	r2, r0
 8008300:	ec43 2b10 	vmov	d0, r2, r3
 8008304:	e020      	b.n	8008348 <floor+0x90>
 8008306:	4a27      	ldr	r2, [pc, #156]	; (80083a4 <floor+0xec>)
 8008308:	411a      	asrs	r2, r3
 800830a:	ea01 0402 	and.w	r4, r1, r2
 800830e:	4304      	orrs	r4, r0
 8008310:	d01a      	beq.n	8008348 <floor+0x90>
 8008312:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008398 <floor+0xe0>
 8008316:	ee30 0b07 	vadd.f64	d0, d0, d7
 800831a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800831e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008322:	ddeb      	ble.n	80082fc <floor+0x44>
 8008324:	2900      	cmp	r1, #0
 8008326:	bfbe      	ittt	lt
 8008328:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800832c:	fa40 f303 	asrlt.w	r3, r0, r3
 8008330:	18c9      	addlt	r1, r1, r3
 8008332:	ea21 0102 	bic.w	r1, r1, r2
 8008336:	2000      	movs	r0, #0
 8008338:	e7e0      	b.n	80082fc <floor+0x44>
 800833a:	2b33      	cmp	r3, #51	; 0x33
 800833c:	dd05      	ble.n	800834a <floor+0x92>
 800833e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008342:	d101      	bne.n	8008348 <floor+0x90>
 8008344:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800834e:	f04f 32ff 	mov.w	r2, #4294967295
 8008352:	40e2      	lsrs	r2, r4
 8008354:	4202      	tst	r2, r0
 8008356:	d0f7      	beq.n	8008348 <floor+0x90>
 8008358:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8008398 <floor+0xe0>
 800835c:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008360:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008368:	ddc8      	ble.n	80082fc <floor+0x44>
 800836a:	2900      	cmp	r1, #0
 800836c:	da02      	bge.n	8008374 <floor+0xbc>
 800836e:	2b14      	cmp	r3, #20
 8008370:	d103      	bne.n	800837a <floor+0xc2>
 8008372:	3101      	adds	r1, #1
 8008374:	ea20 0002 	bic.w	r0, r0, r2
 8008378:	e7c0      	b.n	80082fc <floor+0x44>
 800837a:	2401      	movs	r4, #1
 800837c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008380:	fa04 f303 	lsl.w	r3, r4, r3
 8008384:	4418      	add	r0, r3
 8008386:	42a8      	cmp	r0, r5
 8008388:	bf38      	it	cc
 800838a:	1909      	addcc	r1, r1, r4
 800838c:	e7f2      	b.n	8008374 <floor+0xbc>
 800838e:	2000      	movs	r0, #0
 8008390:	4601      	mov	r1, r0
 8008392:	e7b3      	b.n	80082fc <floor+0x44>
 8008394:	f3af 8000 	nop.w
 8008398:	8800759c 	.word	0x8800759c
 800839c:	7e37e43c 	.word	0x7e37e43c
 80083a0:	bff00000 	.word	0xbff00000
 80083a4:	000fffff 	.word	0x000fffff

080083a8 <scalbn>:
 80083a8:	b500      	push	{lr}
 80083aa:	ed2d 8b02 	vpush	{d8}
 80083ae:	b083      	sub	sp, #12
 80083b0:	ed8d 0b00 	vstr	d0, [sp]
 80083b4:	9b01      	ldr	r3, [sp, #4]
 80083b6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80083ba:	b9a2      	cbnz	r2, 80083e6 <scalbn+0x3e>
 80083bc:	9a00      	ldr	r2, [sp, #0]
 80083be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083c2:	4313      	orrs	r3, r2
 80083c4:	d03a      	beq.n	800843c <scalbn+0x94>
 80083c6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008480 <scalbn+0xd8>
 80083ca:	4b35      	ldr	r3, [pc, #212]	; (80084a0 <scalbn+0xf8>)
 80083cc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80083d0:	4298      	cmp	r0, r3
 80083d2:	ed8d 7b00 	vstr	d7, [sp]
 80083d6:	da11      	bge.n	80083fc <scalbn+0x54>
 80083d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8008488 <scalbn+0xe0>
 80083dc:	ed9d 6b00 	vldr	d6, [sp]
 80083e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80083e4:	e007      	b.n	80083f6 <scalbn+0x4e>
 80083e6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80083ea:	428a      	cmp	r2, r1
 80083ec:	d10a      	bne.n	8008404 <scalbn+0x5c>
 80083ee:	ed9d 7b00 	vldr	d7, [sp]
 80083f2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80083f6:	ed8d 7b00 	vstr	d7, [sp]
 80083fa:	e01f      	b.n	800843c <scalbn+0x94>
 80083fc:	9b01      	ldr	r3, [sp, #4]
 80083fe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008402:	3a36      	subs	r2, #54	; 0x36
 8008404:	4402      	add	r2, r0
 8008406:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800840a:	428a      	cmp	r2, r1
 800840c:	dd0a      	ble.n	8008424 <scalbn+0x7c>
 800840e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8008490 <scalbn+0xe8>
 8008412:	eeb0 0b48 	vmov.f64	d0, d8
 8008416:	ed9d 1b00 	vldr	d1, [sp]
 800841a:	f000 f843 	bl	80084a4 <copysign>
 800841e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8008422:	e7e8      	b.n	80083f6 <scalbn+0x4e>
 8008424:	2a00      	cmp	r2, #0
 8008426:	dd10      	ble.n	800844a <scalbn+0xa2>
 8008428:	e9dd 0100 	ldrd	r0, r1, [sp]
 800842c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008430:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008434:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008438:	e9cd 0100 	strd	r0, r1, [sp]
 800843c:	ed9d 0b00 	vldr	d0, [sp]
 8008440:	b003      	add	sp, #12
 8008442:	ecbd 8b02 	vpop	{d8}
 8008446:	f85d fb04 	ldr.w	pc, [sp], #4
 800844a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800844e:	da06      	bge.n	800845e <scalbn+0xb6>
 8008450:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008454:	4298      	cmp	r0, r3
 8008456:	dcda      	bgt.n	800840e <scalbn+0x66>
 8008458:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8008488 <scalbn+0xe0>
 800845c:	e7d9      	b.n	8008412 <scalbn+0x6a>
 800845e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008462:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008466:	3236      	adds	r2, #54	; 0x36
 8008468:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800846c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008470:	ec41 0b17 	vmov	d7, r0, r1
 8008474:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8008498 <scalbn+0xf0>
 8008478:	e7b2      	b.n	80083e0 <scalbn+0x38>
 800847a:	bf00      	nop
 800847c:	f3af 8000 	nop.w
 8008480:	00000000 	.word	0x00000000
 8008484:	43500000 	.word	0x43500000
 8008488:	c2f8f359 	.word	0xc2f8f359
 800848c:	01a56e1f 	.word	0x01a56e1f
 8008490:	8800759c 	.word	0x8800759c
 8008494:	7e37e43c 	.word	0x7e37e43c
 8008498:	00000000 	.word	0x00000000
 800849c:	3c900000 	.word	0x3c900000
 80084a0:	ffff3cb0 	.word	0xffff3cb0

080084a4 <copysign>:
 80084a4:	ec51 0b10 	vmov	r0, r1, d0
 80084a8:	ee11 0a90 	vmov	r0, s3
 80084ac:	ee10 2a10 	vmov	r2, s0
 80084b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80084b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80084b8:	ea41 0300 	orr.w	r3, r1, r0
 80084bc:	ec43 2b10 	vmov	d0, r2, r3
 80084c0:	4770      	bx	lr
	...

080084c4 <_init>:
 80084c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c6:	bf00      	nop
 80084c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ca:	bc08      	pop	{r3}
 80084cc:	469e      	mov	lr, r3
 80084ce:	4770      	bx	lr

080084d0 <_fini>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	bf00      	nop
 80084d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d6:	bc08      	pop	{r3}
 80084d8:	469e      	mov	lr, r3
 80084da:	4770      	bx	lr
